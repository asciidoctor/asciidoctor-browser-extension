var Opal = this.Opal;

if (typeof Opal === 'undefined' && typeof module === 'object' && module.exports) {
  Opal = require('opal-runtime').Opal;
}

if (typeof Opal === 'undefined') {
(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // Constructor for instances of BasicObject
  function BasicObject_alloc(){}

  // Constructor for instances of Object
  function Object_alloc(){}

  // Constructor for instances of Class
  function Class_alloc(){}

  // Constructor for instances of Module
  function Module_alloc(){}

  // Constructor for instances of NilClass (nil)
  function NilClass_alloc(){}

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // All bridged classes - keep track to donate methods from Object
  var bridges = {};

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor = TopScope;

  // List top scope constants
  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error', // error, warning, ignore
    unsupported_features_severity: 'warning' // error, warning, ignore
  }

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and phantom for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  }


  // Constants
  // ---------

  // Get a constant on the given scope. Every class and module in Opal has a
  // scope used to store, and inherit, constants. For example, the top level
  // `Object` in ruby has a scope accessible as `Opal.Object.$$scope`.
  //
  // To get the `Array` class using this scope, you could use:
  //
  //     Opal.Object.$$scope.get("Array")
  //
  // If a constant with the given name cannot be found, then a dispatch to the
  // class/module's `#const_method` is called, which by default will raise an
  // error.
  //
  // @param name [String] the name of the constant to lookup
  // @return [Object]
  //
  Opal.get = function(name) {
    var constant = this[name];

    if (constant == null) {
      return this.base.$const_get(name);
    }

    return constant;
  };

  // Create a new constants scope for the given class with the given
  // base. Constants are looked up through their parents, so the base
  // scope will be the outer scope of the new klass.
  //
  // @param base_scope [$$scope] the scope in which the new scope should be created
  // @param klass      [Class]
  // @param id         [String, null] the name of the newly created scope
  //
  Opal.create_scope = function(base_scope, klass, id) {
    var const_alloc = function() {};
    var const_scope = const_alloc.prototype = new base_scope.constructor();

    klass.$$scope       = const_scope;
    klass.$$base_module = base_scope.base;

    const_scope.base        = klass;
    const_scope.constructor = const_alloc;
    const_scope.constants   = [];

    if (id) {
      Opal.cdecl(base_scope, id, klass);
      const_alloc.displayName = id+"_scope_alloc";
    }
  };

  // Constant assignment, see also `Opal.cdecl`
  //
  // @param base_module [Module, Class] the constant namespace
  // @param name        [String] the name of the constant
  // @param value       [Object] the value of the constant
  //
  // @example Assigning a namespaced constant
  //   self::FOO = 'bar'
  //
  // @example Assigning with Module#const_set
  //   Foo.const_set :BAR, 123
  //
  Opal.casgn = function(base_module, name, value) {
    function update(klass, name) {
      klass.$$name = name;

      for (name in klass.$$scope) {
        var value = klass.$$scope[name];

        if (value.$$name === nil && (value.$$is_class || value.$$is_module)) {
          update(value, name)
        }
      }
    }

    var scope = base_module.$$scope;

    if (value.$$is_class || value.$$is_module) {
      // Only checking _Object prevents setting a const on an anonymous class
      // that has a superclass that's not Object
      if (value.$$is_class || value.$$base_module === _Object) {
        value.$$base_module = base_module;
      }

      if (value.$$name === nil && value.$$base_module.$$name !== nil) {
        update(value, name);
      }
    }

    scope.constants.push(name);
    scope[name] = value;

    // If we dynamically declare a constant in a module,
    // we should populate all the classes that include this module
    // with the same constant
    if (base_module.$$is_module && base_module.$$dep) {
      for (var i = 0; i < base_module.$$dep.length; i++) {
        var dep = base_module.$$dep[i];
        Opal.casgn(dep, name, value);
      }
    }

    return value;
  };

  // Constant declaration
  //
  // @example
  //   FOO = :bar
  //
  // @param base_scope [$$scope] the current scope
  // @param name       [String] the name of the constant
  // @param value      [Object] the value of the constant
  Opal.cdecl = function(base_scope, name, value) {
    if ((value.$$is_class || value.$$is_module) && value.$$orig_scope == null) {
      value.$$name = name;
      value.$$orig_scope = base_scope;
      // Here we should explicitly set a base module
      // (a module where the constant was initially defined)
      value.$$base_module = base_scope.base;
      base_scope.constructor[name] = value;
    }

    base_scope.constants.push(name);
    return base_scope[name] = value;
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `base` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `base` is an object (not a class/module), we simple get its class and
  // use that as the base instead.
  //
  // @param base        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.klass = function(base, superclass, name, constructor) {
    var klass, bridged, alloc;

    // If base is an object, use its class
    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    // If the superclass is a function then we're bridging a native JS class
    if (typeof(superclass) === 'function') {
      bridged = superclass;
      superclass = _Object;
    }

    // Try to find the class in the current scope
    klass = base.$$scope[name];

    // If the class exists in the scope, then we must use that
    if (klass && klass.$$orig_scope === base.$$scope) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superclass && klass.$$super !== superclass) {
        throw Opal.TypeError.$new("superclass mismatch for class " + name);
      }

      return klass;
    }

    // Class doesnt exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // If bridged the JS class will also be the alloc function
    alloc = bridged || Opal.boot_class_alloc(name, constructor, superclass);

    // Create the class object (instance of Class)
    klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    // @property $$super the superclass, doesn't get changed by module inclusions
    klass.$$super = superclass;

    // @property $$parent direct parent class
    //                    starts with the superclass, after klass inclusion is
    //                    the last included klass
    klass.$$parent = superclass;

    // Every class gets its own constant scope, inherited from current scope
    Opal.create_scope(base.$$scope, klass, name);

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    base[name] = klass;

    if (bridged) {
      Opal.bridge(klass, alloc);
    }
    else {
      // Copy all parent constants to child, unless parent is Object
      if (superclass !== _Object && superclass !== BasicObject) {
        Opal.donate_constants(superclass, klass);
      }

      // Call .inherited() hook with new class on the superclass
      if (superclass.$inherited) {
        superclass.$inherited(klass);
      }
    }

    return klass;
  };

  // Boot a base class (makes instances).
  //
  // @param name [String,null] the class name
  // @param constructor [JS.Function] the class' instances constructor/alloc function
  // @param superclass  [Class,null] the superclass object
  // @return [JS.Function] the consturctor holding the prototype for the class' instances
  Opal.boot_class_alloc = function(name, constructor, superclass) {
    if (superclass) {
      var alloc_proxy = function() {};
      alloc_proxy.prototype  = superclass.$$proto || superclass.prototype;
      constructor.prototype = new alloc_proxy();
    }

    if (name) {
      constructor.displayName = name+'_alloc';
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  // Adds common/required properties to class object (as in `Class.new`)
  //
  // @param name  [String,null] The name of the class
  //
  // @param alloc [JS.Function] The constructor of the class' instances
  //
  // @param superclass_name [String,null]
  //   The name of the super class, this is
  //   usefule to build the `.displayName` of the singleton class
  //
  // @param superclass_alloc [JS.Function]
  //   The constructor of the superclass from which the singleton_class is
  //   derived.
  //
  // @return [Class]
  Opal.setup_class_object = function(name, alloc, superclass_name, superclass_alloc) {
    // Grab the superclass prototype and use it to build an intermediary object
    // in the prototype chain.
    var superclass_alloc_proxy = function() {};
        superclass_alloc_proxy.prototype = superclass_alloc.prototype;
        superclass_alloc_proxy.displayName = superclass_name;

    var singleton_class_alloc = function() {}
        singleton_class_alloc.prototype = new superclass_alloc_proxy();

    // The built class is the only instance of its singleton_class
    var klass = new singleton_class_alloc();

    // @property $$alloc This is the constructor of instances of the current
    //                   class. Its prototype will be used for method lookup
    klass.$$alloc = alloc;

    klass.$$name = name || nil;

    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    klass.$$id = Opal.uid();

    // Set a displayName for the singleton_class
    singleton_class_alloc.displayName = "#<Class:"+(name || ("#<Class:"+klass.$$id+">"))+">";

    // @property $$proto This is the prototype on which methods will be defined
    klass.$$proto = alloc.prototype;

    // @property $$proto.$$class Make available to instances a reference to the
    //                           class they belong to.
    klass.$$proto.$$class = klass;

    // @property constructor keeps a ref to the constructor, but apparently the
    //                       constructor is already set on:
    //
    //                          `var klass = new constructor` is called.
    //
    //                       Maybe there are some browsers not abiding (IE6?)
    klass.constructor = singleton_class_alloc;

    // @property $$is_class Clearly mark this as a class
    klass.$$is_class = true;

    // @property $$class Classes are instances of the class Class
    klass.$$class    = Class;

    // @property $$inc included modules
    klass.$$inc = [];

    return klass;
  };

  // Define new module (or return existing module). The given `base` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the base is a ruby
  // object then that objects real ruby class is used (e.g. if the base is the
  // main object, then the top level `Object` class is used as the base).
  //
  // If a module of the given name is already defined in the base, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the base, then an error is
  // generated instead (cannot have a class and module of same name in same base).
  //
  // Otherwise, a new module is created in the base with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  base [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.module = function(base, name) {
    var module;

    if (!base.$$is_class && !base.$$is_module) {
      base = base.$$class;
    }

    if ($hasOwn.call(base.$$scope, name)) {
      module = base.$$scope[name];

      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }
    else {
      module = Opal.module_allocate(Module);
      Opal.create_scope(base.$$scope, module, name);
    }

    return module;
  };

  // The implementation for Module#initialize
  // @param module [Module]
  // @param block [Proc,nil]
  // @return nil
  Opal.module_initialize = function(module, block) {
    if (block !== nil) {
      var block_self = block.$$s;
      block.$$s = null;
      block.call(module);
      block.$$s = block_self;
    }
    return nil;
  };

  // Internal function to create a new module instance. This simply sets up
  // the prototype hierarchy and method tables.
  //
  Opal.module_allocate = function(superclass) {
    var mtor = function() {};
    mtor.prototype = superclass.$$alloc.prototype;

    function module_constructor() {}
    module_constructor.prototype = new mtor();

    var module = new module_constructor();
    var module_prototype = {};

    // @property $$id Each class is assigned a unique `id` that helps
    //                comparation and implementation of `#object_id`
    module.$$id = Opal.uid();

    // Set the display name of the singleton prototype holder
    module_constructor.displayName = "#<Class:#<Module:"+module.$$id+">>"

    // @property $$proto This is the prototype on which methods will be defined
    module.$$proto = module_prototype;

    // @property constructor
    //   keeps a ref to the constructor, but apparently the
    //   constructor is already set on:
    //
    //      `var module = new constructor` is called.
    //
    //   Maybe there are some browsers not abiding (IE6?)
    module.constructor = module_constructor;

    // @property $$is_module Clearly mark this as a module
    module.$$is_module = true;
    module.$$class     = Module;

    // @property $$super
    //   the superclass, doesn't get changed by module inclusions
    module.$$super = superclass;

    // @property $$parent
    //   direct parent class or module
    //   starts with the superclass, after module inclusion is
    //   the last included module
    module.$$parent = superclass;

    // @property $$inc included modules
    module.$$inc = [];

    // mark the object as a module
    module.$$is_module = true;

    // initialize dependency tracking
    module.$$dep = [];

    // initialize the name with nil
    module.$$name = nil;

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.$$is_class || object.$$is_module) {
      return Opal.build_class_singleton_class(object);
    }

    return Opal.build_object_singleton_class(object);
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(object) {
    var alloc, superclass, klass;

    if (object.$$meta) {
      return object.$$meta;
    }

    // The constructor and prototype of the singleton_class instances is the
    // current class constructor and prototype.
    alloc = object.constructor;

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = object === BasicObject ? Class : Opal.build_class_singleton_class(object.$$super);

    klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);
    klass.$$super = superclass;
    klass.$$parent = superclass;

    // The singleton_class retains the same scope as the original class
    Opal.create_scope(object.$$scope, klass);

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        name = "#<Class:#<" + superclass.$$name + ":" + superclass.$$id + ">>";

    var alloc = Opal.boot_class_alloc(name, function(){}, superclass)
    var klass = Opal.setup_class_object(name, alloc, superclass.$$name, superclass.constructor);

    klass.$$super  = superclass;
    klass.$$parent = superclass;
    klass.$$class  = superclass.$$class;
    klass.$$scope  = superclass.$$scope;
    klass.$$proto  = object;

    klass.$$is_singleton = true;
    klass.$$singleton_of = object;

    return object.$$meta = klass;
  };

  // Bridges a single method.
  Opal.bridge_method = function(target, from, name, body) {
    var ancestors, i, ancestor, length;

    ancestors = target.$$bridge.$ancestors();

    // order important here, we have to check for method presence in
    // ancestors from the bridged class to the last ancestor
    for (i = 0, length = ancestors.length; i < length; i++) {
      ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$proto, name) &&
          ancestor.$$proto[name] &&
          !ancestor.$$proto[name].$$donated &&
          !ancestor.$$proto[name].$$stub &&
          ancestor !== from) {
        break;
      }

      if (ancestor === from) {
        target.prototype[name] = body
        break;
      }
    }

  };

  // Bridges from *donator* to a *target*.
  Opal._bridge = function(target, donator) {
    var id, methods, method, i, bridged;

    if (typeof(target) === "function") {
      id      = donator.$__id__();
      methods = donator.$instance_methods();

      for (i = methods.length - 1; i >= 0; i--) {
        method = '$' + methods[i];

        Opal.bridge_method(target, donator, method, donator.$$proto[method]);
      }

      if (!bridges[id]) {
        bridges[id] = [];
      }

      bridges[id].push(target);
    }
    else {
      bridged = bridges[target.$__id__()];

      if (bridged) {
        for (i = bridged.length - 1; i >= 0; i--) {
          Opal._bridge(bridged[i], donator);
        }

        bridges[donator.$__id__()] = bridged.slice();
      }
    }
  };

  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param klass  [Class] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, klass) {
    var iclass, donator, prototype, methods, id, i;

    // check if this module is already included in the class
    for (i = klass.$$inc.length - 1; i >= 0; i--) {
      if (klass.$$inc[i] === module) {
        return;
      }
    }

    klass.$$inc.push(module);
    module.$$dep.push(klass);
    Opal._bridge(klass, module);

    // iclass
    iclass = {
      $$name:   module.$$name,
      $$proto:  module.$$proto,
      $$parent: klass.$$parent,
      $$module: module,
      $$iclass: true
    };

    klass.$$parent = iclass;

    donator   = module.$$proto;
    prototype = klass.$$proto;
    methods   = module.$instance_methods();

    for (i = methods.length - 1; i >= 0; i--) {
      id = '$' + methods[i];

      // if the target class already has a method of the same name defined
      // and that method was NOT donated, then it must be a method defined
      // by the class so we do not want to override it
      if ( prototype.hasOwnProperty(id) &&
          !prototype[id].$$donated &&
          !prototype[id].$$stub) {
        continue;
      }

      prototype[id] = donator[id];
      prototype[id].$$donated = module;
    }

    Opal.donate_constants(module, klass);
  };

  // Table that holds all methods that have been defined on all objects
  // It is used for defining method stubs for new coming native classes
  Opal.stubs = {};

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for th new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(klass, constructor) {
    if (constructor.$$bridge) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    Opal.stub_subscribers.push(constructor.prototype);

    // Populate constructor with previously stored stubs
    for (var method_name in Opal.stubs) {
      if (!(method_name in constructor.prototype)) {
        constructor.prototype[method_name] = Opal.stub_for(method_name);
      }
    }

    constructor.prototype.$$class = klass;
    constructor.$$bridge          = klass;

    var ancestors = klass.$ancestors();

    // order important here, we have to bridge from the last ancestor to the
    // bridged class
    for (var i = ancestors.length - 1; i >= 0; i--) {
      Opal._bridge(constructor, ancestors[i]);
    }

    for (var name in BasicObject_alloc.prototype) {
      var method = BasicObject_alloc.prototype[method];

      if (method && method.$$stub && !(name in constructor.prototype)) {
        constructor.prototype[name] = method;
      }
    }

    return klass;
  };

  // When a source module is included into the target module, we must also copy
  // its constants to the target.
  //
  Opal.donate_constants = function(source_mod, target_mod) {
    var source_constants = source_mod.$$scope.constants,
        target_scope     = target_mod.$$scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod.$$scope[source_constants[i]];
    }
  };

  // Donate methods for a module.
  Opal.donate = function(module, jsid) {
    var included_in = module.$$dep,
        body = module.$$proto[jsid],
        i, length, includee, dest, current,
        klass_includees, j, jj, current_owner_index, module_index;

    if (!included_in) {
      return;
    }

    for (i = 0, length = included_in.length; i < length; i++) {
      includee = included_in[i];
      dest = includee.$$proto;
      current = dest[jsid];

      if (dest.hasOwnProperty(jsid) && !current.$$donated && !current.$$stub) {
        // target class has already defined the same method name - do nothing
      }
      else if (dest.hasOwnProperty(jsid) && !current.$$stub) {
        // target class includes another module that has defined this method
        klass_includees = includee.$$inc;

        for (j = 0, jj = klass_includees.length; j < jj; j++) {
          if (klass_includees[j] === current.$$donated) {
            current_owner_index = j;
          }
          if (klass_includees[j] === module) {
            module_index = j;
          }
        }

        // only redefine method on class if the module was included AFTER
        // the module which defined the current method body. Also make sure
        // a module can overwrite a method it defined before
        if (current_owner_index <= module_index) {
          dest[jsid] = body;
          dest[jsid].$$donated = module;
        }
      }
      else {
        // neither a class, or module included by class, has defined method
        dest[jsid] = body;
        dest[jsid].$$donated = module;
      }

      if (includee.$$dep) {
        Opal.donate(includee, jsid);
      }
    }
  };

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module_or_class) {
    var parent = module_or_class,
        result = [],
        modules;

    while (parent) {
      result.push(parent);
      for (var i=0; i < parent.$$inc.length; i++) {
        modules = Opal.ancestors(parent.$$inc[i]);

        for(var j = 0; j < modules.length; j++) {
          result.push(modules[j]);
        }
      }

      // only the actual singleton class gets included in its ancestry
      // after that, traverse the normal class hierarchy
      if (parent.$$is_singleton && parent.$$singleton_of.$$is_module) {
        parent = parent.$$singleton_of.$$super;
      }
      else {
        parent = parent.$$is_class ? parent.$$super : null;
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var subscriber, subscribers = Opal.stub_subscribers,
        i, ilength = stubs.length,
        j, jlength = subscribers.length,
        method_name, stub;

    for (i = 0; i < ilength; i++) {
      method_name = stubs[i];
      // Save method name to populate other subscribers with this stub
      Opal.stubs[method_name] = true;
      stub = Opal.stub_for(method_name);

      for (j = 0; j < jlength; j++) {
        subscriber = subscribers[j];

        if (!(method_name in subscriber)) {
          subscriber[method_name] = stub;
        }
      }
    }
  };

  // Keep a list of prototypes that want method_missing stubs to be added.
  //
  // @default [Prototype List] BasicObject_alloc.prototype
  //
  Opal.stub_subscribers = [BasicObject_alloc.prototype];

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    prototype[stub] = method_missing_stub;
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_class || object.$$is_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  }

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, defcheck, defs) {
    var dispatcher;

    if (defs) {
      if (obj.$$is_class || obj.$$is_module) {
        dispatcher = defs.$$super;
      }
      else {
        dispatcher = obj.$$class.$$proto;
      }
    }
    else {
      dispatcher = Opal.find_obj_super_dispatcher(obj, jsid, current_func);
    }

    dispatcher = dispatcher['$' + jsid];

    if (!defcheck && dispatcher.$$stub && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+jsid+"' for "+obj, jsid);
    }

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  Opal.find_obj_super_dispatcher = function(obj, jsid, current_func) {
    var klass = obj.$$meta || obj.$$class;

    // first we need to find the class/module current_func is located on
    klass = Opal.find_owning_class(klass, current_func);

    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    jsid = '$' + jsid;
    return Opal.find_super_func(klass, jsid, current_func);
  };

  Opal.find_owning_class = function(klass, current_func) {
    var owner = current_func.$$owner;

    while (klass) {
      // repeating for readability

      if (klass.$$iclass && klass.$$module === current_func.$$donated) {
        // this klass was the last one the module donated to
        // case is also hit with multiple module includes
        break;
      }
      else if (klass.$$iclass && klass.$$module === owner) {
        // module has donated to other classes but klass isn't one of those
        break;
      }
      else if (owner.$$is_singleton && klass === owner.$$singleton_of.$$class) {
        // cases like stdlib `Singleton::included` that use a singleton of a singleton
        break;
      }
      else if (klass === owner) {
        // no modules, pure class inheritance
        break;
      }

      klass = klass.$$parent;
    }

    return klass;
  };

  Opal.find_super_func = function(owning_klass, jsid, current_func) {
    var klass = owning_klass.$$parent;

    // now we can find the super
    while (klass) {
      var working = klass.$$proto[jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.$$parent;
    }

    return klass.$$proto;
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.$$meta === klass) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$class);

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    ancestors = Opal.ancestors(object.$$meta);

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      Array.prototype.splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  }

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key       = null,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Call a ruby method on a ruby object with some arguments:
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')     # => 4
  //   Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]
  //
  // A missing method will be forwarded to the object via
  // method_missing.
  //
  // The result of either call with be returned.
  //
  // @param recv [Object] the ruby object
  // @param mid  [String] ruby method to call
  // @return [Object] forwards the return value of the method (or of method_missing)
  Opal.send = function(recv, mid) {
    var args_ary = new Array(Math.max(arguments.length - 2, 0));
    for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i + 2]; }

    var func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args_ary);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args_ary));
  };

  Opal.block_send = function(recv, mid, block) {
    var args_ary = new Array(Math.max(arguments.length - 3, 0));
    for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i + 3]; }

    var func = recv['$' + mid];

    if (func) {
      func.$$p = block;
      return func.apply(recv, args_ary);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args_ary));
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.defn = function(obj, jsid, body) {
    obj.$$proto[jsid] = body;
    // for super dispatcher, etc.
    body.$$owner = obj;

    if (obj.$$is_module) {
      Opal.donate(obj, jsid);

      if (obj.$$module_function) {
        Opal.defs(obj, jsid, body);
      }
    }

    if (obj.$__id__ && !obj.$__id__.$$stub) {
      var bridged = bridges[obj.$__id__()];

      if (bridged) {
        for (var i = bridged.length - 1; i >= 0; i--) {
          Opal.bridge_method(bridged[i], obj, jsid, body);
        }
      }
    }

    var singleton_of = obj.$$singleton_of;
    if (obj.$method_added && !obj.$method_added.$$stub && !singleton_of) {
      obj.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }

    return nil;
  };

  // Define a singleton method on the given object.
  Opal.defs = function(obj, jsid, body) {
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  Opal.def = function(obj, jsid, body) {
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    if (!obj.$$eval && (obj.$$is_class || obj.$$is_module)) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    // TODO: remove from bridges as well

    if (!$hasOwn.call(obj.$$proto, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$proto[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_removed && !obj.$$proto.$singleton_method_removed.$$stub) {
        obj.$$proto.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$proto[jsid] || obj.$$proto[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$proto, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$proto.$singleton_method_undefined && !obj.$$proto.$singleton_method_undefined.$$stub) {
        obj.$$proto.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$proto['$' + old];

    // instance_eval is being run on a class/module, so that need to alias class methods
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (typeof(body) !== "function" || body.$$stub) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (typeof(body) !== "function" || body.$$stub) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    Opal.defn(obj, id, body);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$proto[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = {};
    hash.$$map  = {};
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, length = keys.length, key, value; i < length; i++) {
      key = from_hash.$$keys[i];

      if (key.$$is_string) {
        value = from_hash.$$smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash = key.$hash(), bucket, last_bucket;

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if (hash.$$smap.hasOwnProperty(key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash = key.$hash(), bucket;

    if (hash.$$map.hasOwnProperty(key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!hash.$$smap.hasOwnProperty(key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!hash.$$map.hasOwnProperty(key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!hash.$$map.hasOwnProperty(key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash.$$alloc();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if (args.hasOwnProperty(key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // hash2 is a faster creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash.$$alloc();

    hash.$$smap = smap;
    hash.$$map  = {};
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range.$$alloc();
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.'
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        return;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        Opal.LoadError ? Opal.LoadError.$new(message) : function(){throw message}();
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  Opal.boot_class_alloc('BasicObject', BasicObject_alloc);
  Opal.boot_class_alloc('Object',      Object_alloc,       BasicObject_alloc);
  Opal.boot_class_alloc('Module',      Module_alloc,       Object_alloc);
  Opal.boot_class_alloc('Class',       Class_alloc,        Module_alloc);

  // Constructors for *classes* of core objects
  Opal.BasicObject = BasicObject = Opal.setup_class_object('BasicObject', BasicObject_alloc, 'Class',       Class_alloc);
  Opal.Object      = _Object     = Opal.setup_class_object('Object',      Object_alloc,      'BasicObject', BasicObject.constructor);
  Opal.Module      = Module      = Opal.setup_class_object('Module',      Module_alloc,      'Object',      _Object.constructor);
  Opal.Class       = Class       = Opal.setup_class_object('Class',       Class_alloc,       'Module',      Module.constructor);

  Opal.constants.push("BasicObject");
  Opal.constants.push("Object");
  Opal.constants.push("Module");
  Opal.constants.push("Class");

  // Fix booted classes to use their metaclass
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Fix superclasses of booted classes
  BasicObject.$$super = null;
  _Object.$$super     = BasicObject;
  Module.$$super      = _Object;
  Class.$$super       = Module;

  BasicObject.$$parent = null;
  _Object.$$parent     = BasicObject;
  Module.$$parent      = _Object;
  Class.$$parent       = Module;

  Opal.base                = _Object;
  BasicObject.$$scope      = _Object.$$scope = Opal;
  BasicObject.$$orig_scope = _Object.$$orig_scope = Opal;

  Module.$$scope      = _Object.$$scope;
  Module.$$orig_scope = _Object.$$orig_scope;
  Class.$$scope       = _Object.$$scope;
  Class.$$orig_scope  = _Object.$$orig_scope;

  // Forward .toString() to #to_s
  _Object.$$proto.toString = function() {
    return this.$to_s();
  };

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  _Object.$$proto.$require = Opal.require;

  // Instantiate the top object
  Opal.top = new _Object.$$alloc();

  // Nil
  Opal.klass(_Object, _Object, 'NilClass', NilClass_alloc);
  nil = Opal.nil = new NilClass_alloc();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');

  TypeError.$$super = Error;
}).call(this);

if (typeof(global) !== 'undefined') {
  global.Opal = this.Opal;
  Opal.global = global;
}

if (typeof(window) !== 'undefined') {
  window.Opal = this.Opal;
  Opal.global = window;
}
;
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$inspect', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    Opal.defs(self, '$bridge', TMP_1 = function ːbridge(klass, constructor) {
      var self = this;

      return Opal.bridge(klass, constructor);
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$type_error', TMP_2 = function ːtype_error(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil;
      }
      if (coerced == null) {
        coerced = nil;
      }
      if ((($a = (($b = method !== false && method !== nil && method != null) ? coerced : method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('TypeError').$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return $scope.get('TypeError').$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    }, TMP_2.$$arity = -3);

    Opal.defs(self, '$coerce_to', TMP_3 = function ːcoerce_to(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, TMP_3.$$arity = 3);

    Opal.defs(self, '$coerce_to!', TMP_4 = function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_4.$$arity = 3);

    Opal.defs(self, '$coerce_to?', TMP_5 = function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, TMP_5.$$arity = 3);

    Opal.defs(self, '$try_convert', TMP_6 = function ːtry_convert(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    }, TMP_6.$$arity = 3);

    Opal.defs(self, '$compare', TMP_7 = function ːcompare(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, TMP_7.$$arity = 2);

    Opal.defs(self, '$destructure', TMP_8 = function ːdestructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$respond_to?', TMP_9 = function(obj, method) {
      var self = this;

      
      if (obj == null || !obj.$$class) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    }, TMP_9.$$arity = 2);

    Opal.defs(self, '$inspect', TMP_10 = function ːinspect(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj.$$class) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    }, TMP_10.$$arity = 1);

    Opal.defs(self, '$instance_variable_name!', TMP_11 = function(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = /^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, TMP_11.$$arity = 1);

    Opal.defs(self, '$const_name!', TMP_12 = function(const_name) {
      var $a, self = this;

      const_name = $scope.get('Opal')['$coerce_to!'](const_name, $scope.get('String'), "to_str");
      if ((($a = const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'), "wrong constant name " + (const_name))};
      return const_name;
    }, TMP_12.$$arity = 1);

    Opal.defs(self, '$pristine', TMP_13 = function ːpristine(owner_class, $a_rest) {
      var self = this, method_names;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      method_names = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        method_names[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      var method_name;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        owner_class.$$proto['$'+method_name].$$pristine = true
      }
    
      return nil;
    }, TMP_13.$$arity = -2);
  })($scope.base)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$coerce_to!', '$new', '$const_name!', '$=~', '$inject', '$const_get', '$split', '$const_missing', '$==', '$!', '$start_with?', '$to_proc', '$lambda', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$to_s', '$__id__', '$constants', '$include?']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49;

    Opal.defs(self, '$allocate', TMP_1 = function ːallocate() {
      var self = this;

      
      var module;

      module = Opal.module_allocate(self);
      Opal.create_scope(Opal.Module.$$scope, module, null);
      return module;
    
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize() {
      var self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      return Opal.module_initialize(self, block);
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$===', TMP_3 = function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return Opal.is_a(object, self);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$<', TMP_4 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<=', TMP_5 = function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil && $a != null) ? $a : $rb_lt(self, other));
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$>', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$>=', TMP_7 = function(other) {
      var $a, self = this;

      return ((($a = self['$equal?'](other)) !== false && $a !== nil && $a != null) ? $a : $rb_gt(self, other));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this, lt = nil;

      
      if (self === other) {
        return 0;
      }
    
      if ((($a = $scope.get('Module')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ((($a = lt['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if (lt !== false && lt !== nil && lt != null) {
        return -1
        } else {
        return 1
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$alias_method', TMP_9 = function ːalias_method(newname, oldname) {
      var self = this;

      Opal.alias(self, newname, oldname);
      return self;
    }, TMP_9.$$arity = 2);

    Opal.defn(self, '$alias_native', TMP_10 = function ːalias_native(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid;
      }
      Opal.alias_native(self, mid, jsid);
      return self;
    }, TMP_10.$$arity = -2);

    Opal.defn(self, '$ancestors', TMP_11 = function ːancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$append_features', TMP_12 = function ːappend_features(klass) {
      var self = this;

      Opal.append_features(self, klass);
      return self;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$attr_accessor', TMP_13 = function ːattr_accessor($a_rest) {
      var $b, $c, self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      ($b = self).$attr_reader.apply($b, Opal.to_a(names));
      return ($c = self).$attr_writer.apply($c, Opal.to_a(names));
    }, TMP_13.$$arity = -1);

    Opal.alias(self, 'attr', 'attr_accessor');

    Opal.defn(self, '$attr_reader', TMP_14 = function ːattr_reader($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        proto[ivar] = nil;

        body.$$parameters = [];
        body.$$arity = 0;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$attr_writer', TMP_15 = function ːattr_writer($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var proto = self.$$proto;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        proto[ivar] = nil;

        if (self.$$is_singleton) {
          proto.constructor.prototype[id] = body;
        }
        else {
          Opal.defn(self, id, body);
        }
      }
    
      return nil;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$autoload', TMP_16 = function ːautoload(const$, path) {
      var self = this;

      
      var autoloaders;

      if (!(autoloaders = self.$$autoload)) {
        autoloaders = self.$$autoload = {};
      }

      autoloaders[const$] = path;
      return nil;
    ;
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$class_variable_get', TMP_17 = function ːclass_variable_get(name) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("class vars should start with @@", name))};
      
      var value = Opal.cvars[name.slice(2)];
      (function() {if ((($a = value == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('NameError').$new("uninitialized class variable @@a in", name))
        } else {
        return nil
      }; return nil; })()
      return value;
    
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$class_variable_set', TMP_18 = function ːclass_variable_set(name, value) {
      var $a, self = this;

      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      if ((($a = name.length < 3 || name.slice(0,2) !== '@@') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError'))};
      
      Opal.cvars[name.slice(2)] = value;
      return value;
    
    }, TMP_18.$$arity = 2);

    Opal.defn(self, '$constants', TMP_19 = function ːconstants() {
      var self = this;

      return self.$$scope.constants.slice(0);
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$const_defined?', TMP_20 = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true;
      }
      name = $scope.get('Opal')['$const_name!'](name);
      if ((($a = name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self === Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    }, TMP_20.$$arity = -2);

    Opal.defn(self, '$const_get', TMP_22 = function ːconst_get(name, inherit) {
      var $a, $b, TMP_21, self = this;

      if (inherit == null) {
        inherit = true;
      }
      name = $scope.get('Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    
      if ((($a = name.indexOf('::') != -1 && name != '::') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = name.$split("::")).$inject, $a.$$p = (TMP_21 = function(o, c){var self = TMP_21.$$s || this;
if (o == null) o = nil;if (c == null) c = nil;
        return o.$const_get(c)}, TMP_21.$$s = self, TMP_21.$$arity = 2, TMP_21), $a).call($b, self)};
      if ((($a = name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))
      };
      
      var scopes = [self.$$scope];

      if (inherit || self == Opal.Object) {
        var parent = self.$$super;

        while (parent !== Opal.BasicObject) {
          scopes.push(parent.$$scope);

          parent = parent.$$super;
        }
      }

      for (var i = 0, length = scopes.length; i < length; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    }, TMP_22.$$arity = -2);

    Opal.defn(self, '$const_missing', TMP_23 = function ːconst_missing(name) {
      var self = this, full_const_name = nil;

      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    
      full_const_name = (function() {if (self['$==']($scope.get('Object'))) {
        return name
        } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise($scope.get('NameError').$new("uninitialized constant " + (full_const_name), name));
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$const_set', TMP_24 = function ːconst_set(name, value) {
      var $a, $b, self = this;

      name = $scope.get('Opal')['$const_name!'](name);
      if ((($a = ((($b = (name['$=~']((($scope.get('Opal')).$$scope.get('CONST_NAME_REGEXP'))))['$!']()) !== false && $b !== nil && $b != null) ? $b : name['$start_with?']("::"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('NameError').$new("wrong constant name " + (name), name))};
      Opal.casgn(self, name, value);
      return value;
    }, TMP_24.$$arity = 2);

    Opal.defn(self, '$define_method', TMP_25 = function ːdefine_method(name, method) {
      var $a, $b, $c, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil, $case = nil;

      TMP_25.$$p = null;
      if ((($a = method === undefined && block === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")};
      ((($a = block) !== false && $a !== nil && $a != null) ? $a : block = (function() {$case = method;if ($scope.get('Proc')['$===']($case)) {return method}else if ($scope.get('Method')['$===']($case)) {return method.$to_proc().$$unbound;}else if ($scope.get('UnboundMethod')['$===']($case)) {return ($b = ($c = self).$lambda, $b.$$p = (TMP_26 = function($d_rest){var self = TMP_26.$$s || this, args, $e, bound = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      bound = method.$bind(self);
        return ($e = bound).$call.apply($e, Opal.to_a(args));}, TMP_26.$$s = self, TMP_26.$$arity = -1, TMP_26), $b).call($c)}else {return self.$raise($scope.get('TypeError'), "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    
    }, TMP_25.$$arity = -2);

    Opal.defn(self, '$remove_method', TMP_27 = function ːremove_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    
      return self;
    }, TMP_27.$$arity = -1);

    Opal.defn(self, '$singleton_class?', TMP_28 = function() {
      var self = this;

      return !!self.$$is_singleton;
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$include', TMP_29 = function ːinclude($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$included_modules', TMP_30 = function ːincluded_modules() {
      var self = this;

      
      var results;

      var module_chain = function(klass) {
        var included = [];

        for (var i = 0; i != klass.$$inc.length; i++) {
          var mod_or_class = klass.$$inc[i];
          included.push(mod_or_class);
          included = included.concat(module_chain(mod_or_class));
        }

        return included;
      };

      results = module_chain(self);

      // need superclass's modules
      if (self.$$is_class) {
          for (var cls = self; cls; cls = cls.$$super) {
            results = results.concat(module_chain(cls));
          }
      }

      return results;
    
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$include?', TMP_31 = function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.$$super) {
        for (var i = 0; i != cls.$$inc.length; i++) {
          var mod2 = cls.$$inc[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    }, TMP_31.$$arity = 1);

    Opal.defn(self, '$instance_method', TMP_32 = function ːinstance_method(name) {
      var self = this;

      
      var meth = self.$$proto['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $scope.get('UnboundMethod').$new(self, meth, name);
    
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$instance_methods', TMP_33 = function ːinstance_methods(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = true;
      }
      
      var methods = [],
          proto   = self.$$proto;

      for (var prop in proto) {
        if (prop.charAt(0) !== '$') {
          continue;
        }

        if (typeof(proto[prop]) !== "function") {
          continue;
        }

        if (proto[prop].$$stub) {
          continue;
        }

        if (!self.$$is_module) {
          if (self !== Opal.BasicObject && proto[prop] === Opal.BasicObject.$$proto[prop]) {
            continue;
          }

          if (!include_super && !proto.hasOwnProperty(prop)) {
            continue;
          }

          if (!include_super && proto[prop].$$donated) {
            continue;
          }
        }

        methods.push(prop.substr(1));
      }

      return methods;
    
    }, TMP_33.$$arity = -1);

    Opal.defn(self, '$included', TMP_34 = function ːincluded(mod) {
      var self = this;

      return nil;
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$extended', TMP_35 = function ːextended(mod) {
      var self = this;

      return nil;
    }, TMP_35.$$arity = 1);

    Opal.defn(self, '$method_added', TMP_36 = function ːmethod_added($a_rest) {
      var self = this;

      return nil;
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$method_removed', TMP_37 = function ːmethod_removed($a_rest) {
      var self = this;

      return nil;
    }, TMP_37.$$arity = -1);

    Opal.defn(self, '$method_undefined', TMP_38 = function ːmethod_undefined($a_rest) {
      var self = this;

      return nil;
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$module_eval', TMP_39 = function ːmodule_eval($a_rest) {
      var $b, $c, TMP_40, self = this, args, $iter = TMP_39.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_39.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?!!Opal.compile : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = Opal.to_a(args), string = ($b[0] == null ? nil : $b[0]), file = ($b[1] == null ? nil : $b[1]), _lineno = ($b[2] == null ? nil : $b[2]), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": (((($b = file) !== false && $b !== nil && $b != null) ? $b : "(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $scope.get('Opal').$compile(string, compiling_options);
        block = ($b = ($c = $scope.get('Kernel')).$proc, $b.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $b).call($c);
      } else if ((($b = $rb_gt(args.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    
    }, TMP_39.$$arity = -1);

    Opal.alias(self, 'class_eval', 'module_eval');

    Opal.defn(self, '$module_exec', TMP_41 = function ːmodule_exec($a_rest) {
      var self = this, args, $iter = TMP_41.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_41.$$p = null;
      
      if (block === nil) {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, TMP_41.$$arity = -1);

    Opal.alias(self, 'class_exec', 'module_exec');

    Opal.defn(self, '$method_defined?', TMP_42 = function(method) {
      var self = this;

      
      var body = self.$$proto['$' + method];
      return (!!body) && !body.$$stub;
    
    }, TMP_42.$$arity = 1);

    Opal.defn(self, '$module_function', TMP_43 = function ːmodule_function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$proto[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    
    }, TMP_43.$$arity = -1);

    Opal.defn(self, '$name', TMP_44 = function ːname() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base.$$name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$remove_class_variable', TMP_45 = function ːremove_class_variable($a_rest) {
      var self = this;

      return nil;
    }, TMP_45.$$arity = -1);

    Opal.defn(self, '$remove_const', TMP_46 = function ːremove_const(name) {
      var self = this;

      
      var old = self.$$scope[name];
      delete self.$$scope[name];
      return old;
    
    }, TMP_46.$$arity = 1);

    Opal.defn(self, '$to_s', TMP_47 = function ːto_s() {
      var $a, self = this;

      return ((($a = Opal.Module.$name.call(self)) !== false && $a !== nil && $a != null) ? $a : "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">");
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$undef_method', TMP_48 = function ːundef_method($a_rest) {
      var self = this, names;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      names = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        names[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    
      return self;
    }, TMP_48.$$arity = -1);

    return (Opal.defn(self, '$instance_variables', TMP_49 = function ːinstance_variables() {
      var self = this, consts = nil;

      consts = self.$constants();
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    
    }, TMP_49.$$arity = 0), nil) && 'instance_variables';
  })($scope.base, null)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$allocate', '$name', '$to_s']);
  self.$require("corelib/module");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    Opal.defs(self, '$new', TMP_1 = function(superclass) {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      if (superclass == null) {
        superclass = $scope.get('Object');
      }
      TMP_1.$$p = null;
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var alloc = Opal.boot_class_alloc(null, function(){}, superclass)
      var klass = Opal.setup_class_object(null, alloc, superclass.$$name, superclass.constructor);

      klass.$$super = superclass;
      klass.$$parent = superclass;

      // inherit scope from parent
      Opal.create_scope(superclass.$$scope, klass);

      superclass.$inherited(klass);
      Opal.module_initialize(klass, block);

      return klass;
    
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$allocate', TMP_2 = function ːallocate() {
      var self = this;

      
      var obj = new self.$$alloc();
      obj.$$id = Opal.uid();
      return obj;
    
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$inherited', TMP_3 = function ːinherited(cls) {
      var self = this;

      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$new', TMP_4 = function($a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var obj = self.$allocate();

      obj.$initialize.$$p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$superclass', TMP_5 = function ːsuperclass() {
      var self = this;

      return self.$$super || nil;
    }, TMP_5.$$arity = 0);

    return (Opal.defn(self, '$to_s', TMP_6 = function ːto_s() {
      var $a, $b, self = this, $iter = TMP_6.$$p, $yield = $iter || nil;

      TMP_6.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_class || singleton_of.$$is_module)) {
        return "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((singleton_of.$$id).$to_s(16)) + ">>";
      }
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'to_s', TMP_6, false)), $a.$$p = null, $a).call($b);
    
    }, TMP_6.$$arity = 0), nil) && 'to_s';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$>', '$new', '$inspect']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize($a_rest) {
      var self = this;

      return nil;
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      return self === other;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_3 = function(other) {
      var self = this;

      return self['$=='](other);
    }, TMP_3.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$__id__', TMP_4 = function ː__id__() {
      var self = this;

      return self.$$id || (self.$$id = Opal.uid());
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$__send__', TMP_5 = function ː__send__(symbol, $a_rest) {
      var self = this, args, $iter = TMP_5.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_5.$$p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    }, TMP_5.$$arity = -2);

    Opal.defn(self, '$!', TMP_6 = function() {
      var self = this;

      return false;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$!=', TMP_7 = function(other) {
      var self = this;

      return (self['$=='](other))['$!']();
    }, TMP_7.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.defn(self, '$instance_eval', TMP_8 = function ːinstance_eval($a_rest) {
      var $b, $c, TMP_9, self = this, args, $iter = TMP_8.$$p, block = $iter || nil, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_8.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?!!Opal.compile : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = ($range(1, 3, false))['$cover?'](args.$size())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = Opal.to_a(args), string = ($b[0] == null ? nil : $b[0]), file = ($b[1] == null ? nil : $b[1]), _lineno = ($b[2] == null ? nil : $b[2]), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": (((($b = file) !== false && $b !== nil && $b != null) ? $b : "(eval)")), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $scope.get('Opal').$compile(string, compiling_options);
        block = ($b = ($c = $scope.get('Kernel')).$proc, $b.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $b).call($c);
      } else if ((($b = $rb_gt(args.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$instance_exec', TMP_10 = function ːinstance_exec($a_rest) {
      var self = this, args, $iter = TMP_10.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_10.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_class || self.$$is_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$singleton_method_added', TMP_11 = function ːsingleton_method_added($a_rest) {
      var self = this;

      return nil;
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$singleton_method_removed', TMP_12 = function ːsingleton_method_removed($a_rest) {
      var self = this;

      return nil;
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$singleton_method_undefined', TMP_13 = function ːsingleton_method_undefined($a_rest) {
      var self = this;

      return nil;
    }, TMP_13.$$arity = -1);

    return (Opal.defn(self, '$method_missing', TMP_14 = function ːmethod_missing(symbol, $a_rest) {
      var $b, self = this, args, $iter = TMP_14.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_14.$$p = null;
      return $scope.get('Kernel').$raise($scope.get('NoMethodError').$new((function() {if ((($b = self.$inspect && !self.$inspect.$$stub) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
        } else {
        return "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })(), symbol));
    }, TMP_14.$$arity = -2), nil) && 'method_missing';
  })($scope.base, null)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $gvars = Opal.gvars, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$to_proc', '$singleton_class', '$initialize_dup', '$for', '$>', '$size', '$pop', '$call', '$append_features', '$extended', '$length', '$respond_to?', '$[]', '$nil?', '$to_a', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$to_s', '$__id__', '$instance_variable_name!', '$coerce_to!', '$===', '$enum_for', '$print', '$format', '$puts', '$each', '$<=', '$empty?', '$exception', '$kind_of?', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$sym', '$arg', '$open', '$include']);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_61, TMP_62, TMP_63;

    Opal.defn(self, '$method_missing', TMP_1 = function ːmethod_missing(symbol, $a_rest) {
      var self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      return self.$raise($scope.get('NoMethodError').$new("undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$=~', TMP_2 = function(obj) {
      var self = this;

      return false;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$!~', TMP_3 = function(obj) {
      var self = this;

      return (self['$=~'](obj))['$!']();
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$===', TMP_4 = function(other) {
      var $a, self = this;

      return ((($a = self.$object_id()['$=='](other.$object_id())) !== false && $a !== nil && $a != null) ? $a : self['$=='](other));
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$method', TMP_6 = function ːmethod(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $scope.get('Method').$new(self, meth, name);
    
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$methods', TMP_7 = function ːmethods(all) {
      var self = this;

      if (all == null) {
        all = true;
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!Opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].$$stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    }, TMP_7.$$arity = -1);

    Opal.alias(self, 'public_methods', 'methods');

    Opal.defn(self, '$Array', TMP_8 = function ːArray(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $scope.get('Opal')['$coerce_to?'](object, $scope.get('Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$at_exit', TMP_9 = function ːat_exit() {
      var $a, self = this, $iter = TMP_9.$$p, block = $iter || nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      TMP_9.$$p = null;
      ((($a = $gvars.__at_exit__) !== false && $a !== nil && $a != null) ? $a : $gvars.__at_exit__ = []);
      return $gvars.__at_exit__['$<<'](block);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$caller', TMP_10 = function ːcaller() {
      var self = this;

      return [];
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$class', TMP_11 = function() {
      var self = this;

      return self.$$class;
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$copy_instance_variables', TMP_12 = function ːcopy_instance_variables(other) {
      var self = this;

      
      for (var name in other) {
        if (other.hasOwnProperty(name) && name.charAt(0) !== '$') {
          self[name] = other[name];
        }
      }
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$copy_singleton_methods', TMP_13 = function ːcopy_singleton_methods(other) {
      var self = this;

      
      var name;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class_proto = Opal.get_singleton_class(other).$$proto;
        var self_singleton_class_proto = Opal.get_singleton_class(self).$$proto;

        for (name in other_singleton_class_proto) {
          if (name.charAt(0) === '$' && other_singleton_class_proto.hasOwnProperty(name)) {
            self_singleton_class_proto[name] = other_singleton_class_proto[name];
          }
        }
      }

      for (name in other) {
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$clone', TMP_14 = function ːclone() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$initialize_clone', TMP_15 = function ːinitialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$define_singleton_method', TMP_16 = function ːdefine_singleton_method(name, method) {
      var $a, $b, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      return ($a = ($b = self.$singleton_class()).$define_method, $a.$$p = block.$to_proc(), $a).call($b, name, method);
    }, TMP_16.$$arity = -2);

    Opal.defn(self, '$dup', TMP_17 = function ːdup() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$initialize_dup', TMP_18 = function ːinitialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$enum_for', TMP_19 = function ːenum_for(method, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_19.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_19.$$p = null;
      return ($b = ($c = $scope.get('Enumerator')).$for, $b.$$p = block.$to_proc(), $b).apply($c, [self, method].concat(Opal.to_a(args)));
    }, TMP_19.$$arity = -1);

    Opal.alias(self, 'to_enum', 'enum_for');

    Opal.defn(self, '$equal?', TMP_20 = function(other) {
      var self = this;

      return self === other;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$exit', TMP_21 = function ːexit(status) {
      var $a, $b, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if (status == null) {
        status = true;
      }
      ((($a = $gvars.__at_exit__) !== false && $a !== nil && $a != null) ? $a : $gvars.__at_exit__ = []);
      while ((($b = $rb_gt($gvars.__at_exit__.$size(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
      block = $gvars.__at_exit__.$pop();
      block.$call();};
      if ((($a = status === true) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        status = 0};
      Opal.exit(status);
      return nil;
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$extend', TMP_22 = function ːextend($a_rest) {
      var self = this, mods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      mods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        mods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    }, TMP_22.$$arity = -1);

    Opal.defn(self, '$format', TMP_23 = function ːformat(format_string, $a_rest) {
      var $b, $c, self = this, args, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ((($b = (($c = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        ary = $scope.get('Opal')['$coerce_to?'](args['$[]'](0), $scope.get('Array'), "to_ary");
        if ((($b = ary['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($scope.get('ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($scope.get('ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($scope.get('ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($scope.get('ArgumentError'), "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($scope.get('ArgumentError'), "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($scope.get('ArgumentError'), "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($scope.get('ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($scope.get('ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($scope.get('ArgumentError'), "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($scope.get('ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($scope.get('ArgumentError'), "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($scope.get('ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($scope.get('ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($scope.get('NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($scope.get('Opal').$coerce_to(arg, $scope.get('Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise($scope.get('ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($scope.get('ArgumentError'), "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($scope.get('ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($scope.get('ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, TMP_23.$$arity = -2);

    Opal.defn(self, '$hash', TMP_24 = function ːhash() {
      var self = this;

      return self.$__id__();
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$initialize_copy', TMP_25 = function ːinitialize_copy(other) {
      var self = this;

      return nil;
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$inspect', TMP_26 = function ːinspect() {
      var self = this;

      return self.$to_s();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$instance_of?', TMP_27 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return self.$$class === klass;
    ;
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$instance_variable_defined?', TMP_28 = function(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$instance_variable_get', TMP_29 = function ːinstance_variable_get(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$instance_variable_set', TMP_30 = function ːinstance_variable_set(name, value) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;
    }, TMP_30.$$arity = 2);

    Opal.defn(self, '$remove_instance_variable', TMP_31 = function ːremove_instance_variable(name) {
      var self = this;

      name = $scope.get('Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    
      return self.$raise($scope.get('NameError'), "instance variable " + (name) + " not defined");
    }, TMP_31.$$arity = 1);

    Opal.defn(self, '$instance_variables', TMP_32 = function ːinstance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$Integer', TMP_33 = function ːInteger(value, base) {
      var self = this;

      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($scope.get('ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($scope.get('TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($scope.get('FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Integer'), "to_i");
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($scope.get('ArgumentError'), "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($scope.get('ArgumentError'), "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$Float', TMP_34 = function ːFloat(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($scope.get('TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($scope.get('ArgumentError'), "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $scope.get('Opal')['$coerce_to!'](value, $scope.get('Float'), "to_f");
    
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$Hash', TMP_35 = function ːHash(arg) {
      var $a, $b, self = this;

      if ((($a = ((($b = arg['$nil?']()) !== false && $b !== nil && $b != null) ? $b : arg['$==']([]))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $hash2([], {})};
      if ((($a = $scope.get('Hash')['$==='](arg)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return arg};
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('Hash'), "to_hash");
    }, TMP_35.$$arity = 1);

    Opal.defn(self, '$is_a?', TMP_36 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($scope.get('TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    ;
    }, TMP_36.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$lambda', TMP_37 = function ːlambda() {
      var self = this, $iter = TMP_37.$$p, block = $iter || nil;

      TMP_37.$$p = null;
      block.$$is_lambda = true;
      return block;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$load', TMP_38 = function ːload(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.load(file);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$loop', TMP_39 = function ːloop() {
      var self = this, $iter = TMP_39.$$p, $yield = $iter || nil;

      TMP_39.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("loop")
      };
      
      while (true) {
        Opal.yieldX($yield, [])
      }
    ;
      return self;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$nil?', TMP_40 = function() {
      var self = this;

      return false;
    }, TMP_40.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$printf', TMP_41 = function ːprintf($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$print(($b = self).$format.apply($b, Opal.to_a(args)))};
      return nil;
    }, TMP_41.$$arity = -1);

    Opal.defn(self, '$proc', TMP_42 = function ːproc() {
      var self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$puts', TMP_43 = function ːputs($a_rest) {
      var $b, self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = $gvars.stdout).$puts.apply($b, Opal.to_a(strs));
    }, TMP_43.$$arity = -1);

    Opal.defn(self, '$p', TMP_45 = function ːp($a_rest) {
      var $b, $c, TMP_44, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      ($b = ($c = args).$each, $b.$$p = (TMP_44 = function(obj){var self = TMP_44.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $b).call($c);
      if ((($b = $rb_le(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return args['$[]'](0)
        } else {
        return args
      };
    }, TMP_45.$$arity = -1);

    Opal.defn(self, '$print', TMP_46 = function ːprint($a_rest) {
      var $b, self = this, strs;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = $gvars.stdout).$print.apply($b, Opal.to_a(strs));
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$warn', TMP_47 = function ːwarn($a_rest) {
      var $b, $c, self = this, strs;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      strs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        strs[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = ((($c = $gvars.VERBOSE['$nil?']()) !== false && $c !== nil && $c != null) ? $c : strs['$empty?']())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return nil
        } else {
        return ($b = $gvars.stderr).$puts.apply($b, Opal.to_a(strs))
      };
    }, TMP_47.$$arity = -1);

    Opal.defn(self, '$raise', TMP_48 = function ːraise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      if (string == null) {
        string = nil;
      }
      if (_backtrace == null) {
        _backtrace = nil;
      }
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $scope.get('RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $scope.get('RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$kind_of?']($scope.get('Exception'))) {
        // exception is fine
      }
      else {
        exception = $scope.get('TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    }, TMP_48.$$arity = -1);

    Opal.alias(self, 'fail', 'raise');

    Opal.defn(self, '$rand', TMP_49 = function ːrand(max) {
      var self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max.$$is_range) {
        var min = max.begin, range = max.end - min;
        if(!max.exclude) range++;

        return self.$rand(range) + min;
      }
      else {
        return Math.floor(Math.random() *
          Math.abs($scope.get('Opal').$coerce_to(max, $scope.get('Integer'), "to_int")));
      }
    
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$respond_to?', TMP_50 = function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false;
      }
      if ((($a = self['$respond_to_missing?'](name, include_all)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    
      return false;
    }, TMP_50.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_51 = function(method_name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return false;
    }, TMP_51.$$arity = -2);

    Opal.defn(self, '$require', TMP_52 = function ːrequire(file) {
      var self = this;

      file = $scope.get('Opal')['$coerce_to!'](file, $scope.get('String'), "to_str");
      return Opal.require(file);
    }, TMP_52.$$arity = 1);

    Opal.defn(self, '$require_relative', TMP_53 = function ːrequire_relative(file) {
      var self = this;

      $scope.get('Opal')['$try_convert!'](file, $scope.get('String'), "to_str");
      file = $scope.get('File').$expand_path($scope.get('File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, TMP_53.$$arity = 1);

    Opal.defn(self, '$require_tree', TMP_54 = function ːrequire_tree(path) {
      var self = this;

      path = $scope.get('File').$expand_path(path);
      if (path['$=='](".")) {
        path = ""};
      
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          Opal.require(name);
        }
      }
    ;
      return nil;
    }, TMP_54.$$arity = 1);

    Opal.alias(self, 'send', '__send__');

    Opal.alias(self, 'public_send', '__send__');

    Opal.defn(self, '$singleton_class', TMP_55 = function ːsingleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, TMP_55.$$arity = 0);

    Opal.defn(self, '$sleep', TMP_56 = function ːsleep(seconds) {
      var self = this;

      if (seconds == null) {
        seconds = nil;
      }
      
      if (seconds === nil) {
        self.$raise($scope.get('TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($scope.get('TypeError'), "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($scope.get('ArgumentError'), "time interval must be positive")
      }
      var t = new Date();
      while (new Date() - t <= seconds * 1000);
      return seconds;
    ;
    }, TMP_56.$$arity = -1);

    Opal.alias(self, 'sprintf', 'format');

    Opal.alias(self, 'srand', 'rand');

    Opal.defn(self, '$String', TMP_57 = function ːString(str) {
      var $a, self = this;

      return ((($a = $scope.get('Opal')['$coerce_to?'](str, $scope.get('String'), "to_str")) !== false && $a !== nil && $a != null) ? $a : $scope.get('Opal')['$coerce_to!'](str, $scope.get('String'), "to_s"));
    }, TMP_57.$$arity = 1);

    Opal.defn(self, '$tap', TMP_58 = function ːtap() {
      var self = this, $iter = TMP_58.$$p, block = $iter || nil;

      TMP_58.$$p = null;
      Opal.yield1(block, self);
      return self;
    }, TMP_58.$$arity = 0);

    Opal.defn(self, '$to_proc', TMP_59 = function ːto_proc() {
      var self = this;

      return self;
    }, TMP_59.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_60 = function ːto_s() {
      var self = this;

      return "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">";
    }, TMP_60.$$arity = 0);

    Opal.defn(self, '$catch', TMP_61 = function(sym) {
      var self = this, $iter = TMP_61.$$p, $yield = $iter || nil, e = nil;

      TMP_61.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('UncaughtThrowError')])) {e = $err;
          try {
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_61.$$arity = 1);

    Opal.defn(self, '$throw', TMP_62 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$raise($scope.get('UncaughtThrowError').$new(args));
    }, TMP_62.$$arity = -1);

    Opal.defn(self, '$open', TMP_63 = function ːopen($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_63.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_63.$$p = null;
      return ($b = ($c = $scope.get('File')).$open, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_63.$$arity = -1);
  })($scope.base);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return self.$include($scope.get('Kernel'))
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

    def.message = nil;
    Opal.defs(self, '$new', TMP_1 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var message = (args.length > 0) ? args[0] : nil;
      var err = new self.$$alloc(message);

      if (Error.captureStackTrace) {
        Error.captureStackTrace(err);
      }

      err.name = self.$$name;
      err.$initialize.apply(err, args);
      return err;
    
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$exception', TMP_2 = function ːexception($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self).$new.apply($b, Opal.to_a(args));
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.message = (args.length > 0) ? args[0] : nil;
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$backtrace', TMP_4 = function ːbacktrace() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$exception', TMP_5 = function ːexception(str) {
      var self = this;

      if (str == null) {
        str = nil;
      }
      
      if (str === nil || self === str) {
        return self;
      }
      
      var cloned = self.$clone();
      cloned.message = str;
      return cloned;
    
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$message', TMP_6 = function ːmessage() {
      var self = this;

      return self.$to_s();
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
      var $a, self = this, as_str = nil;

      as_str = self.$to_s();
      if ((($a = as_str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$class().$to_s()
        } else {
        return "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, TMP_7.$$arity = 0);

    return (Opal.defn(self, '$to_s', TMP_8 = function ːto_s() {
      var $a, $b, self = this;

      return ((($a = (($b = self.message, $b !== false && $b !== nil && $b != null ?self.message.$to_s() : $b))) !== false && $a !== nil && $a != null) ? $a : self.$class().$to_s());
    }, TMP_8.$$arity = 0), nil) && 'to_s';
  })($scope.base, Error);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('ScriptError'));
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $NoMemoryError(){};
    var self = $NoMemoryError = $klass($base, $super, 'NoMemoryError', $NoMemoryError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SignalException(){};
    var self = $SignalException = $klass($base, $super, 'SignalException', $SignalException);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $Interrupt(){};
    var self = $Interrupt = $klass($base, $super, 'Interrupt', $Interrupt);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $SecurityError(){};
    var self = $SecurityError = $klass($base, $super, 'SecurityError', $SecurityError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('Exception'));
  (function($base, $super) {
    function $ZeroDivisionError(){};
    var self = $ZeroDivisionError = $klass($base, $super, 'ZeroDivisionError', $ZeroDivisionError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('NameError'));
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('IndexError'));
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('RangeError'));
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base) {
    var $Errno, self = $Errno = $module($base, 'Errno');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self.$$proto, $scope = self.$$scope, TMP_9;

      return (Opal.defs(self, '$new', TMP_9 = function() {
        var $a, $b, self = this, $iter = TMP_9.$$p, $yield = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'new', TMP_9, false, $EINVAL)), $a.$$p = null, $a).call($b, "Invalid argument");
      }, TMP_9.$$arity = 0), nil) && 'new'
    })($scope.base, $scope.get('SystemCallError'))
  })($scope.base);
  (function($base, $super) {
    function $UncaughtThrowError(){};
    var self = $UncaughtThrowError = $klass($base, $super, 'UncaughtThrowError', $UncaughtThrowError);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    def.sym = nil;
    self.$attr_reader("sym", "arg");

    return (Opal.defn(self, '$initialize', TMP_10 = function ːinitialize(args) {
      var $a, $b, self = this, $iter = TMP_10.$$p, $yield = $iter || nil;

      TMP_10.$$p = null;
      self.sym = args['$[]'](0);
      if ((($a = $rb_gt(args.$length(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.arg = args['$[]'](1)};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_10, false)), $a.$$p = null, $a).call($b, "uncaught throw " + (self.sym.$inspect()));
    }, TMP_10.$$arity = 1), nil) && 'initialize';
  })($scope.base, $scope.get('ArgumentError'));
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    self.$attr_reader("name");

    return (Opal.defn(self, '$initialize', TMP_11 = function ːinitialize(message, name) {
      var $a, $b, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      TMP_11.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_11, false)), $a.$$p = null, $a).call($b, message);
      return self.name = name;
    }, TMP_11.$$arity = -2), nil) && 'initialize';
  })($scope.base, null);
  return (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    self.$attr_reader("args");

    return (Opal.defn(self, '$initialize', TMP_12 = function ːinitialize(message, name, args) {
      var $a, $b, self = this, $iter = TMP_12.$$p, $yield = $iter || nil;

      if (name == null) {
        name = nil;
      }
      if (args == null) {
        args = [];
      }
      TMP_12.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_12, false)), $a.$$p = null, $a).call($b, message, name);
      return self.args = args;
    }, TMP_12.$$arity = -2), nil) && 'initialize';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  Opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  Opal.cdecl($scope, 'RUBY_VERSION', "2.2.5");
  Opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.10.2");
  Opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2016-09-09");
  Opal.cdecl($scope, 'RUBY_PATCHLEVEL', 0);
  Opal.cdecl($scope, 'RUBY_REVISION', 0);
  Opal.cdecl($scope, 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2015 Adam Beynon");
  return Opal.cdecl($scope, 'RUBY_DESCRIPTION', "opal " + ($scope.get('RUBY_ENGINE_VERSION')) + " (" + ($scope.get('RUBY_RELEASE_DATE')) + " revision " + ($scope.get('RUBY_REVISION')) + ")");
};
/* Generated by Opal 0.10.2 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class', '$new', '$>', '$length', '$Rational']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    def.$$meta = self;

    Opal.defn(self, '$!', TMP_1 = function() {
      var self = this;

      return true;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$&', TMP_2 = function(other) {
      var self = this;

      return false;
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$|', TMP_3 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$^', TMP_4 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var self = this;

      return other === nil;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$dup', TMP_6 = function ːdup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$clone', TMP_7 = function ːclone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_8 = function ːinspect() {
      var self = this;

      return "nil";
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$nil?', TMP_9 = function() {
      var self = this;

      return true;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$singleton_class', TMP_10 = function ːsingleton_class() {
      var self = this;

      return $scope.get('NilClass');
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_11 = function ːto_a() {
      var self = this;

      return [];
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$to_h', TMP_12 = function ːto_h() {
      var self = this;

      return Opal.hash();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_13 = function ːto_i() {
      var self = this;

      return 0;
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'to_f', 'to_i');

    Opal.defn(self, '$to_s', TMP_14 = function ːto_s() {
      var self = this;

      return "";
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$to_c', TMP_15 = function ːto_c() {
      var self = this;

      return $scope.get('Complex').$new(0, 0);
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$rationalize', TMP_16 = function ːrationalize($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'))};
      return self.$Rational(0, 1);
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$to_r', TMP_17 = function ːto_r() {
      var self = this;

      return self.$Rational(0, 1);
    }, TMP_17.$$arity = 0);

    return (Opal.defn(self, '$instance_variables', TMP_18 = function ːinstance_variables() {
      var self = this;

      return [];
    }, TMP_18.$$arity = 0), nil) && 'instance_variables';
  })($scope.base, null);
  return Opal.cdecl($scope, 'NIL', nil);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$class']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    def.$$is_boolean = true;

    def.$$meta = self;

    Opal.defn(self, '$__id__', TMP_1 = function ː__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$!', TMP_2 = function() {
      var self = this;

      return self != true;
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$&', TMP_3 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$|', TMP_4 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$^', TMP_5 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$==', TMP_6 = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, TMP_6.$$arity = 1);

    Opal.alias(self, 'equal?', '==');

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$singleton_class', TMP_7 = function ːsingleton_class() {
      var self = this;

      return $scope.get('Boolean');
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_8 = function ːto_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$dup', TMP_9 = function ːdup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_9.$$arity = 0);

    return (Opal.defn(self, '$clone', TMP_10 = function ːclone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_10.$$arity = 0), nil) && 'clone';
  })($scope.base, Boolean);
  Opal.cdecl($scope, 'TrueClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'FalseClass', $scope.get('Boolean'));
  Opal.cdecl($scope, 'TRUE', true);
  return Opal.cdecl($scope, 'FALSE', false);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);
  return (function($base) {
    var $Comparable, self = $Comparable = $module($base, 'Comparable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    Opal.defs(self, '$normalize', TMP_1 = function ːnormalize(what) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](what)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return what};
      if ((($a = $rb_gt(what, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1};
      if ((($a = $rb_lt(what, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return -1};
      return 0;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var $a, self = this, cmp = nil;

      try {
        if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true};
        
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    
        if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        return $scope.get('Comparable').$normalize(cmp) == 0;
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            return false
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$>', TMP_3 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) > 0;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$>=', TMP_4 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) >= 0;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$<', TMP_5 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) < 0;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$<=', TMP_6 = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.get('Comparable').$normalize(cmp) <= 0;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$between?', TMP_7 = function(min, max) {
      var self = this;

      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, TMP_7.$$arity = 2);
  })($scope.base)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$call', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  (function($base, $super) {
    function $RegexpError(){};
    var self = $RegexpError = $klass($base, $super, 'RegexpError', $RegexpError);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, $scope.get('StandardError'));
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

    Opal.cdecl($scope, 'IGNORECASE', 1);

    Opal.cdecl($scope, 'MULTILINE', 4);

    def.$$is_regexp = true;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      Opal.defn(self, '$allocate', TMP_1 = function ːallocate() {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, allocated = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        allocated = ($a = ($b = self, Opal.find_super_dispatcher(self, 'allocate', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        allocated.uninitialized = true;
        return allocated;
      }, TMP_1.$$arity = 0);
      Opal.defn(self, '$escape', TMP_2 = function ːescape(string) {
        var self = this;

        
        return string.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      }, TMP_2.$$arity = 1);
      Opal.defn(self, '$last_match', TMP_3 = function ːlast_match(n) {
        var $a, self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (n == null) {
          n = nil;
        }
        if ((($a = n['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $gvars["~"]
          } else {
          return $gvars["~"]['$[]'](n)
        };
      }, TMP_3.$$arity = -1);
      Opal.alias(self, 'quote', 'escape');
      Opal.defn(self, '$union', TMP_4 = function ːunion($a_rest) {
        var self = this, parts;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        parts = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          parts[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of Array into String")
        }        
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($scope.get('TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      
        return self.$new((quoted_validated).$join("|"), options);
      }, TMP_4.$$arity = -1);
      return (Opal.defn(self, '$new', TMP_5 = function(regexp, options) {
        var self = this;

        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $scope.get('Opal')['$coerce_to!'](regexp, $scope.get('String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise($scope.get('RegexpError'), "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($scope.get('IGNORECASE') & options) { temp += 'i'; }
          if ($scope.get('MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, TMP_5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self));

    Opal.defn(self, '$==', TMP_6 = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$===', TMP_7 = function(string) {
      var self = this;

      return self.$match($scope.get('Opal')['$coerce_to?'](string, $scope.get('String'), "to_str")) !== nil;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$=~', TMP_8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($a = self.$match(string), $a !== false && $a !== nil && $a != null ?$gvars["~"].$begin(0) : $a);
    }, TMP_8.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$inspect', TMP_9 = function ːinspect() {
      var self = this;

      return self.toString();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$match', TMP_10 = function ːmatch(string, pos) {
      var self = this, $iter = TMP_10.$$p, block = $iter || nil;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      TMP_10.$$p = null;
      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        pos = 0;
      } else {
        pos = $scope.get('Opal').$coerce_to(pos, $scope.get('Integer'), "to_int");
      }

      if (string === nil) {
        return $gvars["~"] = nil;
      }

      string = $scope.get('Opal').$coerce_to(string, $scope.get('String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return $gvars["~"] = nil;
        }
      }

      var source = self.source;
      var flags = 'g';
      // m flag + a . in Ruby will match white space, but in JS, it only matches beginning/ending of lines, so we get the equivalent here
      if (self.multiline) {
        source = source.replace('.', "[\\s\\S]");
        flags += 'm';
      }

      // global RegExp maintains state, so not using self/this
      var md, re = new RegExp(source, flags + (self.ignoreCase ? 'i' : ''));

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return $gvars["~"] = nil;
        }
        if (md.index >= pos) {
          $gvars["~"] = $scope.get('MatchData').$new(re, md)
          return block === nil ? $gvars["~"] : block.$call($gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, TMP_10.$$arity = -2);

    Opal.defn(self, '$~', TMP_11 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._);
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$source', TMP_12 = function ːsource() {
      var self = this;

      return self.source;
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$options', TMP_13 = function ːoptions() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($scope.get('TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $scope.get('MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $scope.get('IGNORECASE');
      }
      return result;
    ;
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$casefold?', TMP_14 = function() {
      var self = this;

      return self.ignoreCase;
    }, TMP_14.$$arity = 0);

    Opal.alias(self, 'to_s', 'source');

    return (Opal.defs(self, '$_load', TMP_15 = function ː_load(args) {
      var $a, self = this;

      return ($a = self).$new.apply($a, Opal.to_a(args));
    }, TMP_15.$$arity = 1), nil) && '_load';
  })($scope.base, RegExp);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27;

    def.matches = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    Opal.defn(self, '$initialize', TMP_16 = function ːinitialize(regexp, match_groups) {
      var self = this;

      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    }, TMP_16.$$arity = 2);

    Opal.defn(self, '$[]', TMP_17 = function($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self.matches)['$[]'].apply($b, Opal.to_a(args));
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$offset', TMP_18 = function ːoffset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$==', TMP_19 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = $scope.get('MatchData')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil && $d != null ?self.regexp.toString() == other.regexp.toString() : $d), $c !== false && $c !== nil && $c != null ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil && $b != null ?self.post_match == other.post_match : $b), $a !== false && $a !== nil && $a != null ?self.begin == other.begin : $a);
    }, TMP_19.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$begin', TMP_20 = function ːbegin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    ;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$end', TMP_21 = function ːend(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($scope.get('ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$captures', TMP_22 = function ːcaptures() {
      var self = this;

      return self.matches.slice(1);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_23 = function ːinspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$length', TMP_24 = function ːlength() {
      var self = this;

      return self.matches.length;
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_25 = function ːto_a() {
      var self = this;

      return self.matches;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_26 = function ːto_s() {
      var self = this;

      return self.matches[0];
    }, TMP_26.$$arity = 0);

    return (Opal.defn(self, '$values_at', TMP_27 = function ːvalues_at($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $scope.get('Opal')['$coerce_to!'](args[i], $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    
    }, TMP_27.$$arity = -1), nil) && 'values_at';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$captures', '$proc', '$shift', '$__send__', '$succ', '$escape']);
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68;

    def.length = nil;
    self.$include($scope.get('Comparable'));

    def.$$is_string = true;

    Opal.defn(self, '$__id__', TMP_1 = function ː__id__() {
      var self = this;

      return self.toString();
    }, TMP_1.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defs(self, '$try_convert', TMP_2 = function ːtry_convert(what) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](what, $scope.get('String'), "to_str");
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$new', TMP_3 = function(str) {
      var self = this;

      if (str == null) {
        str = "";
      }
      str = $scope.get('Opal').$coerce_to(str, $scope.get('String'), "to_str");
      return new String(str);
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(str) {
      var self = this;

      
      if (str === undefined) {
        return self;
      }
    
      return self.$raise($scope.get('NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$%', TMP_5 = function(data) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](data)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(Opal.to_a(data)))
        } else {
        return self.$format(self, data)
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$*', TMP_6 = function(count) {
      var self = this;

      
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return '';
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($scope.get('RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return result;
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str");
      return self + other.$to_s();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($scope.get('Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    ;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$=~', TMP_10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($scope.get('TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$[]', TMP_11 = function(index, length) {
      var self = this;

      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.exclude;
        length  = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");
        index   = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($scope.get('TypeError'))
        }
        return self.indexOf(index) !== -1 ? index : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          $gvars["~"] = nil
          return nil;
        }

        $gvars["~"] = $scope.get('MatchData').$new(index, match)

        if (length == null) {
          return match[0];
        }

        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return match[length += match.length];
        }

        if (length >= 0 && length < match.length) {
          return match[length];
        }

        return nil;
      }


      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.substr(index, 1);
      }

      length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    }, TMP_11.$$arity = -2);

    Opal.alias(self, 'byteslice', '[]');

    Opal.defn(self, '$capitalize', TMP_12 = function ːcapitalize() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$casecmp', TMP_13 = function ːcasecmp(other) {
      var self = this;

      other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    
      return self['$<=>'](other);
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$center', TMP_14 = function ːcenter(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust($rb_divide(($rb_plus(width, self.length)), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide(($rb_plus(width, self.length)), 2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    }, TMP_14.$$arity = -2);

    Opal.defn(self, '$chars', TMP_15 = function ːchars() {
      var $a, $b, self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a.$$p = block.$to_proc(), $a).call($b);
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$chomp', TMP_16 = function ːchomp(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      if ((($a = separator === nil || self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      separator = $scope.get('Opal')['$coerce_to!'](separator, $scope.get('String'), "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$chop', TMP_17 = function ːchop() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$chr', TMP_18 = function ːchr() {
      var self = this;

      return self.charAt(0);
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$clone', TMP_19 = function ːclone() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$dup', TMP_20 = function ːdup() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$count', TMP_21 = function ːcount($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$delete', TMP_22 = function($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        self.$raise($scope.get('ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp(char_class, 'g'), '');
    ;
    }, TMP_22.$$arity = -1);

    Opal.defn(self, '$downcase', TMP_23 = function ːdowncase() {
      var self = this;

      return self.toLowerCase();
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$each_char', TMP_24 = function ːeach_char() {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, "each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    
      return self;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$each_line', TMP_26 = function ːeach_line(separator) {
      var self = this, $iter = TMP_26.$$p, block = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_26.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $scope.get('Opal').$coerce_to(separator, $scope.get('String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            Opal.yield1(block, (a[i] || "") + (a[i + 1] || ""));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, splitted[i] + separator);
        }
        else {
          Opal.yield1(block, splitted[i]);
        }
      }
    
      return self;
    }, TMP_26.$$arity = -1);

    Opal.defn(self, '$empty?', TMP_27 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$end_with?', TMP_28 = function($a_rest) {
      var self = this, suffixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      suffixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        suffixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $scope.get('Opal').$coerce_to(suffixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    }, TMP_28.$$arity = -1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, 'equal?', '===');

    Opal.defn(self, '$gsub', TMP_29 = function ːgsub(pattern, replacement) {
      var self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          $gvars["~"] = nil
          result += self.slice(index);
          break;
        }

        match_data = $scope.get('MatchData').$new(pattern, match);

        if (replacement === undefined) {
          _replacement = block(match[0]);
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      $gvars["~"] = match_data
      return result;
    ;
    }, TMP_29.$$arity = -2);

    Opal.defn(self, '$hash', TMP_30 = function ːhash() {
      var self = this;

      return self.toString();
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$hex', TMP_31 = function ːhex() {
      var self = this;

      return self.$to_i(16);
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$include?', TMP_32 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('String'), "to_str")
      }
      return self.indexOf(other) !== -1;
    ;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$index', TMP_33 = function ːindex(search, offset) {
      var self = this;

      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            $gvars["~"] = nil;
            index = -1;
            break;
          }
          if (match.index >= offset) {
            $gvars["~"] = $scope.get('MatchData').$new(regex, match)
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$inspect', TMP_34 = function ːinspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$intern', TMP_35 = function ːintern() {
      var self = this;

      return self;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$lines', TMP_36 = function ːlines(separator) {
      var $a, $b, self = this, $iter = TMP_36.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_36.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil && block != null) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_36.$$arity = -1);

    Opal.defn(self, '$length', TMP_37 = function ːlength() {
      var self = this;

      return self.length;
    }, TMP_37.$$arity = 0);

    Opal.defn(self, '$ljust', TMP_38 = function ːljust(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    }, TMP_38.$$arity = -2);

    Opal.defn(self, '$lstrip', TMP_39 = function ːlstrip() {
      var self = this;

      return self.replace(/^\s*/, '');
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$match', TMP_40 = function ːmatch(pattern, pos) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      TMP_40.$$p = null;
      if ((($a = ((($b = $scope.get('String')['$==='](pattern)) !== false && $b !== nil && $b != null) ? $b : pattern['$respond_to?']("to_str"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        pattern = $scope.get('Regexp').$new(pattern.$to_str())};
      if ((($a = $scope.get('Regexp')['$==='](pattern)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a.$$p = block.$to_proc(), $a).call($b, self, pos);
    }, TMP_40.$$arity = -2);

    Opal.defn(self, '$next', TMP_41 = function ːnext() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return '';
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return result;
    
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$oct', TMP_42 = function ːoct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$ord', TMP_43 = function ːord() {
      var self = this;

      return self.charCodeAt(0);
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$partition', TMP_44 = function ːpartition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$reverse', TMP_45 = function ːreverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$rindex', TMP_46 = function ːrindex(search, offset) {
      var self = this;

      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = new RegExp(search.source, 'gm' + (search.ignoreCase ? 'i' : ''));
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          $gvars["~"] = nil
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $scope.get('Opal').$coerce_to(search, $scope.get('String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    
    }, TMP_46.$$arity = -2);

    Opal.defn(self, '$rjust', TMP_47 = function ːrjust(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " ";
      }
      width = $scope.get('Opal').$coerce_to(width, $scope.get('Integer'), "to_int");
      padstr = $scope.get('Opal').$coerce_to(padstr, $scope.get('String'), "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "zero width padding")};
      if ((($a = width <= self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    }, TMP_47.$$arity = -2);

    Opal.defn(self, '$rpartition', TMP_48 = function ːrpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = new RegExp(sep.source, 'gm' + (sep.ignoreCase ? 'i' : ''));

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $scope.get('MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $scope.get('Opal').$coerce_to(sep, $scope.get('String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$rstrip', TMP_49 = function ːrstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$scan', TMP_50 = function ːscan(pattern) {
      var self = this, $iter = TMP_50.$$p, block = $iter || nil;

      TMP_50.$$p = null;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $scope.get('MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      $gvars["~"] = match_data

      return (block !== nil ? self : result);
    
    }, TMP_50.$$arity = 1);

    Opal.alias(self, 'size', 'length');

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$split', TMP_51 = function ːsplit(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $scope.get('Opal')['$coerce_to!'](limit, $scope.get('Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil && $a != null) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i;

      if (pattern.$$is_regexp) {
        pattern = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      } else {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return result;
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0; i < match.length; i++) {
            result.push('');
          }
        }
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        return result;
      }

      if (limit >= result.length) {
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      return result;
    
    }, TMP_51.$$arity = -1);

    Opal.defn(self, '$squeeze', TMP_52 = function ːsqueeze($a_rest) {
      var self = this, sets;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      sets = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        sets[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1');
    
    }, TMP_52.$$arity = -1);

    Opal.defn(self, '$start_with?', TMP_53 = function($a_rest) {
      var self = this, prefixes;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      prefixes = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        prefixes[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $scope.get('Opal').$coerce_to(prefixes[i], $scope.get('String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    }, TMP_53.$$arity = -1);

    Opal.defn(self, '$strip', TMP_54 = function ːstrip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$sub', TMP_55 = function ːsub(pattern, replacement) {
      var self = this, $iter = TMP_55.$$p, block = $iter || nil;

      TMP_55.$$p = null;
      
      if (!pattern.$$is_regexp) {
        pattern = $scope.get('Opal').$coerce_to(pattern, $scope.get('String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result = pattern.exec(self);

      if (result === null) {
        $gvars["~"] = nil
        return self.toString();
      }

      $scope.get('MatchData').$new(pattern, result)

      if (replacement === undefined) {
        if (block === nil) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 2)")
        }
        return self.slice(0, result.index) + block(result[0]) + self.slice(result.index + result[0].length);
      }

      if (replacement.$$is_hash) {
        return self.slice(0, result.index) + (replacement)['$[]'](result[0]).$to_s() + self.slice(result.index + result[0].length);
      }

      replacement = $scope.get('Opal').$coerce_to(replacement, $scope.get('String'), "to_str");

      replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
        if (slashes.length % 2 === 0) {
          return original;
        }
        switch (command) {
        case "+":
          for (var i = result.length - 1; i > 0; i--) {
            if (result[i] !== undefined) {
              return slashes.slice(1) + result[i];
            }
          }
          return '';
        case "&": return slashes.slice(1) + result[0];
        case "`": return slashes.slice(1) + self.slice(0, result.index);
        case "'": return slashes.slice(1) + self.slice(result.index + result[0].length);
        default:  return slashes.slice(1) + (result[command] || '');
        }
      }).replace(/\\\\/g, '\\');

      return self.slice(0, result.index) + replacement + self.slice(result.index + result[0].length);
    ;
    }, TMP_55.$$arity = -2);

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$sum', TMP_56 = function ːsum(n) {
      var self = this;

      if (n == null) {
        n = 16;
      }
      
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, TMP_56.$$arity = -1);

    Opal.defn(self, '$swapcase', TMP_57 = function ːswapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, TMP_57.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_58 = function ːto_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, TMP_58.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_59 = function ːto_i(base) {
      var self = this;

      if (base == null) {
        base = 10;
      }
      
      var result,
          string = self.toLowerCase(),
          radix = $scope.get('Opal').$coerce_to(base, $scope.get('Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($scope.get('ArgumentError'), "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, TMP_59.$$arity = -1);

    Opal.defn(self, '$to_proc', TMP_61 = function ːto_proc() {
      var $a, $b, TMP_60, self = this, sym = nil;

      sym = self;
      return ($a = ($b = self).$proc, $a.$$p = (TMP_60 = function($c_rest){var self = TMP_60.$$s || this, block, args, $d, $e, obj = nil;

        block = TMP_60.$$p || nil, TMP_60.$$p = null;
        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ((($d = args['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          self.$raise($scope.get('ArgumentError'), "no receiver given")};
        obj = args.$shift();
        return ($d = ($e = obj).$__send__, $d.$$p = block.$to_proc(), $d).apply($e, [sym].concat(Opal.to_a(args)));}, TMP_60.$$s = self, TMP_60.$$arity = -1, TMP_60), $a).call($b);
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_62 = function ːto_s() {
      var self = this;

      return self.toString();
    }, TMP_62.$$arity = 0);

    Opal.alias(self, 'to_str', 'to_s');

    Opal.alias(self, 'to_sym', 'intern');

    Opal.defn(self, '$tr', TMP_63 = function ːtr(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    }, TMP_63.$$arity = 2);

    Opal.defn(self, '$tr_s', TMP_64 = function ːtr_s(from, to) {
      var self = this;

      from = $scope.get('Opal').$coerce_to(from, $scope.get('String'), "to_str").$to_s();
      to = $scope.get('Opal').$coerce_to(to, $scope.get('String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($scope.get('ArgumentError'), "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    }, TMP_64.$$arity = 2);

    Opal.defn(self, '$upcase', TMP_65 = function ːupcase() {
      var self = this;

      return self.toUpperCase();
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$upto', TMP_66 = function ːupto(stop, excl) {
      var self = this, $iter = TMP_66.$$p, block = $iter || nil;

      if (excl == null) {
        excl = false;
      }
      TMP_66.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = $scope.get('Opal').$coerce_to(stop, $scope.get('String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    
    }, TMP_66.$$arity = -2);

    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($scope.get('ArgumentError'), "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $scope.get('Opal').$coerce_to(sets[i], $scope.get('String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $scope.get('Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $scope.get('Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  

    Opal.defn(self, '$instance_variables', TMP_67 = function ːinstance_variables() {
      var self = this;

      return [];
    }, TMP_67.$$arity = 0);

    return (Opal.defs(self, '$_load', TMP_68 = function ː_load($a_rest) {
      var $b, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return ($b = self).$new.apply($b, Opal.to_a(args));
    }, TMP_68.$$arity = -1), nil) && '_load';
  })($scope.base, String);
  return Opal.cdecl($scope, 'Symbol', $scope.get('String'));
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$destructure', '$raise', '$new', '$yield', '$dup', '$enum_for', '$enumerator_size', '$flatten', '$map', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$to_enum', '$ceil', '$/', '$size', '$===', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$to_a', '$lambda', '$sort!', '$map!', '$zip']);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_7, TMP_10, TMP_12, TMP_15, TMP_19, TMP_21, TMP_23, TMP_24, TMP_25, TMP_27, TMP_29, TMP_31, TMP_33, TMP_35, TMP_36, TMP_38, TMP_43, TMP_44, TMP_45, TMP_48, TMP_49, TMP_51, TMP_52, TMP_53, TMP_54, TMP_56, TMP_57, TMP_59, TMP_61, TMP_62, TMP_65, TMP_68, TMP_70, TMP_72, TMP_74, TMP_76, TMP_78, TMP_83, TMP_84, TMP_86;

    Opal.defn(self, '$all?', TMP_1 = function() {try {

      var $a, $b, TMP_2, $c, TMP_3, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_2 = function($c_rest){var self = TMP_2.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_3 = function($d_rest){var self = TMP_3.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            return nil
            } else {
            Opal.ret(false)
          }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($c)
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$any?', TMP_4 = function() {try {

      var $a, $b, TMP_5, $c, TMP_6, self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_5 = function($c_rest){var self = TMP_5.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = -1, TMP_5), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_6 = function($d_rest){var self = TMP_6.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(true)
            } else {
            return nil
          }}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($c)
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$chunk', TMP_7 = function ːchunk(state) {
      var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, original_block = $iter || nil;

      TMP_7.$$p = null;
      if (original_block !== false && original_block !== nil && original_block != null) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "no block given")
      };
      return ($a = ($b = Opal.get('Enumerator')).$new, $a.$$p = (TMP_8 = function(yielder){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (yielder == null) yielder = nil;
      
        var block, previous = nil, accumulate = [];

        if (state == undefined || state === nil) {
          block = original_block;
        } else {
          block = ($c = ($d = $scope.get('Proc')).$new, $c.$$p = (TMP_9 = function(val){var self = TMP_9.$$s || this;
if (val == null) val = nil;
        return original_block.$yield(val, state.$dup())}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $c).call($d)
        }

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
    }, TMP_7.$$arity = -1);

    Opal.defn(self, '$collect', TMP_10 = function ːcollect() {
      var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return self.$enumerator_size()}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, "collect")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect_concat', TMP_12 = function ːcollect_concat() {
      var $a, $b, TMP_13, $c, TMP_14, self = this, $iter = TMP_12.$$p, block = $iter || nil;

      TMP_12.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$enumerator_size()}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, "collect_concat")
      };
      return ($a = ($c = self).$map, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return Opal.yield1(block, item);}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c).$flatten(1);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$count', TMP_15 = function ːcount(object) {
      var $a, $b, TMP_16, $c, TMP_17, $d, TMP_18, self = this, $iter = TMP_15.$$p, block = $iter || nil, result = nil;

      TMP_15.$$p = null;
      result = 0;
      if ((($a = object != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        block = ($a = ($b = self).$proc, $a.$$p = (TMP_16 = function($c_rest){var self = TMP_16.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return $scope.get('Opal').$destructure(args)['$=='](object)}, TMP_16.$$s = self, TMP_16.$$arity = -1, TMP_16), $a).call($b)
      } else if ((($a = block['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        block = ($a = ($c = self).$proc, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return true}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($c)};
      ($a = ($d = self).$each, $a.$$p = (TMP_18 = function($e_rest){var self = TMP_18.$$s || this, args, $f;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ((($f = Opal.yieldX(block, args)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
          return result++;
          } else {
          return nil
        }}, TMP_18.$$s = self, TMP_18.$$arity = -1, TMP_18), $a).call($d);
      return result;
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$cycle', TMP_19 = function ːcycle(n) {
      var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      TMP_19.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $c;

        if (n['$=='](nil)) {
            if ((($c = self['$respond_to?']("size")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return (($scope.get('Float')).$$scope.get('INFINITY'))
              } else {
              return nil
            }
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($c = $rb_gt(n, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($b, "cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$detect', TMP_21 = function ːdetect(ifnone) {try {

      var $a, $b, TMP_22, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      ($a = ($b = self).$each, $a.$$p = (TMP_22 = function($c_rest){var self = TMP_22.$$s || this, args, $d, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      value = $scope.get('Opal').$destructure(args);
        if ((($d = Opal.yield1(block, value)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          Opal.ret(value)
          } else {
          return nil
        };}, TMP_22.$$s = self, TMP_22.$$arity = -1, TMP_22), $a).call($b);
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_21.$$arity = -1);

    Opal.defn(self, '$drop', TMP_23 = function ːdrop(number) {
      var $a, self = this;

      number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
      if ((($a = number < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($scope.get('Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$drop_while', TMP_24 = function ːdrop_while() {
      var $a, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ((($a = value) === nil || $a == null || ($a.$$is_boolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$each_cons', TMP_25 = function ːeach_cons(n) {
      var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      if ((($a = arguments.length != 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $scope.get('Opal').$try_convert(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_26 = function(){var self = TMP_26.$$s || this, $c, $d, enum_size = nil;

        enum_size = self.$enumerator_size();
          if ((($c = enum_size['$nil?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
          } else if ((($c = ((($d = enum_size['$=='](0)) !== false && $d !== nil && $d != null) ? $d : $rb_lt(enum_size, n))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26), $a).call($b, "each_cons", n)
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$each_entry', TMP_27 = function ːeach_entry($a_rest) {
      var $b, $c, TMP_28, self = this, data, $iter = TMP_27.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      data = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        data[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_27.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($b = ($c = self).$to_enum, $b.$$p = (TMP_28 = function(){var self = TMP_28.$$s || this;

        return self.$enumerator_size()}, TMP_28.$$s = self, TMP_28.$$arity = 0, TMP_28), $b).apply($c, ["each_entry"].concat(Opal.to_a(data)))
      };
      
      self.$each.$$p = function() {
        var item = $scope.get('Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, TMP_27.$$arity = -1);

    Opal.defn(self, '$each_slice', TMP_29 = function ːeach_slice(n) {
      var $a, $b, TMP_30, self = this, $iter = TMP_29.$$p, block = $iter || nil;

      TMP_29.$$p = null;
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      if ((($a = n <= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_30 = function(){var self = TMP_30.$$s || this, $c;

        if ((($c = self['$respond_to?']("size")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($rb_divide(self.$size(), n)).$ceil()
            } else {
            return nil
          }}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30), $a).call($b, "each_slice", n)
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$each_with_index', TMP_31 = function ːeach_with_index($a_rest) {
      var $b, $c, TMP_32, self = this, args, $iter = TMP_31.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($b = ($c = self).$enum_for, $b.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this;

        return self.$enumerator_size()}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $b).apply($c, ["each_with_index"].concat(Opal.to_a(args)))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    }, TMP_31.$$arity = -1);

    Opal.defn(self, '$each_with_object', TMP_33 = function ːeach_with_object(object) {
      var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

      TMP_33.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this;

        return self.$enumerator_size()}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $a).call($b, "each_with_object", object)
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$entries', TMP_35 = function ːentries($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      self.$each.$$p = function() {
        result.push($scope.get('Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    }, TMP_35.$$arity = -1);

    Opal.alias(self, 'find', 'detect');

    Opal.defn(self, '$find_all', TMP_36 = function ːfind_all() {
      var $a, $b, TMP_37, self = this, $iter = TMP_36.$$p, block = $iter || nil;

      TMP_36.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

        return self.$enumerator_size()}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($b, "find_all")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$find_index', TMP_38 = function ːfind_index(object) {try {

      var $a, $b, TMP_39, $c, TMP_40, self = this, $iter = TMP_38.$$p, block = $iter || nil, index = nil;

      TMP_38.$$p = null;
      if ((($a = object === undefined && block === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$enum_for("find_index")};
      index = 0;
      if ((($a = object != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        ($a = ($b = self).$each, $a.$$p = (TMP_39 = function($c_rest){var self = TMP_39.$$s || this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ($scope.get('Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;}, TMP_39.$$s = self, TMP_39.$$arity = -1, TMP_39), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_40 = function($d_rest){var self = TMP_40.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = Opal.yieldX(block, Opal.to_a(value))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(index)};
          return index += 1;}, TMP_40.$$s = self, TMP_40.$$arity = -1, TMP_40), $a).call($c)
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_38.$$arity = -1);

    Opal.defn(self, '$first', TMP_43 = function ːfirst(number) {try {

      var $a, $b, TMP_41, $c, TMP_42, self = this, result = nil, current = nil;

      if ((($a = number === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$each, $a.$$p = (TMP_41 = function(value){var self = TMP_41.$$s || this;
if (value == null) value = nil;
        Opal.ret(value)}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $a).call($b)
        } else {
        result = [];
        number = $scope.get('Opal').$coerce_to(number, $scope.get('Integer'), "to_int");
        if ((($a = number < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        if ((($a = number == 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        current = 0;
        ($a = ($c = self).$each, $a.$$p = (TMP_42 = function($d_rest){var self = TMP_42.$$s || this, args, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        result.push($scope.get('Opal').$destructure(args));
          if ((($e = number <= ++current) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(result)
            } else {
            return nil
          };}, TMP_42.$$s = self, TMP_42.$$arity = -1, TMP_42), $a).call($c);
        return result;
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_43.$$arity = -1);

    Opal.alias(self, 'flat_map', 'collect_concat');

    Opal.defn(self, '$grep', TMP_44 = function ːgrep(pattern) {
      var $a, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            value = Opal.yield1(block, param);

            result.push(value);
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$group_by', TMP_45 = function ːgroup_by() {
      var $a, $b, TMP_46, $c, $d, self = this, $iter = TMP_45.$$p, block = $iter || nil, hash = nil;

      TMP_45.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_46 = function(){var self = TMP_46.$$s || this;

        return self.$enumerator_size()}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46), $a).call($b, "group_by")
      };
      hash = $scope.get('Hash').$new();
      
      var result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        (($a = value, $c = hash, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$include?', TMP_48 = function(obj) {try {

      var $a, $b, TMP_47, self = this;

      ($a = ($b = self).$each, $a.$$p = (TMP_47 = function($c_rest){var self = TMP_47.$$s || this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      if ($scope.get('Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
          } else {
          return nil
        }}, TMP_47.$$s = self, TMP_47.$$arity = -1, TMP_47), $a).call($b);
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$inject', TMP_49 = function ːinject(object, sym) {
      var self = this, $iter = TMP_49.$$p, block = $iter || nil;

      TMP_49.$$p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$scope.get('Symbol')['$==='](object)) {
            self.$raise($scope.get('TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$lazy', TMP_51 = function ːlazy() {
      var $a, $b, TMP_50, self = this;

      return ($a = ($b = (($scope.get('Enumerator')).$$scope.get('Lazy'))).$new, $a.$$p = (TMP_50 = function(enum$, $c_rest){var self = TMP_50.$$s || this, args, $d;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }if (enum$ == null) enum$ = nil;
      return ($d = enum$).$yield.apply($d, Opal.to_a(args))}, TMP_50.$$s = self, TMP_50.$$arity = -2, TMP_50), $a).call($b, self, self.$enumerator_size());
    }, TMP_51.$$arity = 0);

    Opal.defn(self, '$enumerator_size', TMP_52 = function ːenumerator_size() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    }, TMP_52.$$arity = 0);

    Opal.alias(self, 'map', 'collect');

    Opal.defn(self, '$max', TMP_53 = function ːmax(n) {
      var $a, $b, self = this, $iter = TMP_53.$$p, block = $iter || nil;

      TMP_53.$$p = null;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      return ($a = ($b = self).$sort, $a.$$p = block.$to_proc(), $a).call($b).$reverse().$first(n);
    }, TMP_53.$$arity = -1);

    Opal.defn(self, '$max_by', TMP_54 = function ːmax_by() {
      var $a, $b, TMP_55, self = this, $iter = TMP_54.$$p, block = $iter || nil;

      TMP_54.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_55 = function(){var self = TMP_55.$$s || this;

        return self.$enumerator_size()}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55), $a).call($b, "max_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_54.$$arity = 0);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$min', TMP_56 = function ːmin() {
      var self = this, $iter = TMP_56.$$p, block = $iter || nil;

      TMP_56.$$p = null;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $scope.get('Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.get('Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$min_by', TMP_57 = function ːmin_by() {
      var $a, $b, TMP_58, self = this, $iter = TMP_57.$$p, block = $iter || nil;

      TMP_57.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_58 = function(){var self = TMP_58.$$s || this;

        return self.$enumerator_size()}, TMP_58.$$s = self, TMP_58.$$arity = 0, TMP_58), $a).call($b, "min_by")
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    }, TMP_57.$$arity = 0);

    Opal.defn(self, '$minmax', TMP_59 = function ːminmax() {
      var $a, $b, $c, TMP_60, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      ((($a = block) !== false && $a !== nil && $a != null) ? $a : block = ($b = ($c = self).$proc, $b.$$p = (TMP_60 = function(a, b){var self = TMP_60.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$<=>'](b)}, TMP_60.$$s = self, TMP_60.$$arity = 2, TMP_60), $b).call($c));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $scope.get('Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($scope.get('ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    
    }, TMP_59.$$arity = 0);

    Opal.defn(self, '$minmax_by', TMP_61 = function ːminmax_by() {
      var self = this, $iter = TMP_61.$$p, block = $iter || nil;

      TMP_61.$$p = null;
      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$none?', TMP_62 = function() {try {

      var $a, $b, TMP_63, $c, TMP_64, self = this, $iter = TMP_62.$$p, block = $iter || nil;

      TMP_62.$$p = null;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_63 = function($c_rest){var self = TMP_63.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_63.$$s = self, TMP_63.$$arity = -1, TMP_63), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_64 = function($d_rest){var self = TMP_64.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            Opal.ret(false)
            } else {
            return nil
          }}, TMP_64.$$s = self, TMP_64.$$arity = -1, TMP_64), $a).call($c)
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_62.$$arity = 0);

    Opal.defn(self, '$one?', TMP_65 = function() {try {

      var $a, $b, TMP_66, $c, TMP_67, self = this, $iter = TMP_65.$$p, block = $iter || nil, count = nil;

      TMP_65.$$p = null;
      count = 0;
      if ((block !== nil)) {
        ($a = ($b = self).$each, $a.$$p = (TMP_66 = function($c_rest){var self = TMP_66.$$s || this, value, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($d = Opal.yieldX(block, Opal.to_a(value))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            count = $rb_plus(count, 1);
            if ((($d = $rb_gt(count, 1)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_66.$$s = self, TMP_66.$$arity = -1, TMP_66), $a).call($b)
        } else {
        ($a = ($c = self).$each, $a.$$p = (TMP_67 = function($d_rest){var self = TMP_67.$$s || this, value, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
        if ((($e = $scope.get('Opal').$destructure(value)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            count = $rb_plus(count, 1);
            if ((($e = $rb_gt(count, 1)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              Opal.ret(false)
              } else {
              return nil
            };
            } else {
            return nil
          }}, TMP_67.$$s = self, TMP_67.$$arity = -1, TMP_67), $a).call($c)
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$partition', TMP_68 = function ːpartition() {
      var $a, $b, TMP_69, self = this, $iter = TMP_68.$$p, block = $iter || nil;

      TMP_68.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

        return self.$enumerator_size()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $a).call($b, "partition")
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    }, TMP_68.$$arity = 0);

    Opal.alias(self, 'reduce', 'inject');

    Opal.defn(self, '$reject', TMP_70 = function ːreject() {
      var $a, $b, TMP_71, self = this, $iter = TMP_70.$$p, block = $iter || nil;

      TMP_70.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$enumerator_size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $a).call($b, "reject")
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ((($a = value) === nil || $a == null || ($a.$$is_boolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    }, TMP_70.$$arity = 0);

    Opal.defn(self, '$reverse_each', TMP_72 = function ːreverse_each() {
      var $a, $b, TMP_73, self = this, $iter = TMP_72.$$p, block = $iter || nil;

      TMP_72.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_73 = function(){var self = TMP_73.$$s || this;

        return self.$enumerator_size()}, TMP_73.$$s = self, TMP_73.$$arity = 0, TMP_73), $a).call($b, "reverse_each")
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    
    }, TMP_72.$$arity = 0);

    Opal.alias(self, 'select', 'find_all');

    Opal.defn(self, '$slice_before', TMP_74 = function ːslice_before(pattern) {
      var $a, $b, TMP_75, self = this, $iter = TMP_74.$$p, block = $iter || nil;

      TMP_74.$$p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = $scope.get('Enumerator')).$new, $a.$$p = (TMP_75 = function(e){var self = TMP_75.$$s || this, $c;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $scope.get('Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $scope.get('Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ((($c = value) !== nil && $c != null && (!$c.$$is_boolean || $c == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_75.$$s = self, TMP_75.$$arity = 1, TMP_75), $a).call($b);
    }, TMP_74.$$arity = -1);

    Opal.defn(self, '$sort', TMP_76 = function ːsort() {
      var $a, $b, TMP_77, $c, self = this, $iter = TMP_76.$$p, block = $iter || nil, ary = nil;

      TMP_76.$$p = null;
      ary = self.$to_a();
      if ((block !== nil)) {
        } else {
        block = ($a = ($b = self).$lambda, $a.$$p = (TMP_77 = function(a, b){var self = TMP_77.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
        return a['$<=>'](b)}, TMP_77.$$s = self, TMP_77.$$arity = 2, TMP_77), $a).call($b)
      };
      return ($a = ($c = ary).$sort, $a.$$p = block.$to_proc(), $a).call($c);
    }, TMP_76.$$arity = 0);

    Opal.defn(self, '$sort_by', TMP_78 = function ːsort_by() {
      var $a, $b, TMP_79, $c, TMP_80, $d, TMP_81, $e, TMP_82, self = this, $iter = TMP_78.$$p, block = $iter || nil, dup = nil;

      TMP_78.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_79 = function(){var self = TMP_79.$$s || this;

        return self.$enumerator_size()}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79), $a).call($b, "sort_by")
      };
      dup = ($a = ($c = self).$map, $a.$$p = (TMP_80 = function(){var self = TMP_80.$$s || this, $yielded, arg = nil;

      arg = $scope.get('Opal').$destructure(arguments);
        ($yielded = Opal.yield1(block, arg));return [$yielded, arg];}, TMP_80.$$s = self, TMP_80.$$arity = 0, TMP_80), $a).call($c);
      ($a = ($d = dup)['$sort!'], $a.$$p = (TMP_81 = function(a, b){var self = TMP_81.$$s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return (a[0])['$<=>'](b[0])}, TMP_81.$$s = self, TMP_81.$$arity = 2, TMP_81), $a).call($d);
      return ($a = ($e = dup)['$map!'], $a.$$p = (TMP_82 = function(i){var self = TMP_82.$$s || this;
if (i == null) i = nil;
      return i[1];}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82), $a).call($e);
    }, TMP_78.$$arity = 0);

    Opal.defn(self, '$take', TMP_83 = function ːtake(num) {
      var self = this;

      return self.$first(num);
    }, TMP_83.$$arity = 1);

    Opal.defn(self, '$take_while', TMP_84 = function ːtake_while() {try {

      var $a, $b, TMP_85, self = this, $iter = TMP_84.$$p, block = $iter || nil, result = nil;

      TMP_84.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return ($a = ($b = self).$each, $a.$$p = (TMP_85 = function($c_rest){var self = TMP_85.$$s || this, args, $d, value = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      value = $scope.get('Opal').$destructure(args);
        if ((($d = Opal.yield1(block, value)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          } else {
          Opal.ret(result)
        };
        return result.push(value);}, TMP_85.$$s = self, TMP_85.$$arity = -1, TMP_85), $a).call($b);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_84.$$arity = 0);

    Opal.alias(self, 'to_a', 'entries');

    Opal.defn(self, '$zip', TMP_86 = function ːzip($a_rest) {
      var $b, self = this, others, $iter = TMP_86.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_86.$$p = null;
      return ($b = self.$to_a()).$zip.apply($b, Opal.to_a(others));
    }, TMP_86.$$arity = -1);
  })($scope.base)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7;

    def.size = def.args = def.object = def.method = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_enumerator = true;

    Opal.defs(self, '$for', TMP_1 = function(object, method, $a_rest) {
      var self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      if (method == null) {
        method = "each";
      }
      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    }, TMP_1.$$arity = -2);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize($a_rest) {
      var $b, $c, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      if (block !== false && block !== nil && block != null) {
        self.object = ($b = ($c = $scope.get('Generator')).$new, $b.$$p = block.$to_proc(), $b).call($c);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($b = self.size) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.size = $scope.get('Opal').$coerce_to(self.size, $scope.get('Integer'), "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$each', TMP_3 = function ːeach($a_rest) {
      var $b, $c, $d, self = this, args, $iter = TMP_3.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      if ((($b = ($c = block['$nil?'](), $c !== false && $c !== nil && $c != null ?args['$empty?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return self};
      args = $rb_plus(self.args, args);
      if ((($b = block['$nil?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = self.$class()).$new.apply($b, [self.object, self.method].concat(Opal.to_a(args)))};
      return ($c = ($d = self.object).$__send__, $c.$$p = block.$to_proc(), $c).apply($d, [self.method].concat(Opal.to_a(args)));
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$size', TMP_4 = function ːsize() {
      var $a, self = this;

      if ((($a = $scope.get('Proc')['$==='](self.size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = self.size).$call.apply($a, Opal.to_a(self.args))
        } else {
        return self.size
      };
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$with_index', TMP_5 = function ːwith_index(offset) {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      if (offset == null) {
        offset = 0;
      }
      TMP_5.$$p = null;
      if (offset !== false && offset !== nil && offset != null) {
        offset = $scope.get('Opal').$coerce_to(offset, $scope.get('Integer'), "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

        return self.$size()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, "with_index", offset)
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $scope.get('Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    
    }, TMP_5.$$arity = -1);

    Opal.alias(self, 'with_object', 'each_with_object');

    Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = $rb_plus(result, "(" + (self.args.$inspect()['$[]']($scope.get('Range').$new(1, -2))) + ")")
      };
      return $rb_plus(result, ">");
    }, TMP_7.$$arity = 0);

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9;

      def.block = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_8 = function ːinitialize() {
        var self = this, $iter = TMP_8.$$p, block = $iter || nil;

        TMP_8.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('LocalJumpError'), "no block given")
        };
        return self.block = block;
      }, TMP_8.$$arity = 0);

      return (Opal.defn(self, '$each', TMP_9 = function ːeach($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_9.$$p, block = $iter || nil, yielder = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_9.$$p = null;
        yielder = ($b = ($c = $scope.get('Yielder')).$new, $b.$$p = block.$to_proc(), $b).call($c);
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, TMP_9.$$arity = -1), nil) && 'each';
    })($scope.base, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12;

      def.block = nil;
      Opal.defn(self, '$initialize', TMP_10 = function ːinitialize() {
        var self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        return self.block = block;
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$yield', TMP_11 = function($a_rest) {
        var self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      }, TMP_11.$$arity = -1);

      return (Opal.defn(self, '$<<', TMP_12 = function($a_rest) {
        var $b, self = this, values;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        values = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          values[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$yield.apply($b, Opal.to_a(values));
        return self;
      }, TMP_12.$$arity = -1), nil) && '<<';
    })($scope.base, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_16, TMP_17, TMP_19, TMP_24, TMP_25, TMP_27, TMP_28, TMP_30, TMP_33, TMP_36, TMP_37, TMP_39;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('Exception'));

      Opal.defn(self, '$initialize', TMP_13 = function ːinitialize(object, size) {
        var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil;

        if (size == null) {
          size = nil;
        }
        TMP_13.$$p = null;
        if ((block !== nil)) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_13, false)), $a.$$p = (TMP_14 = function(yielder, $c_rest){var self = TMP_14.$$s || this, each_args, $d, $e, TMP_15;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          each_args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            each_args[$arg_idx - 1] = arguments[$arg_idx];
          }if (yielder == null) yielder = nil;
        try {
            return ($d = ($e = object).$each, $d.$$p = (TMP_15 = function($c_rest){var self = TMP_15.$$s || this, args;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            
              args.unshift(yielder);

              Opal.yieldX(block, args);
            ;}, TMP_15.$$s = self, TMP_15.$$arity = -1, TMP_15), $d).apply($e, Opal.to_a(each_args))
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }}, TMP_14.$$s = self, TMP_14.$$arity = -2, TMP_14), $a).call($b, size);
      }, TMP_13.$$arity = -2);

      Opal.alias(self, 'force', 'to_a');

      Opal.defn(self, '$lazy', TMP_16 = function ːlazy() {
        var self = this;

        return self;
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$collect', TMP_17 = function ːcollect() {
        var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, block = $iter || nil;

        TMP_17.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_18 = function(enum$, $c_rest){var self = TMP_18.$$s || this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        }, TMP_18.$$s = self, TMP_18.$$arity = -2, TMP_18), $a).call($b, self, self.$enumerator_size());
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$collect_concat', TMP_19 = function ːcollect_concat() {
        var $a, $b, TMP_20, self = this, $iter = TMP_19.$$p, block = $iter || nil;

        TMP_19.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_20 = function(enum$, $c_rest){var self = TMP_20.$$s || this, args, $d, $e, TMP_21, $f, TMP_22;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($d = ($e = (value)).$each, $d.$$p = (TMP_21 = function(v){var self = TMP_21.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $d).call($e)
          }
          else {
            var array = $scope.get('Opal').$try_convert(value, $scope.get('Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($d = ($f = (value)).$each, $d.$$p = (TMP_22 = function(v){var self = TMP_22.$$s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $d).call($f);
            }
          }
        ;}, TMP_20.$$s = self, TMP_20.$$arity = -2, TMP_20), $a).call($b, self, nil);
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$drop', TMP_24 = function ːdrop(n) {
        var $a, $b, TMP_23, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_23 = function(enum$, $c_rest){var self = TMP_23.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ((($d = $rb_lt(dropped, n)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return dropped = $rb_plus(dropped, 1)
            } else {
            return ($d = enum$).$yield.apply($d, Opal.to_a(args))
          }}, TMP_23.$$s = self, TMP_23.$$arity = -2, TMP_23), $a).call($b, self, set_size);
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$drop_while', TMP_25 = function ːdrop_while() {
        var $a, $b, TMP_26, self = this, $iter = TMP_25.$$p, block = $iter || nil, succeeding = nil;

        TMP_25.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_26 = function(enum$, $c_rest){var self = TMP_26.$$s || this, args, $d, $e;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if (succeeding !== false && succeeding !== nil && succeeding != null) {
            
            var value = Opal.yieldX(block, args);

            if ((($d = value) === nil || $d == null || ($d.$$is_boolean && $d == false))) {
              succeeding = false;

              ($d = enum$).$yield.apply($d, Opal.to_a(args));
            }
          
            } else {
            return ($e = enum$).$yield.apply($e, Opal.to_a(args))
          }}, TMP_26.$$s = self, TMP_26.$$arity = -2, TMP_26), $a).call($b, self, nil);
      }, TMP_25.$$arity = 0);

      Opal.defn(self, '$enum_for', TMP_27 = function ːenum_for(method, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_27.$$p, block = $iter || nil;

        if (method == null) {
          method = "each";
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_27.$$p = null;
        return ($b = ($c = self.$class()).$for, $b.$$p = block.$to_proc(), $b).apply($c, [self, method].concat(Opal.to_a(args)));
      }, TMP_27.$$arity = -1);

      Opal.defn(self, '$find_all', TMP_28 = function ːfind_all() {
        var $a, $b, TMP_29, self = this, $iter = TMP_28.$$p, block = $iter || nil;

        TMP_28.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy select without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_29 = function(enum$, $c_rest){var self = TMP_29.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
        ;}, TMP_29.$$s = self, TMP_29.$$arity = -2, TMP_29), $a).call($b, self, nil);
      }, TMP_28.$$arity = 0);

      Opal.alias(self, 'flat_map', 'collect_concat');

      Opal.defn(self, '$grep', TMP_30 = function ːgrep(pattern) {
        var $a, $b, TMP_31, $c, TMP_32, self = this, $iter = TMP_30.$$p, block = $iter || nil;

        TMP_30.$$p = null;
        if (block !== false && block !== nil && block != null) {
          return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_31 = function(enum$, $c_rest){var self = TMP_31.$$s || this, args, $d;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, TMP_31.$$s = self, TMP_31.$$arity = -2, TMP_31), $a).call($b, self, nil)
          } else {
          return ($a = ($c = $scope.get('Lazy')).$new, $a.$$p = (TMP_32 = function(enum$, $d_rest){var self = TMP_32.$$s || this, args, $e;

            var $args_len = arguments.length, $rest_len = $args_len - 1;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 1] = arguments[$arg_idx];
            }if (enum$ == null) enum$ = nil;
          
            var param = $scope.get('Opal').$destructure(args),
                value = pattern['$==='](param);

            if ((($e = value) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_32.$$s = self, TMP_32.$$arity = -2, TMP_32), $a).call($c, self, nil)
        };
      }, TMP_30.$$arity = 1);

      Opal.alias(self, 'map', 'collect');

      Opal.alias(self, 'select', 'find_all');

      Opal.defn(self, '$reject', TMP_33 = function ːreject() {
        var $a, $b, TMP_34, self = this, $iter = TMP_33.$$p, block = $iter || nil;

        TMP_33.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy reject without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_34 = function(enum$, $c_rest){var self = TMP_34.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) === nil || $d == null || ($d.$$is_boolean && $d == false))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
        ;}, TMP_34.$$s = self, TMP_34.$$arity = -2, TMP_34), $a).call($b, self, nil);
      }, TMP_33.$$arity = 0);

      Opal.defn(self, '$take', TMP_36 = function ːtake(n) {
        var $a, $b, TMP_35, self = this, current_size = nil, set_size = nil, taken = nil;

        n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(n, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.get('Integer')['$==='](current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_lt(n, current_size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_35 = function(enum$, $c_rest){var self = TMP_35.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        if ((($d = $rb_lt(taken, n)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
            return taken = $rb_plus(taken, 1);
            } else {
            return self.$raise($scope.get('StopLazyError'))
          }}, TMP_35.$$s = self, TMP_35.$$arity = -2, TMP_35), $a).call($b, self, set_size);
      }, TMP_36.$$arity = 1);

      Opal.defn(self, '$take_while', TMP_37 = function ːtake_while() {
        var $a, $b, TMP_38, self = this, $iter = TMP_37.$$p, block = $iter || nil;

        TMP_37.$$p = null;
        if (block !== false && block !== nil && block != null) {
          } else {
          self.$raise($scope.get('ArgumentError'), "tried to call lazy take_while without a block")
        };
        return ($a = ($b = $scope.get('Lazy')).$new, $a.$$p = (TMP_38 = function(enum$, $c_rest){var self = TMP_38.$$s || this, args, $d;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }if (enum$ == null) enum$ = nil;
        
          var value = Opal.yieldX(block, args);

          if ((($d = value) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            ($d = enum$).$yield.apply($d, Opal.to_a(args));
          }
          else {
            self.$raise($scope.get('StopLazyError'));
          }
        ;}, TMP_38.$$s = self, TMP_38.$$arity = -2, TMP_38), $a).call($b, self, nil);
      }, TMP_37.$$arity = 0);

      Opal.alias(self, 'to_enum', 'enum_for');

      return (Opal.defn(self, '$inspect', TMP_39 = function ːinspect() {
        var self = this;

        return "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">";
      }, TMP_39.$$arity = 0), nil) && 'inspect';
    })($scope.base, self);
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$coerce', '$===', '$raise', '$__send__', '$equal?', '$coerce_to!', '$-@', '$**', '$-', '$*', '$div', '$<', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$round', '$to_i', '$truncate', '$>']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36;

    self.$include($scope.get('Comparable'));

    Opal.defn(self, '$coerce', TMP_1 = function ːcoerce(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$__coerced__', TMP_2 = function ː__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      try {
        $b = other.$coerce(self), $a = Opal.to_ary($b), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]), $b
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {
          try {
            $case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerce into Numeric")}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
      return a.$__send__(method, b);
    }, TMP_2.$$arity = 2);

    Opal.defn(self, '$<=>', TMP_3 = function(other) {
      var $a, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      return nil;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$[]', TMP_4 = function(bit) {
      var self = this, min = nil, max = nil;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = $rb_minus(((2)['$**'](30)), 1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$+@', TMP_5 = function() {
      var self = this;

      return self;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$-@', TMP_6 = function() {
      var self = this;

      return $rb_minus(0, self);
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$%', TMP_7 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$abs', TMP_8 = function ːabs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
        } else {
        return self
      };
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_9 = function ːabs2() {
      var self = this;

      return $rb_times(self, self);
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$angle', TMP_10 = function ːangle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return (($scope.get('Math')).$$scope.get('PI'))
        } else {
        return 0
      };
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$ceil', TMP_11 = function ːceil() {
      var self = this;

      return self.$to_f().$ceil();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$conj', TMP_12 = function ːconj() {
      var self = this;

      return self;
    }, TMP_12.$$arity = 0);

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', TMP_13 = function ːdenominator() {
      var self = this;

      return self.$to_r().$denominator();
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$div', TMP_14 = function ːdiv(other) {
      var self = this;

      if (other['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by o")};
      return ($rb_divide(self, other)).$floor();
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$divmod', TMP_15 = function ːdivmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)];
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$fdiv', TMP_16 = function ːfdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other);
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$floor', TMP_17 = function ːfloor() {
      var self = this;

      return self.$to_f().$floor();
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$i', TMP_18 = function ːi() {
      var self = this;

      return self.$Complex(0, self);
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$imag', TMP_19 = function ːimag() {
      var self = this;

      return 0;
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$integer?', TMP_20 = function() {
      var self = this;

      return false;
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$nonzero?', TMP_21 = function() {
      var $a, self = this;

      if ((($a = self['$zero?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self
      };
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$numerator', TMP_22 = function ːnumerator() {
      var self = this;

      return self.$to_r().$numerator();
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', TMP_23 = function ːpolar() {
      var self = this;

      return [self.$abs(), self.$arg()];
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$quo', TMP_24 = function ːquo(other) {
      var self = this;

      return $rb_divide($scope.get('Opal')['$coerce_to!'](self, $scope.get('Rational'), "to_r"), other);
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$real', TMP_25 = function ːreal() {
      var self = this;

      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$real?', TMP_26 = function() {
      var self = this;

      return true;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$rect', TMP_27 = function ːrect() {
      var self = this;

      return [self, 0];
    }, TMP_27.$$arity = 0);

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$round', TMP_28 = function ːround(digits) {
      var self = this;

      return self.$to_f().$round(digits);
    }, TMP_28.$$arity = -1);

    Opal.defn(self, '$to_c', TMP_29 = function ːto_c() {
      var self = this;

      return self.$Complex(self, 0);
    }, TMP_29.$$arity = 0);

    Opal.defn(self, '$to_int', TMP_30 = function ːto_int() {
      var self = this;

      return self.$to_i();
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$truncate', TMP_31 = function ːtruncate() {
      var self = this;

      return self.$to_f().$truncate();
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$zero?', TMP_32 = function() {
      var self = this;

      return self['$=='](0);
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$positive?', TMP_33 = function() {
      var self = this;

      return $rb_gt(self, 0);
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$negative?', TMP_34 = function() {
      var self = this;

      return $rb_lt(self, 0);
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$dup', TMP_35 = function ːdup() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't dup " + (self.$class()));
    }, TMP_35.$$arity = 0);

    return (Opal.defn(self, '$clone', TMP_36 = function ːclone() {
      var self = this;

      return self.$raise($scope.get('TypeError'), "can't clone " + (self.$class()));
    }, TMP_36.$$arity = 0), nil) && 'clone';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$raise', '$===', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$join', '$to_str', '$class', '$clone', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$[]', '$to_s', '$new', '$!', '$>=', '$**', '$delete_if', '$to_proc', '$each', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$dup', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$<<', '$values', '$kind_of?', '$last', '$first', '$upto', '$reject', '$pristine']);
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_37, TMP_38, TMP_39, TMP_41, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_58, TMP_59, TMP_60, TMP_62, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_70, TMP_72, TMP_73, TMP_74, TMP_75, TMP_77, TMP_78, TMP_79, TMP_82, TMP_83, TMP_85, TMP_87, TMP_88, TMP_89, TMP_90, TMP_91, TMP_92, TMP_93, TMP_95, TMP_96, TMP_97, TMP_98, TMP_101, TMP_102, TMP_103, TMP_104, TMP_107, TMP_108, TMP_109, TMP_111;

    def.length = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_array = true;

    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return toArraySubclass(objects, self);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(size, obj) {
      var $a, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (size == null) {
        size = nil;
      }
      if (obj == null) {
        obj = nil;
      }
      TMP_2.$$p = null;
      if ((($a = arguments.length > 2) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      
      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }
    
      if ((($a = arguments.length === 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](size)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace(size.$to_a());
          return self;
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace(size.$to_ary());
          return self;}};
      size = $scope.get('Opal').$coerce_to(size, $scope.get('Integer'), "to_int");
      if ((($a = size < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      
      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$try_convert', TMP_3 = function ːtry_convert(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Array'), "to_ary");
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$&', TMP_4 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$|', TMP_5 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$*', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$join(other.$to_str())};
      other = $scope.get('Opal').$coerce_to(other, $scope.get('Integer'), "to_int");
      if ((($a = other < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      return self.concat(other);
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$-', TMP_8 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$clone().$to_a()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$<<', TMP_9 = function(object) {
      var self = this;

      self.push(object);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_10 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$==', TMP_11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($scope.get('Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.constructor !== Array)
          array = (array).$to_a();
        if (other.constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$[]', TMP_12 = function(index, length) {
      var self = this;

      
      var size = self.length,
          exclude, from, to, result;

      if (index.$$is_range) {
        exclude = index.exclude;
        from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int");
        to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        result = self.slice(from, to)
      }
      else {
        index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          result = self.slice(index, index + length);
        }
      }

      return toArraySubclass(result, self.$class())
    ;
    }, TMP_12.$$arity = -2);

    Opal.defn(self, '$[]=', TMP_13 = function(index, value, extra) {
      var $a, self = this, data = nil, length = nil;

      
      var i, size = self.length;
    
      if ((($a = $scope.get('Range')['$==='](index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var exclude = index.exclude,
            from    = $scope.get('Opal').$coerce_to(index.begin, $scope.get('Integer'), "to_int"),
            to      = $scope.get('Opal').$coerce_to(index.end, $scope.get('Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($scope.get('RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = $scope.get('Array')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var old;

        index  = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($scope.get('IndexError'), "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      
      };
    }, TMP_13.$$arity = -3);

    Opal.defn(self, '$assoc', TMP_14 = function ːassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$at', TMP_15 = function ːat(index) {
      var self = this;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$bsearch', TMP_16 = function ːbsearch() {
      var self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("bsearch")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = block(val);

        if (ret === true) {
          satisfied = val;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return val; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($scope.get('TypeError'), "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$cycle', TMP_17 = function ːcycle(n) {
      var $a, $b, TMP_18, $c, self = this, $iter = TMP_17.$$p, block = $iter || nil;

      if (n == null) {
        n = nil;
      }
      TMP_17.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $c;

        if (n['$=='](nil)) {
            return (($scope.get('Float')).$$scope.get('INFINITY'))
            } else {
            n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
            if ((($c = $rb_gt(n, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return $rb_times(self.$enumerator_size(), n)
              } else {
              return 0
            };
          }}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b, "cycle", n)
      };
      if ((($a = ((($c = self['$empty?']()) !== false && $c !== nil && $c != null) ? $c : n['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    
      return self;
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$clear', TMP_19 = function ːclear() {
      var self = this;

      self.splice(0, self.length);
      return self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$count', TMP_20 = function ːcount(object) {
      var $a, $b, self = this, $iter = TMP_20.$$p, block = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      if (object == null) {
        object = nil;
      }
      TMP_20.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = object) !== false && $b !== nil && $b != null) ? $b : block)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'count', TMP_20, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.$size()
      };
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$initialize_copy', TMP_21 = function ːinitialize_copy(other) {
      var self = this;

      return self.$replace(other);
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$collect', TMP_22 = function ːcollect() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b, "collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_24 = function() {
      var $a, $b, TMP_25, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this;

        return self.$size()}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, "collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    
      return self;
    }, TMP_24.$$arity = 0);

    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  

    Opal.defn(self, '$combination', TMP_26 = function ːcombination(n) {
      var $a, $b, TMP_27, self = this, $iter = TMP_26.$$p, $yield = $iter || nil, num = nil;

      TMP_26.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this;

        return binomial_coefficient(self.length, num);}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $a).call($b, "combination", num)
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$repeated_combination', TMP_28 = function ːrepeated_combination(n) {
      var $a, $b, TMP_29, self = this, $iter = TMP_28.$$p, $yield = $iter || nil, num = nil;

      TMP_28.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this;

        return binomial_coefficient(self.length + num - 1, num);}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $a).call($b, "repeated_combination", num)
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$compact', TMP_30 = function ːcompact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$compact!', TMP_31 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$concat', TMP_32 = function ːconcat(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$delete', TMP_33 = function(object) {
      var self = this, $iter = TMP_33.$$p, $yield = $iter || nil;

      TMP_33.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    ;
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$delete_at', TMP_34 = function ːdelete_at(index) {
      var self = this;

      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    }, TMP_34.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_35 = function ːdelete_if() {
      var $a, $b, TMP_36, self = this, $iter = TMP_35.$$p, block = $iter || nil;

      TMP_35.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this;

        return self.$size()}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($b, "delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$drop', TMP_37 = function ːdrop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($scope.get('ArgumentError'))
      }

      return self.slice(number);
    ;
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$dup', TMP_38 = function ːdup() {
      var $a, $b, self = this, $iter = TMP_38.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_38.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      
      if (
        self.$$class === Opal.Array &&
        self.$allocate.$$pristine &&
        self.$copy_instance_variables.$$pristine &&
        self.$initialize_dup.$$pristine
      ) return self.slice(0);
    
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'dup', TMP_38, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_38.$$arity = 0);

    Opal.defn(self, '$each', TMP_39 = function ːeach() {
      var $a, $b, TMP_40, self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_40 = function(){var self = TMP_40.$$s || this;

        return self.$size()}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40), $a).call($b, "each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    
      return self;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$each_index', TMP_41 = function ːeach_index() {
      var $a, $b, TMP_42, self = this, $iter = TMP_41.$$p, block = $iter || nil;

      TMP_41.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this;

        return self.$size()}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $a).call($b, "each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    
      return self;
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_43 = function() {
      var self = this;

      return self.length === 0;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_44 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$fetch', TMP_45 = function ːfetch(index, defaults) {
      var self = this, $iter = TMP_45.$$p, block = $iter || nil;

      TMP_45.$$p = null;
      
      var original = index;

      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($scope.get('IndexError'), "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, TMP_45.$$arity = -2);

    Opal.defn(self, '$fill', TMP_46 = function ːfill($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_46.$$p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_46.$$p = null;
      
      var i, length, value;
    
      if (block !== false && block !== nil && block != null) {
        if ((($b = args.length > 2) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), one = ($b[0] == null ? nil : $b[0]), two = ($b[1] == null ? nil : $b[1]), $c;
        } else {
        if ((($b = args.length == 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ((($b = args.length > 3) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), obj = ($b[0] == null ? nil : $b[0]), one = ($b[1] == null ? nil : $b[1]), two = ($b[2] == null ? nil : $b[2]), $c;
      };
      if ((($b = $scope.get('Range')['$==='](one)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if (two !== false && two !== nil && two != null) {
          self.$raise($scope.get('TypeError'), "length invalid with range")};
        left = $scope.get('Opal').$coerce_to(one.$begin(), $scope.get('Integer'), "to_int");
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left += self.length;};
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$raise($scope.get('RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $scope.get('Opal').$coerce_to(one.$end(), $scope.get('Integer'), "to_int");
        if ((($b = right < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          right += self.length;};
        if ((($b = one['$exclude_end?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          right += 1;
        };
        if ((($b = right <= left) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self};
      } else if (one !== false && one !== nil && one != null) {
        left = $scope.get('Opal').$coerce_to(one, $scope.get('Integer'), "to_int");
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left += self.length;};
        if ((($b = left < 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          left = 0};
        if (two !== false && two !== nil && two != null) {
          right = $scope.get('Opal').$coerce_to(two, $scope.get('Integer'), "to_int");
          if ((($b = right == 0) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($b = left > self.length) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        
        for (i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($b = right > self.length) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.length = right};
      if (block !== false && block !== nil && block != null) {
        
        for (length = self.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      ;
        } else {
        
        for (length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$first', TMP_47 = function ːfirst(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    
    }, TMP_47.$$arity = -1);

    Opal.defn(self, '$flatten', TMP_48 = function ːflatten(level) {
      var self = this;

      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$scope.get('Opal')['$respond_to?'](item, "to_ary")) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($scope.get('TypeError'));
          }

          if (ary === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $scope.get('Opal').$coerce_to(level, $scope.get('Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    
    }, TMP_48.$$arity = -1);

    Opal.defn(self, '$flatten!', TMP_49 = function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$hash', TMP_50 = function ːhash() {
      var self = this;

      
      var top = (Opal.hash_ids == undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    }, TMP_50.$$arity = 0);

    Opal.defn(self, '$include?', TMP_51 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, TMP_51.$$arity = 1);

    Opal.defn(self, '$index', TMP_52 = function ːindex(object) {
      var self = this, $iter = TMP_52.$$p, block = $iter || nil;

      TMP_52.$$p = null;
      
      var i, length, value;

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    }, TMP_52.$$arity = -1);

    Opal.defn(self, '$insert', TMP_53 = function ːinsert(index, $a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      index = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($scope.get('IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, TMP_53.$$arity = -2);

    Opal.defn(self, '$inspect', TMP_54 = function ːinspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    ;
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$join', TMP_55 = function ːjoin(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil;
      }
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($scope.get('Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($scope.get('ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($scope.get('Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($scope.get('NoMethodError').$new("" + ($scope.get('Opal').$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($scope.get('Opal')['$coerce_to!'](sep, $scope.get('String'), "to_str").$to_s());
      }
    ;
    }, TMP_55.$$arity = -1);

    Opal.defn(self, '$keep_if', TMP_56 = function ːkeep_if() {
      var $a, $b, TMP_57, self = this, $iter = TMP_56.$$p, block = $iter || nil;

      TMP_56.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_57 = function(){var self = TMP_57.$$s || this;

        return self.$size()}, TMP_57.$$s = self, TMP_57.$$arity = 0, TMP_57), $a).call($b, "keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$last', TMP_58 = function ːlast(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");

      if (count < 0) {
        self.$raise($scope.get('ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    }, TMP_58.$$arity = -1);

    Opal.defn(self, '$length', TMP_59 = function ːlength() {
      var self = this;

      return self.length;
    }, TMP_59.$$arity = 0);

    Opal.alias(self, 'map', 'collect');

    Opal.alias(self, 'map!', 'collect!');

    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  

    Opal.defn(self, '$permutation', TMP_60 = function ːpermutation(num) {
      var $a, $b, TMP_61, self = this, $iter = TMP_60.$$p, block = $iter || nil, perm = nil, used = nil;

      TMP_60.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num);}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61), $a).call($b, "permutation", num)
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $scope.get('Opal').$coerce_to(num, $scope.get('Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        perm = $scope.get('Array').$new(num)
        used = $scope.get('Array').$new(self.length, false)

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, TMP_60.$$arity = -1);

    Opal.defn(self, '$repeated_permutation', TMP_62 = function ːrepeated_permutation(n) {
      var $a, $b, TMP_63, self = this, $iter = TMP_62.$$p, $yield = $iter || nil, num = nil;

      TMP_62.$$p = null;
      num = $scope.get('Opal')['$coerce_to!'](n, $scope.get('Integer'), "to_int");
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this, $c;

        if ((($c = $rb_ge(num, 0)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$size()['$**'](num)
            } else {
            return 0
          }}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $a).call($b, "repeated_permutation", num)
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    
      return self;
    }, TMP_62.$$arity = 1);

    Opal.defn(self, '$pop', TMP_64 = function ːpop(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.pop();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    }, TMP_64.$$arity = -1);

    Opal.defn(self, '$product', TMP_65 = function ːproduct($a_rest) {
      var self = this, args, $iter = TMP_65.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_65.$$p = null;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $scope.get('Opal').$coerce_to(args[i - 1], $scope.get('Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($scope.get('RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, TMP_65.$$arity = -1);

    Opal.defn(self, '$push', TMP_66 = function ːpush($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    }, TMP_66.$$arity = -1);

    Opal.defn(self, '$rassoc', TMP_67 = function ːrassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, TMP_67.$$arity = 1);

    Opal.defn(self, '$reject', TMP_68 = function ːreject() {
      var $a, $b, TMP_69, self = this, $iter = TMP_68.$$p, block = $iter || nil;

      TMP_68.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_69 = function(){var self = TMP_69.$$s || this;

        return self.$size()}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69), $a).call($b, "reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    }, TMP_68.$$arity = 0);

    Opal.defn(self, '$reject!', TMP_70 = function() {
      var $a, $b, TMP_71, $c, self = this, $iter = TMP_70.$$p, block = $iter || nil, original = nil;

      TMP_70.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_71 = function(){var self = TMP_71.$$s || this;

        return self.$size()}, TMP_71.$$s = self, TMP_71.$$arity = 0, TMP_71), $a).call($b, "reject!")
      };
      original = self.$length();
      ($a = ($c = self).$delete_if, $a.$$p = block.$to_proc(), $a).call($c);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    }, TMP_70.$$arity = 0);

    Opal.defn(self, '$replace', TMP_72 = function ːreplace(other) {
      var $a, self = this;

      if ((($a = $scope.get('Array')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.get('Opal').$coerce_to(other, $scope.get('Array'), "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    }, TMP_72.$$arity = 1);

    Opal.defn(self, '$reverse', TMP_73 = function ːreverse() {
      var self = this;

      return self.slice(0).reverse();
    }, TMP_73.$$arity = 0);

    Opal.defn(self, '$reverse!', TMP_74 = function() {
      var self = this;

      return self.reverse();
    }, TMP_74.$$arity = 0);

    Opal.defn(self, '$reverse_each', TMP_75 = function ːreverse_each() {
      var $a, $b, TMP_76, $c, self = this, $iter = TMP_75.$$p, block = $iter || nil;

      TMP_75.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_76 = function(){var self = TMP_76.$$s || this;

        return self.$size()}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76), $a).call($b, "reverse_each")
      };
      ($a = ($c = self.$reverse()).$each, $a.$$p = block.$to_proc(), $a).call($c);
      return self;
    }, TMP_75.$$arity = 0);

    Opal.defn(self, '$rindex', TMP_77 = function ːrindex(object) {
      var self = this, $iter = TMP_77.$$p, block = $iter || nil;

      TMP_77.$$p = null;
      
      var i, value;

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    }, TMP_77.$$arity = -1);

    Opal.defn(self, '$rotate', TMP_78 = function ːrotate(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      n = $scope.get('Opal').$coerce_to(n, $scope.get('Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    
    }, TMP_78.$$arity = -1);

    Opal.defn(self, '$rotate!', TMP_79 = function(cnt) {
      var self = this, ary = nil;

      if (cnt == null) {
        cnt = 1;
      }
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    
      cnt = $scope.get('Opal').$coerce_to(cnt, $scope.get('Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, TMP_79.$$arity = -1);

    (function($base, $super) {
      function $SampleRandom(){};
      var self = $SampleRandom = $klass($base, $super, 'SampleRandom', $SampleRandom);

      var def = self.$$proto, $scope = self.$$scope, TMP_80, TMP_81;

      def.rng = nil;
      Opal.defn(self, '$initialize', TMP_80 = function ːinitialize(rng) {
        var self = this;

        return self.rng = rng;
      }, TMP_80.$$arity = 1);

      return (Opal.defn(self, '$rand', TMP_81 = function ːrand(size) {
        var $a, self = this, random = nil;

        random = $scope.get('Opal').$coerce_to(self.rng.$rand(size), $scope.get('Integer'), "to_int");
        if ((($a = random < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "random value must be >= 0")};
        if ((($a = random < size) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('RangeError'), "random value must be less than Array size")
        };
        return random;
      }, TMP_81.$$arity = 1), nil) && 'rand';
    })($scope.base, null);

    Opal.defn(self, '$sample', TMP_82 = function ːsample(count, options) {
      var $a, $b, self = this, o = nil, rng = nil;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$at($scope.get('Kernel').$rand(self.length))};
      if ((($a = options === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = (o = $scope.get('Opal')['$coerce_to?'](count, $scope.get('Hash'), "to_hash"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          options = o;
          count = nil;
          } else {
          options = nil;
          count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        }
        } else {
        count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
        options = $scope.get('Opal').$coerce_to(options, $scope.get('Hash'), "to_hash");
      };
      if ((($a = (($b = count !== false && count !== nil && count != null) ? count < 0 : count)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "count must be greater than 0")};
      if (options !== false && options !== nil && options != null) {
        rng = options['$[]']("random")};
      if ((($a = (($b = rng !== false && rng !== nil && rng != null) ? rng['$respond_to?']("rand") : rng)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        rng = $scope.get('SampleRandom').$new(rng)
        } else {
        rng = $scope.get('Kernel')
      };
      if (count !== false && count !== nil && count != null) {
        } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $scope.get('Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    
    }, TMP_82.$$arity = -1);

    Opal.defn(self, '$select', TMP_83 = function ːselect() {
      var $a, $b, TMP_84, self = this, $iter = TMP_83.$$p, block = $iter || nil;

      TMP_83.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_84 = function(){var self = TMP_84.$$s || this;

        return self.$size()}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84), $a).call($b, "select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, TMP_83.$$arity = 0);

    Opal.defn(self, '$select!', TMP_85 = function() {
      var $a, $b, TMP_86, $c, self = this, $iter = TMP_85.$$p, block = $iter || nil;

      TMP_85.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_86 = function(){var self = TMP_86.$$s || this;

        return self.$size()}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86), $a).call($b, "select!")
      };
      
      var original = self.length;
      ($a = ($c = self).$keep_if, $a.$$p = block.$to_proc(), $a).call($c);
      return self.length === original ? nil : self;
    
    }, TMP_85.$$arity = 0);

    Opal.defn(self, '$shift', TMP_87 = function ːshift(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.shift();};
      count = $scope.get('Opal').$coerce_to(count, $scope.get('Integer'), "to_int");
      if ((($a = count < 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "negative array size")};
      if ((($a = self.length === 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      return self.splice(0, count);
    }, TMP_87.$$arity = -1);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$shuffle', TMP_88 = function ːshuffle(rng) {
      var self = this;

      return self.$dup().$to_a()['$shuffle!'](rng);
    }, TMP_88.$$arity = -1);

    Opal.defn(self, '$shuffle!', TMP_89 = function(rng) {
      var self = this;

      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $scope.get('Opal')['$coerce_to?'](rng, $scope.get('Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($scope.get('RangeError'), "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($scope.get('RangeError'), "random number too big " + (j))
          }
        }
        else {
          j = Math.floor(Math.random() * i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, TMP_89.$$arity = -1);

    Opal.alias(self, 'slice', '[]');

    Opal.defn(self, '$slice!', TMP_90 = function(index, length) {
      var $a, self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      result = nil;
      if ((($a = length === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $scope.get('Range')['$==='](index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          range = index;
          result = self['$[]'](range);
          range_start = $scope.get('Opal').$coerce_to(range.$begin(), $scope.get('Integer'), "to_int");
          range_end = $scope.get('Opal').$coerce_to(range.$end(), $scope.get('Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.exclude) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.exclude) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        
          } else {
          start = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        
        }
        } else {
        start = $scope.get('Opal').$coerce_to(index, $scope.get('Integer'), "to_int");
        length = $scope.get('Opal').$coerce_to(length, $scope.get('Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      
      };
      return result;
    }, TMP_90.$$arity = -2);

    Opal.defn(self, '$sort', TMP_91 = function ːsort() {
      var $a, self = this, $iter = TMP_91.$$p, block = $iter || nil;

      TMP_91.$$p = null;
      if ((($a = self.length > 1) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise($scope.get('ArgumentError'), "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, TMP_91.$$arity = 0);

    Opal.defn(self, '$sort!', TMP_92 = function() {
      var $a, $b, self = this, $iter = TMP_92.$$p, block = $iter || nil;

      TMP_92.$$p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a.$$p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, TMP_92.$$arity = 0);

    Opal.defn(self, '$sort_by!', TMP_93 = function() {
      var $a, $b, TMP_94, $c, self = this, $iter = TMP_93.$$p, block = $iter || nil;

      TMP_93.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_94 = function(){var self = TMP_94.$$s || this;

        return self.$size()}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94), $a).call($b, "sort_by!")
      };
      return self.$replace(($a = ($c = self).$sort_by, $a.$$p = block.$to_proc(), $a).call($c));
    }, TMP_93.$$arity = 0);

    Opal.defn(self, '$take', TMP_95 = function ːtake(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($scope.get('ArgumentError'));
      }

      return self.slice(0, count);
    ;
    }, TMP_95.$$arity = 1);

    Opal.defn(self, '$take_while', TMP_96 = function ːtake_while() {
      var self = this, $iter = TMP_96.$$p, block = $iter || nil;

      TMP_96.$$p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    }, TMP_96.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_97 = function ːto_a() {
      var self = this;

      return self;
    }, TMP_97.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    Opal.defn(self, '$to_h', TMP_98 = function ːto_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $scope.get('Opal')['$coerce_to?'](self[i], $scope.get('Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($scope.get('TypeError'), "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($scope.get('ArgumentError'), "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    ;
    }, TMP_98.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$transpose', TMP_101 = function ːtranspose() {
      var $a, $b, TMP_99, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a.$$p = (TMP_99 = function(row){var self = TMP_99.$$s || this, $c, $d, TMP_100;
if (row == null) row = nil;
      if ((($c = $scope.get('Array')['$==='](row)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          row = row.$to_a()
          } else {
          row = $scope.get('Opal').$coerce_to(row, $scope.get('Array'), "to_ary").$to_a()
        };
        ((($c = max) !== false && $c !== nil && $c != null) ? $c : max = row.length);
        if ((($c = (row.length)['$!='](max)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          self.$raise($scope.get('IndexError'), "element size differs (" + (row.length) + " should be " + (max))};
        return ($c = ($d = (row.length)).$times, $c.$$p = (TMP_100 = function(i){var self = TMP_100.$$s || this, $e, $f, $g, entry = nil;
if (i == null) i = nil;
        entry = (($e = i, $f = result, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, []))));
          return entry['$<<'](row.$at(i));}, TMP_100.$$s = self, TMP_100.$$arity = 1, TMP_100), $c).call($d);}, TMP_99.$$s = self, TMP_99.$$arity = 1, TMP_99), $a).call($b);
      return result;
    }, TMP_101.$$arity = 0);

    Opal.defn(self, '$uniq', TMP_102 = function ːuniq() {
      var self = this, $iter = TMP_102.$$p, block = $iter || nil;

      TMP_102.$$p = null;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    ;
    }, TMP_102.$$arity = 0);

    Opal.defn(self, '$uniq!', TMP_103 = function() {
      var self = this, $iter = TMP_103.$$p, block = $iter || nil;

      TMP_103.$$p = null;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, TMP_103.$$arity = 0);

    Opal.defn(self, '$unshift', TMP_104 = function ːunshift($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    }, TMP_104.$$arity = -1);

    Opal.defn(self, '$values_at', TMP_107 = function ːvalues_at($a_rest) {
      var $b, $c, TMP_105, self = this, args, out = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      out = [];
      ($b = ($c = args).$each, $b.$$p = (TMP_105 = function(elem){var self = TMP_105.$$s || this, $a, $d, TMP_106, finish = nil, start = nil, i = nil;
if (elem == null) elem = nil;
      if ((($a = elem['$kind_of?']($scope.get('Range'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          finish = $scope.get('Opal').$coerce_to(elem.$last(), $scope.get('Integer'), "to_int");
          start = $scope.get('Opal').$coerce_to(elem.$first(), $scope.get('Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        
          return ($a = ($d = start).$upto, $a.$$p = (TMP_106 = function(i){var self = TMP_106.$$s || this;
if (i == null) i = nil;
          return out['$<<'](self.$at(i))}, TMP_106.$$s = self, TMP_106.$$arity = 1, TMP_106), $a).call($d, finish);
          } else {
          i = $scope.get('Opal').$coerce_to(elem, $scope.get('Integer'), "to_int");
          return out['$<<'](self.$at(i));
        }}, TMP_105.$$s = self, TMP_105.$$arity = 1, TMP_105), $b).call($c);
      return out;
    }, TMP_107.$$arity = -1);

    Opal.defn(self, '$zip', TMP_108 = function ːzip($a_rest) {
      var $b, self = this, others, $iter = TMP_108.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      others = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        others[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_108.$$p = null;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = (((($b = $scope.get('Opal')['$coerce_to?'](o, $scope.get('Array'), "to_ary")) !== false && $b !== nil && $b != null) ? $b : $scope.get('Opal')['$coerce_to!'](o, $scope.get('Enumerator'), "each"))).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, TMP_108.$$arity = -1);

    Opal.defs(self, '$inherited', TMP_109 = function ːinherited(klass) {
      var self = this;

      
      klass.$$proto.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, TMP_109.$$arity = 1);

    Opal.defn(self, '$instance_variables', TMP_111 = function ːinstance_variables() {
      var $a, $b, TMP_110, $c, $d, self = this, $iter = TMP_111.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_111.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ($a = ($b = ($c = ($d = self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_111, false)), $c.$$p = $iter, $c).apply($d, $zuper)).$reject, $a.$$p = (TMP_110 = function(ivar){var self = TMP_110.$$s || this, $c;
if (ivar == null) ivar = nil;
      return ((($c = /^@\d+$/.test(ivar)) !== false && $c !== nil && $c != null) ? $c : ivar['$==']("@length"))}, TMP_110.$$s = self, TMP_110.$$arity = 1, TMP_110), $a).call($b);
    }, TMP_111.$$arity = 0);

    return $scope.get('Opal').$pristine(self, "allocate", "copy_instance_variables", "initialize_dup");
  })($scope.base, Array);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$==', '$coerce_to!', '$lambda?', '$abs', '$arity', '$call', '$enum_for', '$size', '$inspect', '$flatten', '$eql?', '$default', '$to_proc', '$dup', '$===', '$default_proc', '$default_proc=', '$default=', '$alias_method']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_20, TMP_22, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_44, TMP_46, TMP_47, TMP_49, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55;

    self.$include($scope.get('Enumerable'));

    def.$$is_hash = true;

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, argv;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      argv = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        argv[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $scope.get('Opal')['$coerce_to?'](argv['$[]'](0), $scope.get('Array'), "to_ary");
        if (argv === nil) {
          self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($scope.get('ArgumentError'), "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($scope.get('ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, TMP_1.$$arity = -1);

    Opal.defs(self, '$allocate', TMP_2 = function ːallocate() {
      var self = this;

      
      var hash = new self.$$alloc();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, TMP_2.$$arity = 0);

    Opal.defs(self, '$try_convert', TMP_3 = function ːtry_convert(obj) {
      var self = this;

      return $scope.get('Opal')['$coerce_to?'](obj, $scope.get('Hash'), "to_hash");
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(defaults) {
      var self = this, $iter = TMP_4.$$p, block = $iter || nil;

      TMP_4.$$p = null;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;
    ;
      return self;
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$[]', TMP_6 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_7 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, TMP_7.$$arity = 2);

    Opal.defn(self, '$assoc', TMP_8 = function ːassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$clear', TMP_9 = function ːclear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$clone', TMP_10 = function ːclone() {
      var self = this;

      
      var hash = new self.$$class.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$default', TMP_11 = function(key) {
      var self = this;

      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$default=', TMP_12 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$default_proc', TMP_13 = function ːdefault_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$default_proc=', TMP_14 = function(proc) {
      var self = this;

      
      if (proc !== nil) {
        proc = $scope.get('Opal')['$coerce_to!'](proc, $scope.get('Proc'), "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() !== 2) {
          self.$raise($scope.get('TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return proc;
    ;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$delete', TMP_15 = function(key) {
      var self = this, $iter = TMP_15.$$p, block = $iter || nil;

      TMP_15.$$p = null;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block.$call(key);
      }

      return nil;
    
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_16 = function ːdelete_if() {
      var $a, $b, TMP_17, self = this, $iter = TMP_16.$$p, block = $iter || nil;

      TMP_16.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

        return self.$size()}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b, "delete_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    }, TMP_16.$$arity = 0);

    Opal.alias(self, 'dup', 'clone');

    Opal.defn(self, '$each', TMP_18 = function ːeach() {
      var $a, $b, TMP_19, self = this, $iter = TMP_18.$$p, block = $iter || nil;

      TMP_18.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

        return self.$size()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($b, "each")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$each_key', TMP_20 = function ːeach_key() {
      var $a, $b, TMP_21, self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, "each_key")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'each_pair', 'each');

    Opal.defn(self, '$each_value', TMP_22 = function ːeach_value() {
      var $a, $b, TMP_23, self = this, $iter = TMP_22.$$p, block = $iter || nil;

      TMP_22.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;

        return self.$size()}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b, "each_value")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_24 = function() {
      var self = this;

      return self.$$keys.length === 0;
    }, TMP_24.$$arity = 0);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$fetch', TMP_25 = function ːfetch(key, defaults) {
      var self = this, $iter = TMP_25.$$p, block = $iter || nil;

      TMP_25.$$p = null;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    
      return self.$raise($scope.get('KeyError'), "key not found: " + (key.$inspect()));
    }, TMP_25.$$arity = -2);

    Opal.defn(self, '$flatten', TMP_26 = function ːflatten(level) {
      var self = this;

      if (level == null) {
        level = 1;
      }
      level = $scope.get('Opal')['$coerce_to!'](level, $scope.get('Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_26.$$arity = -1);

    Opal.defn(self, '$has_key?', TMP_27 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_value?', TMP_28 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$hash', TMP_29 = function ːhash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = {};
        }

        if (Opal.hash_ids.hasOwnProperty(hash_id)) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          if (Opal.hash_ids.hasOwnProperty(key)) {
            item = Opal.hash_ids[key];
            if (self['$eql?'](item)) {
              return 'self';
            }
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          delete Opal.hash_ids;
        }
      }
    
    }, TMP_29.$$arity = 0);

    Opal.alias(self, 'include?', 'has_key?');

    Opal.defn(self, '$index', TMP_30 = function ːindex(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$indexes', TMP_31 = function ːindexes($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    
    }, TMP_31.$$arity = -1);

    Opal.alias(self, 'indices', 'indexes');

    var inspect_ids;

    Opal.defn(self, '$inspect', TMP_32 = function ːinspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$invert', TMP_33 = function ːinvert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$keep_if', TMP_34 = function ːkeep_if() {
      var $a, $b, TMP_35, self = this, $iter = TMP_34.$$p, block = $iter || nil;

      TMP_34.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this;

        return self.$size()}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $a).call($b, "keep_if")
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    
    }, TMP_34.$$arity = 0);

    Opal.alias(self, 'key', 'index');

    Opal.alias(self, 'key?', 'has_key?');

    Opal.defn(self, '$keys', TMP_36 = function ːkeys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$length', TMP_37 = function ːlength() {
      var self = this;

      return self.$$keys.length;
    }, TMP_37.$$arity = 0);

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$merge', TMP_38 = function ːmerge(other) {
      var $a, $b, self = this, $iter = TMP_38.$$p, block = $iter || nil;

      TMP_38.$$p = null;
      return ($a = ($b = self.$dup())['$merge!'], $a.$$p = block.$to_proc(), $a).call($b, other);
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$merge!', TMP_39 = function(other) {
      var self = this, $iter = TMP_39.$$p, block = $iter || nil;

      TMP_39.$$p = null;
      
      if (!$scope.get('Hash')['$==='](other)) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    }, TMP_39.$$arity = 1);

    Opal.defn(self, '$rassoc', TMP_40 = function ːrassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$rehash', TMP_41 = function ːrehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, TMP_41.$$arity = 0);

    Opal.defn(self, '$reject', TMP_42 = function ːreject() {
      var $a, $b, TMP_43, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      TMP_42.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_43 = function(){var self = TMP_43.$$s || this;

        return self.$size()}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43), $a).call($b, "reject")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$reject!', TMP_44 = function() {
      var $a, $b, TMP_45, self = this, $iter = TMP_44.$$p, block = $iter || nil;

      TMP_44.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_45 = function(){var self = TMP_45.$$s || this;

        return self.$size()}, TMP_45.$$s = self, TMP_45.$$arity = 0, TMP_45), $a).call($b, "reject!")
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$replace', TMP_46 = function ːreplace(other) {
      var $a, $b, self = this;

      other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    
      if ((($a = other.$default_proc()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        (($a = [other.$default_proc()]), $b = self, $b['$default_proc='].apply($b, $a), $a[$a.length-1])
        } else {
        (($a = [other.$default()]), $b = self, $b['$default='].apply($b, $a), $a[$a.length-1])
      };
      return self;
    }, TMP_46.$$arity = 1);

    Opal.defn(self, '$select', TMP_47 = function ːselect() {
      var $a, $b, TMP_48, self = this, $iter = TMP_47.$$p, block = $iter || nil;

      TMP_47.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_48 = function(){var self = TMP_48.$$s || this;

        return self.$size()}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48), $a).call($b, "select")
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$select!', TMP_49 = function() {
      var $a, $b, TMP_50, self = this, $iter = TMP_49.$$p, block = $iter || nil;

      TMP_49.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;

        return self.$size()}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $a).call($b, "select!")
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    
    }, TMP_49.$$arity = 0);

    Opal.defn(self, '$shift', TMP_51 = function ːshift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, TMP_51.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    self.$alias_method("store", "[]=");

    Opal.defn(self, '$to_a', TMP_52 = function ːto_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$to_h', TMP_53 = function ːto_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash.$$alloc();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, TMP_53.$$arity = 0);

    Opal.defn(self, '$to_hash', TMP_54 = function ːto_hash() {
      var self = this;

      return self;
    }, TMP_54.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.alias(self, 'update', 'merge!');

    Opal.alias(self, 'value?', 'has_value?');

    Opal.alias(self, 'values_at', 'indexes');

    return (Opal.defn(self, '$values', TMP_55 = function ːvalues() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, TMP_55.$$arity = 0), nil) && 'values';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$-@', '$size', '$<=', '$>=']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Number(){};
    var self = $Number = $klass($base, $super, 'Number', $Number);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_61, TMP_62, TMP_63, TMP_64, TMP_65, TMP_66, TMP_67;

    $scope.get('Opal').$bridge(self, Number);

    Number.prototype.$$is_number = true;

    Opal.defn(self, '$coerce', TMP_1 = function ːcoerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$scope.get('Opal')['$coerce_to!'](other, $scope.get('Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($scope.get('TypeError'), "can't convert " + (other.$class()) + " into Float");
      }
    ;
    }, TMP_1.$$arity = 1);

    Opal.defn(self, '$__id__', TMP_2 = function ː__id__() {
      var self = this;

      return (self * 2) + 1;
    }, TMP_2.$$arity = 0);

    Opal.alias(self, 'object_id', '__id__');

    Opal.defn(self, '$+', TMP_3 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$-', TMP_4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$*', TMP_5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$/', TMP_6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, TMP_6.$$arity = 1);

    Opal.alias(self, 'fdiv', '/');

    Opal.defn(self, '$%', TMP_7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($scope.get('ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$&', TMP_8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$|', TMP_9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$^', TMP_10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$<', TMP_11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$<=', TMP_12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$>', TMP_13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$>=', TMP_14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, TMP_14.$$arity = 1);

    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  

    Opal.defn(self, '$<=>', TMP_15 = function(other) {
      var self = this;

      try {
        
      return spaceship_operator(self, other);
    
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$<<', TMP_16 = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$>>', TMP_17 = function(count) {
      var self = this;

      count = $scope.get('Opal')['$coerce_to!'](count, $scope.get('Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$[]', TMP_18 = function(bit) {
      var self = this;

      bit = $scope.get('Opal')['$coerce_to!'](bit, $scope.get('Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$+@', TMP_19 = function() {
      var self = this;

      return +self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$-@', TMP_20 = function() {
      var self = this;

      return -self;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$~', TMP_21 = function() {
      var self = this;

      return ~self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$**', TMP_22 = function(other) {
      var $a, $b, $c, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ($scope.get('Integer')['$==='](self))['$!']()) !== false && $b !== nil && $b != null) ? $b : $rb_gt(other, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return Math.pow(self, other);
          } else {
          return $scope.get('Rational').$new(self, 1)['$**'](other)
        }
      } else if ((($a = (($b = $rb_lt(self, 0)) ? (((($c = $scope.get('Float')['$==='](other)) !== false && $c !== nil && $c != null) ? $c : $scope.get('Rational')['$==='](other))) : $rb_lt(self, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ((($a = other.$$is_number != null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return Math.pow(self, other);
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$==', TMP_23 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    }, TMP_23.$$arity = 1);

    Opal.defn(self, '$abs', TMP_24 = function ːabs() {
      var self = this;

      return Math.abs(self);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_25 = function ːabs2() {
      var self = this;

      return Math.abs(self * self);
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$angle', TMP_26 = function ːangle() {
      var $a, self = this;

      if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.alias(self, 'phase', 'angle');

    Opal.defn(self, '$bit_length', TMP_27 = function ːbit_length() {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('NoMethodError').$new("undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$ceil', TMP_28 = function ːceil() {
      var self = this;

      return Math.ceil(self);
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$chr', TMP_29 = function ːchr(encoding) {
      var self = this;

      return String.fromCharCode(self);
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$denominator', TMP_30 = function ːdenominator() {
      var $a, $b, self = this, $iter = TMP_30.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_30.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 1
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'denominator', TMP_30, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$downto', TMP_31 = function ːdownto(stop) {
      var $a, $b, TMP_32, self = this, $iter = TMP_31.$$p, block = $iter || nil;

      TMP_31.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $c;

        if ((($c = $scope.get('Numeric')['$==='](stop)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($c = $rb_gt(stop, self)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $a).call($b, "downto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, TMP_31.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.defn(self, '$equal?', TMP_33 = function(other) {
      var $a, self = this;

      return ((($a = self['$=='](other)) !== false && $a !== nil && $a != null) ? $a : isNaN(self) && isNaN(other));
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$even?', TMP_34 = function() {
      var self = this;

      return self % 2 === 0;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$floor', TMP_35 = function ːfloor() {
      var self = this;

      return Math.floor(self);
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$gcd', TMP_36 = function ːgcd(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    }, TMP_36.$$arity = 1);

    Opal.defn(self, '$gcdlcm', TMP_37 = function ːgcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    }, TMP_37.$$arity = 1);

    Opal.defn(self, '$integer?', TMP_38 = function() {
      var self = this;

      return self % 1 === 0;
    }, TMP_38.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_39 = function(klass) {
      var $a, $b, self = this, $iter = TMP_39.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_39.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'is_a?', TMP_39, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_40 = function(klass) {
      var $a, $b, self = this, $iter = TMP_40.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_40.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = (($b = klass['$==']($scope.get('Fixnum'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Fixnum')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Integer'))) ? $scope.get('Integer')['$==='](self) : klass['$==']($scope.get('Integer')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.get('Float'))) ? $scope.get('Float')['$==='](self) : klass['$==']($scope.get('Float')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true};
      return ($a = ($b = self, Opal.find_super_dispatcher(self, 'instance_of?', TMP_40, false)), $a.$$p = $iter, $a).apply($b, $zuper);
    }, TMP_40.$$arity = 1);

    Opal.defn(self, '$lcm', TMP_41 = function ːlcm(other) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    }, TMP_41.$$arity = 1);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.alias(self, 'modulo', '%');

    Opal.defn(self, '$next', TMP_42 = function ːnext() {
      var self = this;

      return self + 1;
    }, TMP_42.$$arity = 0);

    Opal.defn(self, '$nonzero?', TMP_43 = function() {
      var self = this;

      return self == 0 ? nil : self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$numerator', TMP_44 = function ːnumerator() {
      var $a, $b, self = this, $iter = TMP_44.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_44.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'numerator', TMP_44, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_44.$$arity = 0);

    Opal.defn(self, '$odd?', TMP_45 = function() {
      var self = this;

      return self % 2 !== 0;
    }, TMP_45.$$arity = 0);

    Opal.defn(self, '$ord', TMP_46 = function ːord() {
      var self = this;

      return self;
    }, TMP_46.$$arity = 0);

    Opal.defn(self, '$pred', TMP_47 = function ːpred() {
      var self = this;

      return self - 1;
    }, TMP_47.$$arity = 0);

    Opal.defn(self, '$quo', TMP_48 = function ːquo(other) {
      var $a, $b, self = this, $iter = TMP_48.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_48.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'quo', TMP_48, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return $rb_divide(self, other)
      };
    }, TMP_48.$$arity = 1);

    Opal.defn(self, '$rationalize', TMP_49 = function ːrationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
      } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
      } else if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = eps == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), n = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        n = $rb_minus(n, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return $scope.get('Rational').$new($rb_times(2, f), (1)['$<<'](($rb_minus(1, n)))).$rationalize($scope.get('Rational').$new(1, (1)['$<<'](($rb_minus(1, n)))));
        } else {
        return self.$to_r().$rationalize(eps)
      };
    }, TMP_49.$$arity = -1);

    Opal.defn(self, '$round', TMP_50 = function ːround(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ndigits == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = ($b = $scope.get('Float')['$==='](ndigits), $b !== false && $b !== nil && $b != null ?ndigits['$infinite?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "Infinity")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits, $scope.get('Integer'), "to_int");
        if ((($a = $rb_lt(ndigits, (($scope.get('Integer')).$$scope.get('MIN')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('RangeError'), "out of bounds")};
        if ((($a = ndigits >= 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
        } else {
        if ((($a = ($b = self['$nan?'](), $b !== false && $b !== nil && $b != null ?ndigits == null : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('FloatDomainError'), "NaN")};
        ndigits = $scope.get('Opal')['$coerce_to!'](ndigits || 0, $scope.get('Integer'), "to_int");
        if ((($a = $rb_le(ndigits, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$nan?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('RangeError'), "NaN")
          } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise($scope.get('FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : self['$infinite?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), _ = ($a[0] == null ? nil : $a[0]), exp = ($a[1] == null ? nil : $a[1]), $b;
        if ((($a = $rb_ge(ndigits, $rb_minus(($rb_plus((($scope.get('Float')).$$scope.get('DIG')), 2)), ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $rb_divide(exp, 4)
          } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self};
        if ((($a = $rb_lt(ndigits, ((function() {if ((($b = $rb_gt(exp, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $rb_plus($rb_divide(exp, 3), 1)
          } else {
          return $rb_divide(exp, 4)
        }; return nil; })())['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);
      };
    }, TMP_50.$$arity = -1);

    Opal.defn(self, '$step', TMP_51 = function ːstep(limit, step) {
      var $a, self = this, $iter = TMP_51.$$p, block = $iter || nil;

      if (step == null) {
        step = 1;
      }
      TMP_51.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "step cannot be 0")};
      
      var value = self;

      if (limit === Infinity || limit === -Infinity) {
        block(value);
        return self;
      }

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    }, TMP_51.$$arity = -2);

    Opal.alias(self, 'succ', 'next');

    Opal.defn(self, '$times', TMP_52 = function ːtimes() {
      var $a, $b, TMP_53, self = this, $iter = TMP_52.$$p, block = $iter || nil;

      TMP_52.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_53 = function(){var self = TMP_53.$$s || this;

        return self}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53), $a).call($b, "times")
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    
      return self;
    }, TMP_52.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_54 = function ːto_f() {
      var self = this;

      return self;
    }, TMP_54.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_55 = function ːto_i() {
      var self = this;

      return parseInt(self, 10);
    }, TMP_55.$$arity = 0);

    Opal.alias(self, 'to_int', 'to_i');

    Opal.defn(self, '$to_r', TMP_56 = function ːto_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ((($a = $scope.get('Integer')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Rational').$new(self, 1)
        } else {
        $b = $scope.get('Math').$frexp(self), $a = Opal.to_ary($b), f = ($a[0] == null ? nil : $a[0]), e = ($a[1] == null ? nil : $a[1]), $b;
        f = $scope.get('Math').$ldexp(f, (($scope.get('Float')).$$scope.get('MANT_DIG'))).$to_i();
        e = $rb_minus(e, (($scope.get('Float')).$$scope.get('MANT_DIG')));
        return ($rb_times(f, ((($scope.get('Float')).$$scope.get('RADIX'))['$**'](e)))).$to_r();
      };
    }, TMP_56.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_57 = function ːto_s(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10;
      }
      if ((($a = ((($b = $rb_lt(base, 2)) !== false && $b !== nil && $b != null) ? $b : $rb_gt(base, 36))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "base must be between 2 and 36")};
      return self.toString(base);
    }, TMP_57.$$arity = -1);

    Opal.alias(self, 'truncate', 'to_i');

    Opal.alias(self, 'inspect', 'to_s');

    Opal.defn(self, '$divmod', TMP_58 = function ːdivmod(other) {
      var $a, $b, self = this, $iter = TMP_58.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_58.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if ((($a = ((($b = self['$nan?']()) !== false && $b !== nil && $b != null) ? $b : other['$nan?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "NaN")
      } else if ((($a = self['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('FloatDomainError'), "Infinity")
        } else {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'divmod', TMP_58, false)), $a.$$p = $iter, $a).apply($b, $zuper)
      };
    }, TMP_58.$$arity = 1);

    Opal.defn(self, '$upto', TMP_59 = function ːupto(stop) {
      var $a, $b, TMP_60, self = this, $iter = TMP_59.$$p, block = $iter || nil;

      TMP_59.$$p = null;
      if ((block !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_60 = function(){var self = TMP_60.$$s || this, $c;

        if ((($c = $scope.get('Numeric')['$==='](stop)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ((($c = $rb_lt(stop, self)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return 0
            } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, TMP_60.$$s = self, TMP_60.$$arity = 0, TMP_60), $a).call($b, "upto", stop)
      };
      
      if (!stop.$$is_number) {
        self.$raise($scope.get('ArgumentError'), "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, TMP_59.$$arity = 1);

    Opal.defn(self, '$zero?', TMP_61 = function() {
      var self = this;

      return self == 0;
    }, TMP_61.$$arity = 0);

    Opal.defn(self, '$size', TMP_62 = function ːsize() {
      var self = this;

      return 4;
    }, TMP_62.$$arity = 0);

    Opal.defn(self, '$nan?', TMP_63 = function() {
      var self = this;

      return isNaN(self);
    }, TMP_63.$$arity = 0);

    Opal.defn(self, '$finite?', TMP_64 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, TMP_64.$$arity = 0);

    Opal.defn(self, '$infinite?', TMP_65 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, TMP_65.$$arity = 0);

    Opal.defn(self, '$positive?', TMP_66 = function() {
      var self = this;

      return self == Infinity || 1 / self > 0;
    }, TMP_66.$$arity = 0);

    return (Opal.defn(self, '$negative?', TMP_67 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, TMP_67.$$arity = 0), nil) && 'negative?';
  })($scope.base, $scope.get('Numeric'));
  Opal.cdecl($scope, 'Fixnum', $scope.get('Number'));
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self.$$proto, $scope = self.$$scope, TMP_68;

    Opal.defs(self, '$===', TMP_68 = function(other) {
      var self = this;

      
      if (!other.$$is_number) {
        return false;
      }

      return (other % 1) === 0;
    
    }, TMP_68.$$arity = 1);

    Opal.cdecl($scope, 'MAX', Math.pow(2, 30) - 1);

    return Opal.cdecl($scope, 'MIN', -Math.pow(2, 30));
  })($scope.base, $scope.get('Numeric'));
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self.$$proto, $scope = self.$$scope, TMP_69, $a;

    Opal.defs(self, '$===', TMP_69 = function(other) {
      var self = this;

      return !!other.$$is_number;
    }, TMP_69.$$arity = 1);

    Opal.cdecl($scope, 'INFINITY', Infinity);

    Opal.cdecl($scope, 'MAX', Number.MAX_VALUE);

    Opal.cdecl($scope, 'MIN', Number.MIN_VALUE);

    Opal.cdecl($scope, 'NAN', NaN);

    Opal.cdecl($scope, 'DIG', 15);

    Opal.cdecl($scope, 'MANT_DIG', 53);

    Opal.cdecl($scope, 'RADIX', 2);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return Opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return Opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })($scope.base, $scope.get('Numeric'));
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$<=>', '$raise', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$inspect', '$[]']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.begin = def.exclude = def.end = nil;
    self.$include($scope.get('Enumerable'));

    def.$$is_range = true;

    self.$attr_reader("begin", "end");

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(first, last, exclude) {
      var $a, self = this;

      if (exclude == null) {
        exclude = false;
      }
      if ((($a = first['$<=>'](last)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'))
      };
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    }, TMP_1.$$arity = -3);

    Opal.defn(self, '$==', TMP_2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    }, TMP_2.$$arity = 1);

    Opal.defn(self, '$===', TMP_3 = function(value) {
      var self = this;

      return self['$include?'](value);
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$cover?', TMP_4 = function(value) {
      var $a, $b, self = this;

      return ($a = $rb_le(self.begin, value), $a !== false && $a !== nil && $a != null ?((function() {if ((($b = self.exclude) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return $rb_lt(value, self.end)
        } else {
        return $rb_le(value, self.end)
      }; return nil; })()) : $a);
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$each', TMP_5 = function ːeach() {
      var $a, $b, $c, self = this, $iter = TMP_5.$$p, block = $iter || nil, current = nil, last = nil;

      TMP_5.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($scope.get('TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ((($a = self.exclude) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0
        } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        ($a = ($b = self.begin).$upto, $a.$$p = block.$to_proc(), $a).call($b, self.end, self.exclude)
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      while ((($c = $rb_lt(current, last)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
      Opal.yield1(block, current);
      current = current.$succ();};
      if ((($a = ($c = self.exclude['$!'](), $c !== false && $c !== nil && $c != null ?current['$=='](last) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        Opal.yield1(block, current)};
      return self;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_6 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Range')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil && $b != null ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil && $a != null ?self.end['$eql?'](other.$end()) : $a);
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$exclude_end?', TMP_7 = function() {
      var self = this;

      return self.exclude;
    }, TMP_7.$$arity = 0);

    Opal.alias(self, 'first', 'begin');

    Opal.alias(self, 'include?', 'cover?');

    Opal.alias(self, 'last', 'end');

    Opal.defn(self, '$max', TMP_8 = function ːmax() {
      var $a, $b, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'max', TMP_8, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    }, TMP_8.$$arity = 0);

    Opal.alias(self, 'member?', 'cover?');

    Opal.defn(self, '$min', TMP_9 = function ːmin() {
      var $a, $b, self = this, $iter = TMP_9.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_9.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      if (($yield !== nil)) {
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'min', TMP_9, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        } else {
        return self.begin
      };
    }, TMP_9.$$arity = 0);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$size', TMP_10 = function ːsize() {
      var $a, $b, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        _end = $rb_minus(_end, 1)};
      if ((($a = ($b = $scope.get('Numeric')['$==='](_begin), $b !== false && $b !== nil && $b != null ?$scope.get('Numeric')['$==='](_end) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return nil
      };
      if ((($a = $rb_lt(_end, _begin)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return 0};
      infinity = (($scope.get('Float')).$$scope.get('INFINITY'));
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil && $b != null) ? $b : _end.$abs()['$=='](infinity))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$step', TMP_11 = function ːstep(n) {
      var self = this;

      if (n == null) {
        n = 1;
      }
      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$to_s', TMP_12 = function ːto_s() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    }, TMP_12.$$arity = 0);

    Opal.alias(self, 'inspect', 'to_s');

    return (Opal.defn(self, '$marshal_load', TMP_13 = function ːmarshal_load(args) {
      var self = this;

      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return self.exclude = args['$[]']("excl");
    }, TMP_13.$$arity = 1), nil) && 'marshal_load';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

    def.$$is_proc = true;

    def.$$is_lambda = false;

    Opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$call', TMP_2 = function ːcall($a_rest) {
      var self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    
    }, TMP_2.$$arity = -1);

    Opal.alias(self, '[]', 'call');

    Opal.alias(self, '===', 'call');

    Opal.alias(self, 'yield', 'call');

    Opal.defn(self, '$to_proc', TMP_3 = function ːto_proc() {
      var self = this;

      return self;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$lambda?', TMP_4 = function() {
      var self = this;

      return !!self.$$is_lambda;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$arity', TMP_5 = function ːarity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$source_location', TMP_6 = function ːsource_location() {
      var self = this;

      if (self.$$is_curried) { return nil; }
      return nil;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$binding', TMP_7 = function ːbinding() {
      var self = this;

      if (self.$$is_curried) { self.$raise($scope.get('ArgumentError'), "Can't create Binding") };
      return nil;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_8 = function ːparameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    ;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$curry', TMP_9 = function ːcurry(arity) {
      var self = this;

      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $scope.get('Opal')['$coerce_to!'](arity, $scope.get('Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    
    }, TMP_9.$$arity = -1);

    Opal.defn(self, '$dup', TMP_10 = function ːdup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, TMP_10.$$arity = 0);

    return Opal.alias(self, 'clone', 'dup');
  })($scope.base, Function)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    def.method = def.receiver = def.owner = def.name = nil;
    self.$attr_reader("owner", "receiver", "name");

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    }, TMP_1.$$arity = 3);

    Opal.defn(self, '$arity', TMP_2 = function ːarity() {
      var self = this;

      return self.method.$arity();
    }, TMP_2.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_3 = function ːparameters() {
      var self = this;

      return self.method.$$parameters;
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$call', TMP_4 = function ːcall($a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, TMP_4.$$arity = -1);

    Opal.alias(self, '[]', 'call');

    Opal.defn(self, '$unbind', TMP_5 = function ːunbind() {
      var self = this;

      return $scope.get('UnboundMethod').$new(self.owner, self.method, self.name);
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$to_proc', TMP_6 = function ːto_proc() {
      var self = this;

      
      var proc = function () { return self.$call.apply(self, $slice.call(arguments)); };
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      return proc;
    
    }, TMP_6.$$arity = 0);

    return (Opal.defn(self, '$inspect', TMP_7 = function ːinspect() {
      var self = this;

      return "#<Method: " + (self.receiver.$class()) + "#" + (self.name) + ">";
    }, TMP_7.$$arity = 0), nil) && 'inspect';
  })($scope.base, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self.$$proto, $scope = self.$$scope, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    Opal.defn(self, '$initialize', TMP_8 = function ːinitialize(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    }, TMP_8.$$arity = 3);

    Opal.defn(self, '$arity', TMP_9 = function ːarity() {
      var self = this;

      return self.method.$arity();
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$parameters', TMP_10 = function ːparameters() {
      var self = this;

      return self.method.$$parameters;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$bind', TMP_11 = function ːbind(object) {
      var self = this;

      return $scope.get('Method').$new(object, self.method, self.name);
    }, TMP_11.$$arity = 1);

    return (Opal.defn(self, '$inspect', TMP_12 = function ːinspect() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }, TMP_12.$$arity = 0), nil) && 'inspect';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = $gvars["\""] = Opal.loaded_features;
  $gvars.LOAD_PATH = $gvars[":"] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.cdecl($scope, 'ARGV', []);
  Opal.cdecl($scope, 'ARGF', $scope.get('Object').$new());
  Opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return $gvars.SAFE = 0;
};
/* Generated by Opal 0.10.2 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base) {
    var $Opal, self = $Opal = $module($base, 'Opal');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'REGEXP_START', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "^"}; return nil; })());

    Opal.cdecl($scope, 'REGEXP_END', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return "$"}; return nil; })());

    Opal.cdecl($scope, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'INLINE_IDENTIFIER_REGEXP', $scope.get('Regexp').$new("[^" + ($scope.get('FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($scope.get('FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));

    Opal.cdecl($scope, 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");

    Opal.cdecl($scope, 'CONST_NAME_REGEXP', $scope.get('Regexp').$new("" + ($scope.get('REGEXP_START')) + "(::)?[A-Z][^" + ($scope.get('FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($scope.get('REGEXP_END'))));
  })($scope.base)
};
/* Generated by Opal 0.10.2 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/string/inheritance"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect', '$+', '$*', '$map', '$split', '$enum_for', '$each_line', '$to_a', '$%', '$-']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defs(self, '$inherited', TMP_1 = function ːinherited(klass) {
      var self = this, replace = nil;

      replace = $scope.get('Class').$new((($scope.get('String')).$$scope.get('Wrapper')));
      
      klass.$$proto         = replace.$$proto;
      klass.$$proto.$$class = klass;
      klass.$$alloc         = replace.$$alloc;
      klass.$$parent        = (($scope.get('String')).$$scope.get('Wrapper'));

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }, TMP_1.$$arity = 1), nil) && 'inherited'
  })($scope.base, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_15, TMP_16, TMP_17, TMP_19, TMP_20, TMP_21;

    def.literal = nil;
    def.$$is_string = true;

    Opal.defs(self, '$allocate', TMP_2 = function ːallocate(string) {
      var $a, $b, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = "";
      }
      TMP_2.$$p = null;
      obj = ($a = ($b = self, Opal.find_super_dispatcher(self, 'allocate', TMP_2, false, $Wrapper)), $a.$$p = null, $a).call($b);
      obj.literal = string;
      return obj;
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$new', TMP_3 = function($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_3.$$p, block = $iter || nil, obj = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_3.$$p = null;
      obj = self.$allocate();
      ($b = ($c = obj).$initialize, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      return obj;
    }, TMP_3.$$arity = -1);

    Opal.defs(self, '$[]', TMP_4 = function($a_rest) {
      var self = this, objects;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objects = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objects[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$allocate(objects);
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_5 = function ːinitialize(string) {
      var self = this;

      if (string == null) {
        string = "";
      }
      return self.literal = string;
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$method_missing', TMP_6 = function ːmethod_missing($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_6.$$p, block = $iter || nil, result = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_6.$$p = null;
      result = ($b = ($c = self.literal).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
      if ((($b = result.$$is_string != null) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = result == self.literal) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    }, TMP_6.$$arity = -1);

    Opal.defn(self, '$initialize_copy', TMP_7 = function ːinitialize_copy(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_8 = function(name, $a_rest) {
      var $b, $c, $d, self = this, $iter = TMP_8.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_8.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return ((($b = ($c = ($d = self, Opal.find_super_dispatcher(self, 'respond_to?', TMP_8, false)), $c.$$p = $iter, $c).apply($d, $zuper)) !== false && $b !== nil && $b != null) ? $b : self.literal['$respond_to?'](name));
    }, TMP_8.$$arity = -2);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      return self.literal['$=='](other);
    }, TMP_9.$$arity = 1);

    Opal.alias(self, 'eql?', '==');

    Opal.alias(self, '===', '==');

    Opal.defn(self, '$to_s', TMP_10 = function ːto_s() {
      var self = this;

      return self.literal;
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'to_str', 'to_s');

    Opal.defn(self, '$inspect', TMP_11 = function ːinspect() {
      var self = this;

      return self.literal.$inspect();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$+', TMP_12 = function(other) {
      var self = this;

      return $rb_plus(self.literal, other);
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$*', TMP_13 = function(other) {
      var self = this;

      
      var result = $rb_times(self.literal, other);

      if (result.$$is_string) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$split', TMP_15 = function ːsplit(pattern, limit) {
      var $a, $b, TMP_14, self = this;

      return ($a = ($b = self.literal.$split(pattern, limit)).$map, $a.$$p = (TMP_14 = function(str){var self = TMP_14.$$s || this;
if (str == null) str = nil;
      return self.$class().$allocate(str)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$replace', TMP_16 = function ːreplace(string) {
      var self = this;

      return self.literal = string;
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$each_line', TMP_17 = function ːeach_line(separator) {
      var $a, $b, TMP_18, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_17.$$p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_line", separator)
      };
      return ($a = ($b = self.literal).$each_line, $a.$$p = (TMP_18 = function(str){var self = TMP_18.$$s || this;
if (str == null) str = nil;
      return Opal.yield1($yield, self.$class().$allocate(str));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b, separator);
    }, TMP_17.$$arity = -1);

    Opal.defn(self, '$lines', TMP_19 = function ːlines(separator) {
      var $a, $b, self = this, $iter = TMP_19.$$p, block = $iter || nil, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_19.$$p = null;
      e = ($a = ($b = self).$each_line, $a.$$p = block.$to_proc(), $a).call($b, separator);
      if (block !== false && block !== nil && block != null) {
        return self
        } else {
        return e.$to_a()
      };
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$%', TMP_20 = function(data) {
      var self = this;

      return self.literal['$%'](data);
    }, TMP_20.$$arity = 1);

    return (Opal.defn(self, '$instance_variables', TMP_21 = function ːinstance_variables() {
      var $a, $b, self = this, $iter = TMP_21.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

      TMP_21.$$p = null;
      $zuper = [];
      
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return $rb_minus(($a = ($b = self, Opal.find_super_dispatcher(self, 'instance_variables', TMP_21, false)), $a.$$p = $iter, $a).apply($b, $zuper), ["@literal"]);
    }, TMP_21.$$arity = 0), nil) && 'instance_variables';
  })($scope.get('String'), null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $a, $b, TMP_13, $c, TMP_16, $d, TMP_19, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$upcase', '$const_get', '$===', '$==', '$name', '$include?', '$names', '$constants', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$nil?', '$getbyte']);
  self.$require("corelib/string");
  (function($base, $super) {
    function $Encoding(){};
    var self = $Encoding = $klass($base, $super, 'Encoding', $Encoding);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12;

    def.ascii = def.dummy = def.name = nil;
    Opal.defs(self, '$register', TMP_1 = function ːregister(name, options) {
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1.$$p, block = $iter || nil, names = nil, encoding = nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_1.$$p = null;
      names = $rb_plus([name], (((($a = options['$[]']("aliases")) !== false && $a !== nil && $a != null) ? $a : [])));
      encoding = ($a = ($b = $scope.get('Class')).$new, $a.$$p = block.$to_proc(), $a).call($b, self).$new(name, names, ((($a = options['$[]']("ascii")) !== false && $a !== nil && $a != null) ? $a : false), ((($a = options['$[]']("dummy")) !== false && $a !== nil && $a != null) ? $a : false));
      return ($a = ($c = names).$each, $a.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
      return self.$const_set(name.$sub("-", "_"), encoding)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$find', TMP_4 = function ːfind(name) {try {

      var $a, $b, TMP_3, self = this, upcase = nil;

      upcase = name.$upcase();
      ($a = ($b = self.$constants()).$each, $a.$$p = (TMP_3 = function(const$){var self = TMP_3.$$s || this, $c, $d, encoding = nil;
if (const$ == null) const$ = nil;
      encoding = self.$const_get(const$);
        if ((($c = $scope.get('Encoding')['$==='](encoding)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          } else {
          return nil;
        };
        if ((($c = ((($d = encoding.$name()['$=='](upcase)) !== false && $d !== nil && $d != null) ? $d : encoding.$names()['$include?'](upcase))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          Opal.ret(encoding)
          } else {
          return nil
        };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
      return self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (name));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_4.$$arity = 1);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self));

    self.$attr_reader("name", "names");

    Opal.defn(self, '$initialize', TMP_5 = function ːinitialize(name, names, ascii, dummy) {
      var self = this;

      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return self.dummy = dummy;
    }, TMP_5.$$arity = 4);

    Opal.defn(self, '$ascii_compatible?', TMP_6 = function() {
      var self = this;

      return self.ascii;
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$dummy?', TMP_7 = function() {
      var self = this;

      return self.dummy;
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_8 = function ːto_s() {
      var self = this;

      return self.name;
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_9 = function ːinspect() {
      var $a, self = this;

      return "#<Encoding:" + (self.name) + ((function() {if ((($a = self.dummy) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return " (dummy)"
        } else {
        return nil
      }; return nil; })()) + ">";
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_10 = function ːeach_byte($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$getbyte', TMP_11 = function ːgetbyte($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$bytesize', TMP_12 = function ːbytesize($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'));
    }, TMP_12.$$arity = -1);

    (function($base, $super) {
      function $EncodingError(){};
      var self = $EncodingError = $klass($base, $super, 'EncodingError', $EncodingError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('StandardError'));

    return (function($base, $super) {
      function $CompatibilityError(){};
      var self = $CompatibilityError = $klass($base, $super, 'CompatibilityError', $CompatibilityError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('EncodingError'));
  })($scope.base, null);
  ($a = ($b = $scope.get('Encoding')).$register, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, TMP_14, TMP_15;

  Opal.def(self, '$each_byte', TMP_14 = function ːeach_byte(string) {
      var self = this, $iter = TMP_14.$$p, block = $iter || nil;

      TMP_14.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    
    }, TMP_14.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_15 = function ːbytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_15.$$arity = 0), nil) && 'bytesize';}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, "UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true}));
  ($a = ($c = $scope.get('Encoding')).$register, $a.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this, TMP_17, TMP_18;

  Opal.def(self, '$each_byte', TMP_17 = function ːeach_byte(string) {
      var self = this, $iter = TMP_17.$$p, block = $iter || nil;

      TMP_17.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    
    }, TMP_17.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_18 = function ːbytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_18.$$arity = 0), nil) && 'bytesize';}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $a).call($c, "UTF-16LE");
  ($a = ($d = $scope.get('Encoding')).$register, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, TMP_20, TMP_21;

  Opal.def(self, '$each_byte', TMP_20 = function ːeach_byte(string) {
      var self = this, $iter = TMP_20.$$p, block = $iter || nil;

      TMP_20.$$p = null;
      
      for (var i = 0, length = string.length; i < length; i++) {
        Opal.yield1(block, string.charCodeAt(i) & 0xff);
      }
    
    }, TMP_20.$$arity = 1);
    return (Opal.def(self, '$bytesize', TMP_21 = function ːbytesize() {
      var self = this;

      return self.$bytes().$length();
    }, TMP_21.$$arity = 0), nil) && 'bytesize';}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($d, "ASCII-8BIT", $hash2(["aliases", "ascii"], {"aliases": ["BINARY"], "ascii": true}));
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28;

    def.encoding = nil;
    String.prototype.encoding = (($scope.get('Encoding')).$$scope.get('UTF_16LE'));

    Opal.defn(self, '$bytes', TMP_22 = function ːbytes() {
      var self = this;

      return self.$each_byte().$to_a();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$bytesize', TMP_23 = function ːbytesize() {
      var self = this;

      return self.encoding.$bytesize(self);
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$each_byte', TMP_24 = function ːeach_byte() {
      var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

      TMP_24.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_byte")
      };
      ($a = ($b = self.encoding).$each_byte, $a.$$p = block.$to_proc(), $a).call($b, self);
      return self;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$encode', TMP_25 = function ːencode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding);
    }, TMP_25.$$arity = 1);

    Opal.defn(self, '$encoding', TMP_26 = function ːencoding() {
      var self = this;

      return self.encoding;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$force_encoding', TMP_27 = function ːforce_encoding(encoding) {
      var $a, self = this;

      encoding = $scope.get('Opal')['$coerce_to!'](encoding, $scope.get('String'), "to_str");
      encoding = $scope.get('Encoding').$find(encoding);
      if (encoding['$=='](self.encoding)) {
        return self};
      if ((($a = encoding['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('ArgumentError'), "unknown encoding name - " + (encoding))};
      
      var result = new String(self);
      result.encoding = encoding;

      return result;
    
    }, TMP_27.$$arity = 1);

    return (Opal.defn(self, '$getbyte', TMP_28 = function ːgetbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx);
    }, TMP_28.$$arity = 1), nil) && 'getbyte';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base) {
    var $Math, self = $Math = $module($base, 'Math');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, $a, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29;

    Opal.cdecl($scope, 'E', Math.E);

    Opal.cdecl($scope, 'PI', Math.PI);

    Opal.cdecl($scope, 'DomainError', $scope.get('Class').$new($scope.get('StandardError')));

    Opal.defs(self, '$checked', TMP_1 = function ːchecked(method, $a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$float!', TMP_2 = function(value) {
      var self = this;

      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$integer!', TMP_3 = function(value) {
      var self = this;

      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('ArgumentError')])) {
          try {
            return self.$raise($scope.get('Opal').$type_error(value, $scope.get('Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_3.$$arity = 1);

    self.$module_function();

    Opal.defn(self, '$acos', TMP_4 = function ːacos(x) {
      var self = this;

      return $scope.get('Math').$checked("acos", $scope.get('Math')['$float!'](x));
    }, TMP_4.$$arity = 1);

    if ((($a = (typeof(Math.acosh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };

    Opal.defn(self, '$acosh', TMP_5 = function ːacosh(x) {
      var self = this;

      return $scope.get('Math').$checked("acosh", $scope.get('Math')['$float!'](x));
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$asin', TMP_6 = function ːasin(x) {
      var self = this;

      return $scope.get('Math').$checked("asin", $scope.get('Math')['$float!'](x));
    }, TMP_6.$$arity = 1);

    if ((($a = (typeof(Math.asinh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    ;
    };

    Opal.defn(self, '$asinh', TMP_7 = function ːasinh(x) {
      var self = this;

      return $scope.get('Math').$checked("asinh", $scope.get('Math')['$float!'](x));
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$atan', TMP_8 = function ːatan(x) {
      var self = this;

      return $scope.get('Math').$checked("atan", $scope.get('Math')['$float!'](x));
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$atan2', TMP_9 = function ːatan2(y, x) {
      var self = this;

      return $scope.get('Math').$checked("atan2", $scope.get('Math')['$float!'](y), $scope.get('Math')['$float!'](x));
    }, TMP_9.$$arity = 2);

    if ((($a = (typeof(Math.atanh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };

    Opal.defn(self, '$atanh', TMP_10 = function ːatanh(x) {
      var self = this;

      return $scope.get('Math').$checked("atanh", $scope.get('Math')['$float!'](x));
    }, TMP_10.$$arity = 1);

    if ((($a = (typeof(Math.cbrt) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };

    Opal.defn(self, '$cbrt', TMP_11 = function ːcbrt(x) {
      var self = this;

      return $scope.get('Math').$checked("cbrt", $scope.get('Math')['$float!'](x));
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$cos', TMP_12 = function ːcos(x) {
      var self = this;

      return $scope.get('Math').$checked("cos", $scope.get('Math')['$float!'](x));
    }, TMP_12.$$arity = 1);

    if ((($a = (typeof(Math.cosh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$cosh', TMP_13 = function ːcosh(x) {
      var self = this;

      return $scope.get('Math').$checked("cosh", $scope.get('Math')['$float!'](x));
    }, TMP_13.$$arity = 1);

    if ((($a = (typeof(Math.erf) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erf = function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      }
    
    };

    Opal.defn(self, '$erf', TMP_14 = function ːerf(x) {
      var self = this;

      return $scope.get('Math').$checked("erf", $scope.get('Math')['$float!'](x));
    }, TMP_14.$$arity = 1);

    if ((($a = (typeof(Math.erfc) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.erfc = function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      }
    
    };

    Opal.defn(self, '$erfc', TMP_15 = function ːerfc(x) {
      var self = this;

      return $scope.get('Math').$checked("erfc", $scope.get('Math')['$float!'](x));
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$exp', TMP_16 = function ːexp(x) {
      var self = this;

      return $scope.get('Math').$checked("exp", $scope.get('Math')['$float!'](x));
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$frexp', TMP_17 = function ːfrexp(x) {
      var self = this;

      x = $scope.get('Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$gamma', TMP_18 = function ːgamma(n) {
      var self = this;

      n = $scope.get('Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($scope.get('DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($scope.get('Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $scope.get('Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    
    }, TMP_18.$$arity = 1);

    if ((($a = (typeof(Math.hypot) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    ;
    };

    Opal.defn(self, '$hypot', TMP_19 = function ːhypot(x, y) {
      var self = this;

      return $scope.get('Math').$checked("hypot", $scope.get('Math')['$float!'](x), $scope.get('Math')['$float!'](y));
    }, TMP_19.$$arity = 2);

    Opal.defn(self, '$ldexp', TMP_20 = function ːldexp(mantissa, exponent) {
      var self = this;

      mantissa = $scope.get('Math')['$float!'](mantissa);
      exponent = $scope.get('Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($scope.get('RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, TMP_20.$$arity = 2);

    Opal.defn(self, '$lgamma', TMP_21 = function ːlgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($scope.get('Math').$gamma(n))), $scope.get('Math').$gamma(n) < 0 ? -1 : 1];
      }
    ;
    }, TMP_21.$$arity = 1);

    Opal.defn(self, '$log', TMP_22 = function ːlog(x, base) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      if ((($a = base == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x))
        } else {
        if ((($a = $scope.get('String')['$==='](base)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('Opal').$type_error(base, $scope.get('Float')))};
        return $rb_divide($scope.get('Math').$checked("log", $scope.get('Math')['$float!'](x)), $scope.get('Math').$checked("log", $scope.get('Math')['$float!'](base)));
      };
    }, TMP_22.$$arity = -2);

    if ((($a = (typeof(Math.log10) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };

    Opal.defn(self, '$log10', TMP_23 = function ːlog10(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log10", $scope.get('Math')['$float!'](x));
    }, TMP_23.$$arity = 1);

    if ((($a = (typeof(Math.log2) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };

    Opal.defn(self, '$log2', TMP_24 = function ːlog2(x) {
      var $a, self = this;

      if ((($a = $scope.get('String')['$==='](x)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('Opal').$type_error(x, $scope.get('Float')))};
      return $scope.get('Math').$checked("log2", $scope.get('Math')['$float!'](x));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$sin', TMP_25 = function ːsin(x) {
      var self = this;

      return $scope.get('Math').$checked("sin", $scope.get('Math')['$float!'](x));
    }, TMP_25.$$arity = 1);

    if ((($a = (typeof(Math.sinh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };

    Opal.defn(self, '$sinh', TMP_26 = function ːsinh(x) {
      var self = this;

      return $scope.get('Math').$checked("sinh", $scope.get('Math')['$float!'](x));
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$sqrt', TMP_27 = function ːsqrt(x) {
      var self = this;

      return $scope.get('Math').$checked("sqrt", $scope.get('Math')['$float!'](x));
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$tan', TMP_28 = function ːtan(x) {
      var $a, self = this;

      x = $scope.get('Math')['$float!'](x);
      if ((($a = x['$infinite?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('NAN'))};
      return $scope.get('Math').$checked("tan", $scope.get('Math')['$float!'](x));
    }, TMP_28.$$arity = 1);

    if ((($a = (typeof(Math.tanh) !== "undefined")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };

    Opal.defn(self, '$tanh', TMP_29 = function ːtanh(x) {
      var self = this;

      return $scope.get('Math').$checked("tanh", $scope.get('Math')['$float!'](x));
    }, TMP_29.$$arity = 1);
  })($scope.base)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$to_s', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$infinite?']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29;

    def.real = def.imag = nil;
    Opal.defs(self, '$rect', TMP_1 = function ːrect(real, imag) {
      var $a, $b, $c, $d, self = this;

      if (imag == null) {
        imag = 0;
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](real), $d !== false && $d !== nil && $d != null ?real['$real?']() : $d), $c !== false && $c !== nil && $c != null ?$scope.get('Numeric')['$==='](imag) : $c), $b !== false && $b !== nil && $b != null ?imag['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, TMP_1.$$arity = -2);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return Opal.alias(self, 'rectangular', 'rect')
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$polar', TMP_2 = function ːpolar(r, theta) {
      var $a, $b, $c, $d, self = this;

      if (theta == null) {
        theta = 0;
      }
      if ((($a = ($b = ($c = ($d = $scope.get('Numeric')['$==='](r), $d !== false && $d !== nil && $d != null ?r['$real?']() : $d), $c !== false && $c !== nil && $c != null ?$scope.get('Numeric')['$==='](theta) : $c), $b !== false && $b !== nil && $b != null ?theta['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $scope.get('Math').$cos(theta)), $rb_times(r, $scope.get('Math').$sin(theta)));
    }, TMP_2.$$arity = -2);

    self.$attr_reader("real", "imag");

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(real, imag) {
      var self = this;

      if (imag == null) {
        imag = 0;
      }
      self.real = real;
      return self.imag = imag;
    }, TMP_3.$$arity = -2);

    Opal.defn(self, '$coerce', TMP_4 = function ːcoerce(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [other, self]
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return [$scope.get('Complex').$new(other, 0), self]
        } else {
        return self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$==', TMP_5 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
        } else {
        return other['$=='](self)
      };
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$-@', TMP_6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']());
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$+', TMP_7 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("+", other)
      };
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$-', TMP_8 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
        } else {
        return self.$__coerced__("-", other)
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$*', TMP_9 = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
        } else {
        return self.$__coerced__("*", other)
      };
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$/', TMP_10 = function(other) {
      var $a, $b, $c, $d, $e, self = this;

      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = ((($b = ((($c = ((($d = (($e = $scope.get('Number')['$==='](self.real), $e !== false && $e !== nil && $e != null ?self.real['$nan?']() : $e))) !== false && $d !== nil && $d != null) ? $d : (($e = $scope.get('Number')['$==='](self.imag), $e !== false && $e !== nil && $e != null ?self.imag['$nan?']() : $e)))) !== false && $c !== nil && $c != null) ? $c : (($d = $scope.get('Number')['$==='](other.$real()), $d !== false && $d !== nil && $d != null ?other.$real()['$nan?']() : $d)))) !== false && $b !== nil && $b != null) ? $b : (($c = $scope.get('Number')['$==='](other.$imag()), $c !== false && $c !== nil && $c != null ?other.$imag()['$nan?']() : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Complex').$new((($scope.get('Float')).$$scope.get('NAN')), (($scope.get('Float')).$$scope.get('NAN')))
          } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](other), $b !== false && $b !== nil && $b != null ?other['$real?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
        } else {
        return self.$__coerced__("/", other)
      };
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$**', TMP_11 = function(other) {
      var $a, $b, $c, $d, $e, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      if (other['$=='](0)) {
        return $scope.get('Complex').$new(1, 0)};
      if ((($a = $scope.get('Complex')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $scope.get('Math').$exp($rb_minus($rb_times(ore, $scope.get('Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $scope.get('Math').$log(r)));
        return $scope.get('Complex').$polar(nr, ntheta);
      } else if ((($a = $scope.get('Integer')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_gt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ((($b = n['$!='](0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          while ((($c = ($e = n.$divmod(2), $d = Opal.to_ary($e), div = ($d[0] == null ? nil : $d[0]), mod = ($d[1] == null ? nil : $d[1]), $e, mod['$=='](0))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
          n = div;};
          z = $rb_times(z, x);
          n = $rb_minus(n, 1);};
          return z;
          } else {
          return ($rb_divide($scope.get('Rational').$new(1, 1), self))['$**'](other['$-@']())
        }
      } else if ((($a = ((($b = $scope.get('Float')['$==='](other)) !== false && $b !== nil && $b != null) ? $b : $scope.get('Rational')['$==='](other))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        $b = self.$polar(), $a = Opal.to_ary($b), r = ($a[0] == null ? nil : $a[0]), theta = ($a[1] == null ? nil : $a[1]), $b;
        return $scope.get('Complex').$polar(r['$**'](other), $rb_times(theta, other));
        } else {
        return self.$__coerced__("**", other)
      };
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$abs', TMP_12 = function ːabs() {
      var self = this;

      return $scope.get('Math').$hypot(self.real, self.imag);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$abs2', TMP_13 = function ːabs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag));
    }, TMP_13.$$arity = 0);

    Opal.defn(self, '$angle', TMP_14 = function ːangle() {
      var self = this;

      return $scope.get('Math').$atan2(self.imag, self.real);
    }, TMP_14.$$arity = 0);

    Opal.alias(self, 'arg', 'angle');

    Opal.defn(self, '$conj', TMP_15 = function ːconj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']());
    }, TMP_15.$$arity = 0);

    Opal.alias(self, 'conjugate', 'conj');

    Opal.defn(self, '$denominator', TMP_16 = function ːdenominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator());
    }, TMP_16.$$arity = 0);

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$eql?', TMP_17 = function(other) {
      var $a, $b, self = this;

      return ($a = ($b = $scope.get('Complex')['$==='](other), $b !== false && $b !== nil && $b != null ?self.real.$class()['$=='](self.imag.$class()) : $b), $a !== false && $a !== nil && $a != null ?self['$=='](other) : $a);
    }, TMP_17.$$arity = 1);

    Opal.defn(self, '$fdiv', TMP_18 = function ːfdiv(other) {
      var $a, self = this;

      if ((($a = $scope.get('Numeric')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$hash', TMP_19 = function ːhash() {
      var self = this;

      return "Complex:" + (self.real) + ":" + (self.imag);
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'imaginary', 'imag');

    Opal.defn(self, '$inspect', TMP_20 = function ːinspect() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    }, TMP_20.$$arity = 0);

    Opal.alias(self, 'magnitude', 'abs');

    Opal.defn(self, '$numerator', TMP_21 = function ːnumerator() {
      var self = this, d = nil;

      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), ($rb_divide(d, self.real.$denominator()))), $rb_times(self.imag.$numerator(), ($rb_divide(d, self.imag.$denominator()))));
    }, TMP_21.$$arity = 0);

    Opal.alias(self, 'phase', 'arg');

    Opal.defn(self, '$polar', TMP_22 = function ːpolar() {
      var self = this;

      return [self.$abs(), self.$arg()];
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', TMP_23 = function ːrationalize(eps) {
      var $a, self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ((($a = self.imag['$!='](0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('RangeError'), "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, TMP_23.$$arity = -1);

    Opal.defn(self, '$real?', TMP_24 = function() {
      var self = this;

      return false;
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$rect', TMP_25 = function ːrect() {
      var self = this;

      return [self.real, self.imag];
    }, TMP_25.$$arity = 0);

    Opal.alias(self, 'rectangular', 'rect');

    Opal.defn(self, '$to_f', TMP_26 = function ːto_f() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_27 = function ːto_i() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$to_r', TMP_28 = function ːto_r() {
      var self = this;

      if (self.imag['$=='](0)) {
        } else {
        self.$raise($scope.get('RangeError'), "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, TMP_28.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_29 = function ːto_s() {
      var $a, $b, $c, self = this, result = nil;

      result = self.real.$inspect();
      if ((($a = ((($b = (($c = $scope.get('Number')['$==='](self.imag), $c !== false && $c !== nil && $c != null ?self.imag['$nan?']() : $c))) !== false && $b !== nil && $b != null) ? $b : self.imag['$positive?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "+")
        } else {
        result = $rb_plus(result, "-")
      };
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ((($a = ($b = $scope.get('Number')['$==='](self.imag), $b !== false && $b !== nil && $b != null ?(((($c = self.imag['$nan?']()) !== false && $c !== nil && $c != null) ? $c : self.imag['$infinite?']())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, TMP_29.$$arity = 0);

    return Opal.cdecl($scope, 'I', self.$new(0, 1));
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_30;

    Opal.defn(self, '$Complex', TMP_30 = function ːComplex(real, imag) {
      var self = this;

      if (imag == null) {
        imag = nil;
      }
      if (imag !== false && imag !== nil && imag != null) {
        return $scope.get('Complex').$new(real, imag)
        } else {
        return $scope.get('Complex').$new(real, 0)
      };
    }, TMP_30.$$arity = -2)
  })($scope.base);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$attr_reader', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$to_s', '$<=', '$truncate', '$send', '$convert']);
  self.$require("corelib/numeric");
  (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26;

    def.num = def.den = nil;
    Opal.defs(self, '$reduce', TMP_1 = function ːreduce(num, den) {
      var $a, self = this, gcd = nil;

      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
      } else if ((($a = $rb_lt(den, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$convert', TMP_2 = function ːconvert(num, den) {
      var $a, $b, $c, self = this;

      if ((($a = ((($b = num['$nil?']()) !== false && $b !== nil && $b != null) ? $b : den['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "cannot convert nil into Rational")};
      if ((($a = ($b = $scope.get('Integer')['$==='](num), $b !== false && $b !== nil && $b != null ?$scope.get('Integer')['$==='](den) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$reduce(num, den)};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](num)) !== false && $c !== nil && $c != null) ? $c : $scope.get('String')['$==='](num))) !== false && $b !== nil && $b != null) ? $b : $scope.get('Complex')['$==='](num))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        num = num.$to_r()};
      if ((($a = ((($b = ((($c = $scope.get('Float')['$==='](den)) !== false && $c !== nil && $c != null) ? $c : $scope.get('String')['$==='](den))) !== false && $b !== nil && $b != null) ? $b : $scope.get('Complex')['$==='](den))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        den = den.$to_r()};
      if ((($a = ($b = den['$equal?'](1), $b !== false && $b !== nil && $b != null ?($scope.get('Integer')['$==='](num))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Opal')['$coerce_to!'](num, $scope.get('Rational'), "to_r")
      } else if ((($a = ($b = $scope.get('Numeric')['$==='](num), $b !== false && $b !== nil && $b != null ?$scope.get('Numeric')['$==='](den) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $rb_divide(num, den)
        } else {
        return self.$reduce(num, den)
      };
    }, TMP_2.$$arity = 2);

    self.$attr_reader("numerator", "denominator");

    Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(num, den) {
      var self = this;

      self.num = num;
      return self.den = den;
    }, TMP_3.$$arity = 2);

    Opal.defn(self, '$numerator', TMP_4 = function ːnumerator() {
      var self = this;

      return self.num;
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$denominator', TMP_5 = function ːdenominator() {
      var self = this;

      return self.den;
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$coerce', TMP_6 = function ːcoerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return [other, self]}else if ($scope.get('Integer')['$===']($case)) {return [other.$to_r(), self]}else if ($scope.get('Float')['$===']($case)) {return [other, self.$to_f()]}else { return nil }})();
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$==', TMP_7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}else if ($scope.get('Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$=='](other)}else {return other['$=='](self)}})();
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}else if ($scope.get('Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}else {return self.$__coerced__("<=>", other)}})();
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$+', TMP_9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}else {return self.$__coerced__("+", other)}})();
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$-', TMP_10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}else {return self.$__coerced__("-", other)}})();
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$*', TMP_11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}else if ($scope.get('Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}else {return self.$__coerced__("*", other)}})();
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$/', TMP_12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;if ($scope.get('Rational')['$===']($case)) {num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}else if ($scope.get('Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
        } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}else if ($scope.get('Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}else {return self.$__coerced__("/", other)}})();
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$**', TMP_13 = function(other) {
      var $a, $b, self = this, $case = nil;

      return (function() {$case = other;if ($scope.get('Integer')['$===']($case)) {if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Float')).$$scope.get('INFINITY'))
      } else if ((($a = $rb_gt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ((($a = $rb_lt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
        } else {
        return self.$Rational(1, 1)
      }}else if ($scope.get('Float')['$===']($case)) {return self.$to_f()['$**'](other)}else if ($scope.get('Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ((($a = $rb_lt(other, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
          } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ((($a = (($b = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ZeroDivisionError'), "divided by 0")
        } else {
        return self.$to_f()['$**'](other)
      }}else {return self.$__coerced__("**", other)}})();
    }, TMP_13.$$arity = 1);

    Opal.defn(self, '$abs', TMP_14 = function ːabs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs());
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$ceil', TMP_15 = function ːceil(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$ceil()
        } else {
        return self.$with_precision("ceil", precision)
      };
    }, TMP_15.$$arity = -1);

    Opal.alias(self, 'divide', '/');

    Opal.defn(self, '$floor', TMP_16 = function ːfloor(precision) {
      var self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        return (($rb_divide(self.num['$-@'](), self.den))['$-@']()).$floor()
        } else {
        return self.$with_precision("floor", precision)
      };
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$hash', TMP_17 = function ːhash() {
      var self = this;

      return "Rational:" + (self.num) + ":" + (self.den);
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_18 = function ːinspect() {
      var self = this;

      return "(" + (self.$to_s()) + ")";
    }, TMP_18.$$arity = 0);

    Opal.alias(self, 'quo', '/');

    Opal.defn(self, '$rationalize', TMP_19 = function ːrationalize(eps) {
      var self = this;

      
      if (arguments.length > 1) {
        self.$raise($scope.get('ArgumentError'), "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, ($rb_minus(b, k)));
        b  = $rb_divide(1, ($rb_minus(a, k)));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, TMP_19.$$arity = -1);

    Opal.defn(self, '$round', TMP_20 = function ːround(precision) {
      var $a, self = this, num = nil, den = nil, approx = nil;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = ($rb_divide(num, den)).$truncate();
      if ((($a = $rb_lt(self.num, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return approx['$-@']()
        } else {
        return approx
      };
    }, TMP_20.$$arity = -1);

    Opal.defn(self, '$to_f', TMP_21 = function ːto_f() {
      var self = this;

      return $rb_divide(self.num, self.den);
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_22 = function ːto_i() {
      var self = this;

      return self.$truncate();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$to_r', TMP_23 = function ːto_r() {
      var self = this;

      return self;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$to_s', TMP_24 = function ːto_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den);
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$truncate', TMP_25 = function ːtruncate(precision) {
      var $a, self = this;

      if (precision == null) {
        precision = 0;
      }
      if (precision['$=='](0)) {
        if ((($a = $rb_lt(self.num, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$ceil()
          } else {
          return self.$floor()
        }
        } else {
        return self.$with_precision("truncate", precision)
      };
    }, TMP_25.$$arity = -1);

    return (Opal.defn(self, '$with_precision', TMP_26 = function ːwith_precision(method, precision) {
      var $a, self = this, p = nil, s = nil;

      if ((($a = $scope.get('Integer')['$==='](precision)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ((($a = $rb_lt(precision, 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($rb_divide(s.$send(method), p)).$to_i()
        } else {
        return self.$Rational(s.$send(method), p)
      };
    }, TMP_26.$$arity = 2), nil) && 'with_precision';
  })($scope.base, $scope.get('Numeric'));
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_27;

    Opal.defn(self, '$Rational', TMP_27 = function ːRational(numerator, denominator) {
      var self = this;

      if (denominator == null) {
        denominator = 1;
      }
      return $scope.get('Rational').$convert(numerator, denominator);
    }, TMP_27.$$arity = -2)
  })($scope.base);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  self.$require("corelib/comparable");
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_42;

    self.$include($scope.get('Comparable'));

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    Opal.defs(self, '$at', TMP_1 = function ːat(seconds, frac) {
      var self = this;

      
      var result;

      if ($scope.get('Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($scope.get('TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $scope.get('Opal')['$coerce_to!'](seconds, $scope.get('Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $scope.get('Opal')['$coerce_to!'](frac, $scope.get('Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, TMP_1.$$arity = -2);

    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $scope.get('Opal')['$coerce_to!'](year, $scope.get('Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $scope.get('Opal')['$coerce_to!'](month, $scope.get('Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($scope.get('ArgumentError'), "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $scope.get('Opal')['$coerce_to!'](day, $scope.get('Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($scope.get('ArgumentError'), "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $scope.get('Opal')['$coerce_to!'](hour, $scope.get('Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($scope.get('ArgumentError'), "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $scope.get('Opal')['$coerce_to!'](min, $scope.get('Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($scope.get('ArgumentError'), "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $scope.get('Opal')['$coerce_to!'](sec, $scope.get('Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($scope.get('ArgumentError'), "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;

    Opal.defs(self, '$new', TMP_2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (utc_offset == null) {
        utc_offset = nil;
      }
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($scope.get('ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_2.$$arity = -1);

    Opal.defs(self, '$local', TMP_3 = function ːlocal(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$gm', TMP_4 = function ːgm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      if (month == null) {
        month = nil;
      }
      if (day == null) {
        day = nil;
      }
      if (hour == null) {
        hour = nil;
      }
      if (min == null) {
        min = nil;
      }
      if (sec == null) {
        sec = nil;
      }
      if (millisecond == null) {
        millisecond = nil;
      }
      if (_dummy1 == null) {
        _dummy1 = nil;
      }
      if (_dummy2 == null) {
        _dummy2 = nil;
      }
      if (_dummy3 == null) {
        _dummy3 = nil;
      }
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    
    }, TMP_4.$$arity = -2);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      Opal.alias(self, 'mktime', 'local');
      return Opal.alias(self, 'utc', 'gm');
    })(Opal.get_singleton_class(self));

    Opal.defs(self, '$now', TMP_5 = function ːnow() {
      var self = this;

      return self.$new();
    }, TMP_5.$$arity = 0);

    Opal.defn(self, '$+', TMP_6 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$raise($scope.get('TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$-', TMP_7 = function(other) {
      var $a, self = this;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $scope.get('Opal')['$coerce_to!'](other, $scope.get('Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$<=>', TMP_8 = function(other) {
      var $a, self = this, r = nil;

      if ((($a = $scope.get('Time')['$==='](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$to_f()['$<=>'](other.$to_f())
        } else {
        r = other['$<=>'](self);
        if ((($a = r['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
        } else if ((($a = $rb_gt(r, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return -1
        } else if ((($a = $rb_lt(r, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 1
          } else {
          return 0
        };
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$==', TMP_9 = function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$asctime', TMP_10 = function ːasctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    }, TMP_10.$$arity = 0);

    Opal.alias(self, 'ctime', 'asctime');

    Opal.defn(self, '$day', TMP_11 = function ːday() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    }, TMP_11.$$arity = 0);

    Opal.defn(self, '$yday', TMP_12 = function ːyday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      start_of_year = $scope.get('Time').$new(self.$year()).$to_i();
      start_of_day = $scope.get('Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus(($rb_divide(($rb_minus(start_of_day, start_of_year)), one_day)).$round(), 1);
    }, TMP_12.$$arity = 0);

    Opal.defn(self, '$isdst', TMP_13 = function ːisdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'dst?', 'isdst');

    Opal.defn(self, '$dup', TMP_14 = function ːdup() {
      var self = this, copy = nil;

      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_15 = function(other) {
      var $a, self = this;

      return ($a = other['$is_a?']($scope.get('Time')), $a !== false && $a !== nil && $a != null ?(self['$<=>'](other))['$zero?']() : $a);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$friday?', TMP_16 = function() {
      var self = this;

      return self.$wday() == 5;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$hash', TMP_17 = function ːhash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$hour', TMP_18 = function ːhour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$inspect', TMP_19 = function ːinspect() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    }, TMP_19.$$arity = 0);

    Opal.alias(self, 'mday', 'day');

    Opal.defn(self, '$min', TMP_20 = function ːmin() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$mon', TMP_21 = function ːmon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$monday?', TMP_22 = function() {
      var self = this;

      return self.$wday() == 1;
    }, TMP_22.$$arity = 0);

    Opal.alias(self, 'month', 'mon');

    Opal.defn(self, '$saturday?', TMP_23 = function() {
      var self = this;

      return self.$wday() == 6;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$sec', TMP_24 = function ːsec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    }, TMP_24.$$arity = 0);

    Opal.defn(self, '$succ', TMP_25 = function ːsucc() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$usec', TMP_26 = function ːusec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, TMP_26.$$arity = 0);

    Opal.defn(self, '$zone', TMP_27 = function ːzone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1];
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, TMP_27.$$arity = 0);

    Opal.defn(self, '$getgm', TMP_28 = function ːgetgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'getutc', 'getgm');

    Opal.defn(self, '$gmtime', TMP_29 = function ːgmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, TMP_29.$$arity = 0);

    Opal.alias(self, 'utc', 'gmtime');

    Opal.defn(self, '$gmt?', TMP_30 = function() {
      var self = this;

      return self.is_utc === true;
    }, TMP_30.$$arity = 0);

    Opal.defn(self, '$gmt_offset', TMP_31 = function ːgmt_offset() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    }, TMP_31.$$arity = 0);

    Opal.defn(self, '$strftime', TMP_32 = function ːstrftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$sunday?', TMP_33 = function() {
      var self = this;

      return self.$wday() == 0;
    }, TMP_33.$$arity = 0);

    Opal.defn(self, '$thursday?', TMP_34 = function() {
      var self = this;

      return self.$wday() == 4;
    }, TMP_34.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_35 = function ːto_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    }, TMP_35.$$arity = 0);

    Opal.defn(self, '$to_f', TMP_36 = function ːto_f() {
      var self = this;

      return self.getTime() / 1000;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$to_i', TMP_37 = function ːto_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, TMP_37.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$tuesday?', TMP_38 = function() {
      var self = this;

      return self.$wday() == 2;
    }, TMP_38.$$arity = 0);

    Opal.alias(self, 'tv_sec', 'sec');

    Opal.alias(self, 'tv_usec', 'usec');

    Opal.alias(self, 'utc?', 'gmt?');

    Opal.alias(self, 'gmtoff', 'gmt_offset');

    Opal.alias(self, 'utc_offset', 'gmt_offset');

    Opal.defn(self, '$wday', TMP_39 = function ːwday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$wednesday?', TMP_40 = function() {
      var self = this;

      return self.$wday() == 3;
    }, TMP_40.$$arity = 0);

    Opal.defn(self, '$year', TMP_41 = function ːyear() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    }, TMP_41.$$arity = 0);

    return (Opal.defn(self, '$cweek_cyear', TMP_42 = function ːcweek_cyear() {
      var $a, $b, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      jan01 = $scope.get('Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ((($a = ($b = $rb_le(jan01_wday, 4), $b !== false && $b !== nil && $b != null ?jan01_wday['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        offset = $rb_minus(jan01_wday, 1)
        } else {
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = ($rb_divide(($rb_plus(self.$yday(), offset)), 7.0)).$ceil();
      if ((($a = $rb_le(week, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return $scope.get('Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        dec31 = $scope.get('Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ((($a = ($b = $rb_le(dec31_wday, 3), $b !== false && $b !== nil && $b != null ?dec31_wday['$!='](0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, TMP_42.$$arity = 0), nil) && 'cweek_cyear';
  })($scope.base, Date);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$>', '$length', '$class', '$each_with_index', '$[]=', '$[]', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$join', '$inspect', '$each_pair', '$inject', '$flatten', '$to_a', '$values_at']);
  self.$require("corelib/enumerable");
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_8, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_23, TMP_26, TMP_28, TMP_30, TMP_32, TMP_34, TMP_35;

    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$new', TMP_1 = function(const_name, $a_rest) {
      var $b, $c, TMP_2, $d, TMP_3, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, klass = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if (const_name !== false && const_name !== nil && const_name != null) {
        try {
          const_name = $scope.get('Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('TypeError'), $scope.get('NameError')])) {
            try {
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }};
      ($b = ($c = args).$map, $b.$$p = (TMP_2 = function(arg){var self = TMP_2.$$s || this;
if (arg == null) arg = nil;
      return $scope.get('Opal')['$coerce_to!'](arg, $scope.get('String'), "to_str")}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      klass = ($b = ($d = $scope.get('Class')).$new, $b.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this, $a, $e, TMP_4;

      ($a = ($e = args).$each, $a.$$p = (TMP_4 = function(arg){var self = TMP_4.$$s || this;
if (arg == null) arg = nil;
        return self.$define_struct_attribute(arg)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($e);
        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_5;

          Opal.defn(self, '$new', TMP_5 = function($a_rest) {
            var $b, self = this, args, instance = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
            instance = self.$allocate();
            instance.$$data = {};;
            ($b = instance).$initialize.apply($b, Opal.to_a(args));
            return instance;
          }, TMP_5.$$arity = -1);
          return Opal.alias(self, '[]', 'new');
        })(Opal.get_singleton_class(self));}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $b).call($d, self);
      if (block !== false && block !== nil && block != null) {
        ($b = ($e = klass).$module_eval, $b.$$p = block.$to_proc(), $b).call($e)};
      if (const_name !== false && const_name !== nil && const_name != null) {
        $scope.get('Struct').$const_set(const_name, klass)};
      return klass;
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$define_struct_attribute', TMP_8 = function ːdefine_struct_attribute(name) {
      var $a, $b, TMP_6, $c, TMP_7, self = this;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      ($a = ($b = self).$define_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$$data[name];}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b, name);
      return ($a = ($c = self).$define_method, $a.$$p = (TMP_7 = function(value){var self = TMP_7.$$s || this;
if (value == null) value = nil;
      return self.$$data[name] = value;}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c, "" + (name) + "=");
    }, TMP_8.$$arity = 1);

    Opal.defs(self, '$members', TMP_9 = function ːmembers() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.get('Struct'))) {
        self.$raise($scope.get('ArgumentError'), "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil && $a != null) ? $a : self.members = []);
    }, TMP_9.$$arity = 0);

    Opal.defs(self, '$inherited', TMP_11 = function ːinherited(klass) {
      var $a, $b, TMP_10, self = this, members = nil;
      if (self.members == null) self.members = nil;

      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

      return self.members = members}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($b);
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_13 = function ːinitialize($a_rest) {
      var $b, $c, TMP_12, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      if ((($b = $rb_gt(args.$length(), self.$class().$members().$length())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$raise($scope.get('ArgumentError'), "struct size differs")};
      return ($b = ($c = self.$class().$members()).$each_with_index, $b.$$p = (TMP_12 = function(name, index){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self['$[]='](name, args['$[]'](index))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c);
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$members', TMP_14 = function ːmembers() {
      var self = this;

      return self.$class().$members();
    }, TMP_14.$$arity = 0);

    Opal.defn(self, '$hash', TMP_15 = function ːhash() {
      var self = this;

      return $scope.get('Hash').$new(self.$$data).$hash();
    }, TMP_15.$$arity = 0);

    Opal.defn(self, '$[]', TMP_16 = function(name) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$class().$members().$size()['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$class().$members().$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
      ;
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name];
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_17 = function(name, value) {
      var $a, self = this;

      if ((($a = $scope.get('Integer')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = $rb_lt(name, self.$class().$members().$size()['$-@']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ((($a = $rb_ge(name, self.$class().$members().$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('IndexError'), "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ((($a = $scope.get('String')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.$class().$members()['$include?'](name.$to_sym())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('NameError').$new("no member '" + (name) + "' in struct", name))
        }
        } else {
        self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $scope.get('Opal')['$coerce_to!'](name, $scope.get('String'), "to_str");
      return self.$$data[name] = value;
    }, TMP_17.$$arity = 2);

    Opal.defn(self, '$==', TMP_18 = function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_18.$$arity = 1);

    Opal.defn(self, '$eql?', TMP_19 = function(other) {
      var $a, self = this;

      if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($scope.get('Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$each', TMP_20 = function ːeach() {
      var $a, $b, TMP_21, $c, TMP_22, self = this, $iter = TMP_20.$$p, $yield = $iter || nil;

      TMP_20.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$size()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, "each")
      };
      ($a = ($c = self.$class().$members()).$each, $a.$$p = (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, self['$[]'](name));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($c);
      return self;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$each_pair', TMP_23 = function ːeach_pair() {
      var $a, $b, TMP_24, $c, TMP_25, self = this, $iter = TMP_23.$$p, $yield = $iter || nil;

      TMP_23.$$p = null;
      if (($yield !== nil)) {
        } else {
        return ($a = ($b = self).$enum_for, $a.$$p = (TMP_24 = function(){var self = TMP_24.$$s || this;

        return self.$size()}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24), $a).call($b, "each_pair")
      };
      ($a = ($c = self.$class().$members()).$each, $a.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
      return Opal.yield1($yield, [name, self['$[]'](name)]);}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($c);
      return self;
    }, TMP_23.$$arity = 0);

    Opal.defn(self, '$length', TMP_26 = function ːlength() {
      var self = this;

      return self.$class().$members().$length();
    }, TMP_26.$$arity = 0);

    Opal.alias(self, 'size', 'length');

    Opal.defn(self, '$to_a', TMP_28 = function ːto_a() {
      var $a, $b, TMP_27, self = this;

      return ($a = ($b = self.$class().$members()).$map, $a.$$p = (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
    }, TMP_28.$$arity = 0);

    Opal.alias(self, 'values', 'to_a');

    Opal.defn(self, '$inspect', TMP_30 = function ːinspect() {
      var $a, $b, TMP_29, self = this, result = nil;

      result = "#<struct ";
      if ((($a = ($b = $scope.get('Struct')['$==='](self), $b !== false && $b !== nil && $b != null ?self.$class().$name() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, ($a = ($b = self.$each_pair()).$map, $a.$$p = (TMP_29 = function(name, value){var self = TMP_29.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'to_s', 'inspect');

    Opal.defn(self, '$to_h', TMP_32 = function ːto_h() {
      var $a, $b, TMP_31, self = this;

      return ($a = ($b = self.$class().$members()).$inject, $a.$$p = (TMP_31 = function(h, name){var self = TMP_31.$$s || this;
if (h == null) h = nil;if (name == null) name = nil;
      h['$[]='](name, self['$[]'](name));
        return h;}, TMP_31.$$s = self, TMP_31.$$arity = 2, TMP_31), $a).call($b, $hash2([], {}));
    }, TMP_32.$$arity = 0);

    Opal.defn(self, '$values_at', TMP_34 = function ːvalues_at($a_rest) {
      var $b, $c, TMP_33, self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      args = ($b = ($c = args).$map, $b.$$p = (TMP_33 = function(arg){var self = TMP_33.$$s || this;
if (arg == null) arg = nil;
      return arg.$$is_range ? arg.$to_a() : arg;}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33), $b).call($c).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, TMP_34.$$arity = -1);

    return (Opal.defs(self, '$_load', TMP_35 = function ː_load(args) {
      var $a, $b, self = this, attributes = nil;

      attributes = ($a = args).$values_at.apply($a, Opal.to_a(self.$members()));
      return ($b = self).$new.apply($b, Opal.to_a(attributes));
    }, TMP_35.$$arity = 1), nil) && '_load';
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/io"] = function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.tty = def.closed = nil;
    Opal.cdecl($scope, 'SEEK_SET', 0);

    Opal.cdecl($scope, 'SEEK_CUR', 1);

    Opal.cdecl($scope, 'SEEK_END', 2);

    Opal.defn(self, '$tty?', TMP_1 = function() {
      var self = this;

      return self.tty;
    }, TMP_1.$$arity = 0);

    Opal.defn(self, '$closed?', TMP_2 = function() {
      var self = this;

      return self.closed;
    }, TMP_2.$$arity = 0);

    self.$attr_accessor("write_proc");

    Opal.defn(self, '$write', TMP_3 = function ːwrite(string) {
      var self = this;

      self.write_proc(string);
      return string.$size();
    }, TMP_3.$$arity = 1);

    self.$attr_accessor("sync", "tty");

    Opal.defn(self, '$flush', TMP_4 = function ːflush() {
      var self = this;

      return nil;
    }, TMP_4.$$arity = 0);

    (function($base) {
      var $Writable, self = $Writable = $module($base, 'Writable');

      var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_7, TMP_9;

      Opal.defn(self, '$<<', TMP_5 = function(string) {
        var self = this;

        self.$write(string);
        return self;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$print', TMP_7 = function ːprint($a_rest) {
        var $b, $c, TMP_6, self = this, args;
        if ($gvars[","] == null) $gvars[","] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        self.$write(($b = ($c = args).$map, $b.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $b).call($c).$join($gvars[","]));
        return nil;
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$puts', TMP_9 = function ːputs($a_rest) {
        var $b, $c, TMP_8, self = this, args, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        newline = $gvars["/"];
        if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$write($gvars["/"])
          } else {
          self.$write(($b = ($c = args).$map, $b.$$p = (TMP_8 = function(arg){var self = TMP_8.$$s || this;
if (arg == null) arg = nil;
          return self.$String(arg).$chomp()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $b).call($c).$concat([nil]).$join(newline))
        };
        return nil;
      }, TMP_9.$$arity = -1);
    })($scope.base);

    return (function($base) {
      var $Readable, self = $Readable = $module($base, 'Readable');

      var def = self.$$proto, $scope = self.$$scope, TMP_10, TMP_11, TMP_12, TMP_13;

      Opal.defn(self, '$readbyte', TMP_10 = function ːreadbyte() {
        var self = this;

        return self.$getbyte();
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$readchar', TMP_11 = function ːreadchar() {
        var self = this;

        return self.$getc();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$readline', TMP_12 = function ːreadline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"];
        }
        return self.$raise($scope.get('NotImplementedError'));
      }, TMP_12.$$arity = -1);

      Opal.defn(self, '$readpartial', TMP_13 = function ːreadpartial(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil;
        }
        return self.$raise($scope.get('NotImplementedError'));
      }, TMP_13.$$arity = -2);
    })($scope.base);
  })($scope.base, null);
  Opal.cdecl($scope, 'STDERR', $gvars.stderr = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDIN', $gvars.stdin = $scope.get('IO').$new());
  Opal.cdecl($scope, 'STDOUT', $gvars.stdout = $scope.get('IO').$new());
  (($a = [typeof(process) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}]), $b = $scope.get('STDOUT'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  (($a = [typeof(process) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}]), $b = $scope.get('STDERR'), $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  $scope.get('STDOUT').$extend((($scope.get('IO')).$$scope.get('Writable')));
  return $scope.get('STDERR').$extend((($scope.get('IO')).$$scope.get('Writable')));
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/main"] = function(Opal) {
  var TMP_1, TMP_2, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  Opal.defs(self, '$to_s', TMP_1 = function ːto_s() {
    var self = this;

    return "main";
  }, TMP_1.$$arity = 0);
  return (Opal.defs(self, '$include', TMP_2 = function ːinclude(mod) {
    var self = this;

    return $scope.get('Object').$include(mod);
  }, TMP_2.$$arity = 1), nil) && 'include';
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$[]']);
  return (function($base, $super) {
    function $Dir(){};
    var self = $Dir = $klass($base, $super, 'Dir', $Dir);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$chdir', TMP_1 = function ːchdir(dir) {
        var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, prev_cwd = nil;

        TMP_1.$$p = null;
        try {
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd;
        };
      }, TMP_1.$$arity = 1);
      Opal.defn(self, '$pwd', TMP_2 = function ːpwd() {
        var self = this;

        return Opal.current_dir || '.';
      }, TMP_2.$$arity = 0);
      Opal.alias(self, 'getwd', 'pwd');
      return (Opal.defn(self, '$home', TMP_3 = function ːhome() {
        var $a, self = this;

        return ((($a = $scope.get('ENV')['$[]']("HOME")) !== false && $a !== nil && $a != null) ? $a : ".");
      }, TMP_3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$join', '$compact', '$split', '$==', '$first', '$[]=', '$home', '$pwd', '$each', '$pop', '$<<', '$raise', '$respond_to?', '$to_path', '$class', '$nil?', '$is_a?', '$basename', '$empty?', '$rindex', '$[]', '$+', '$-', '$length', '$gsub', '$find', '$=~']);
  return (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Separator', Opal.cdecl($scope, 'SEPARATOR', "/"));

    Opal.cdecl($scope, 'ALT_SEPARATOR', nil);

    Opal.cdecl($scope, 'PATH_SEPARATOR', ":");

    Opal.cdecl($scope, 'FNM_SYSCASE', 0);

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10;

      Opal.defn(self, '$expand_path', TMP_2 = function ːexpand_path(path, basedir) {
        var $a, $b, TMP_1, self = this, parts = nil, new_parts = nil;

        if (basedir == null) {
          basedir = nil;
        }
        path = [basedir, path].$compact().$join($scope.get('SEPARATOR'));
        parts = path.$split($scope.get('SEPARATOR'));
        new_parts = [];
        if (parts.$first()['$==']("~")) {
          parts['$[]='](0, $scope.get('Dir').$home())};
        if (parts.$first()['$=='](".")) {
          parts['$[]='](0, $scope.get('Dir').$pwd())};
        ($a = ($b = parts).$each, $a.$$p = (TMP_1 = function(part){var self = TMP_1.$$s || this;
if (part == null) part = nil;
        if (part['$==']("..")) {
            return new_parts.$pop()
            } else {
            return new_parts['$<<'](part)
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
        return new_parts.$join($scope.get('SEPARATOR'));
      }, TMP_2.$$arity = -2);
      Opal.alias(self, 'realpath', 'expand_path');
      
      function chompdirsep(path) {
        var last;

        while (path.length > 0) {
          if (isDirSep(path)) {
            last = path;
            path = path.substring(1, path.length);
            while (path.length > 0 && isDirSep(path)) {
              path = inc(path);
            }
            if (path.length == 0) {
              return last;
            }
          }
          else {
            path = inc(path);
          }
        }
        return path;
      }

      function inc(a) {
        return a.substring(1, a.length);
      }

      function skipprefix(path) {
        return path;
      }

      function lastSeparator(path) {
        var tmp, last;

        while (path.length > 0) {
          if (isDirSep(path)) {
            tmp = path;
            path = inc(path);

            while (path.length > 0 && isDirSep(path)) {
              path = inc(path);
            }
            if (!path) {
              break;
            }
            last = tmp;
          }
          else {
            path = inc(path);
          }
        }

        return last;
      }

      function isDirSep(sep) {
        return sep.charAt(0) === $scope.get('SEPARATOR');
      }

      function skipRoot(path) {
        while (path.length > 0 && isDirSep(path)) {
          path = inc(path);
        }
        return path;
      }

      function pointerSubtract(a, b) {
        if (a.length == 0) {
          return b.length;
        }
        return b.indexOf(a);
      }

      function handleSuffix(n, f, p, suffix, name, origName) {
        var suffixMatch;

        if (n >= 0) {
          if (suffix === nil) {
            f = n;
          }
          else {
            suffixMatch = suffix === '.*' ? '\\.\\w+' : suffix.replace(/\?/g, '\\?');
            suffixMatch = new RegExp(suffixMatch + $scope.get('Separator') + '*$').exec(p);
            if (suffixMatch) {
              f = suffixMatch.index;
            }
            else {
              f = n;
            }
          }

          if (f === origName.length) {
            return name;
          }
        }

        return p.substring(0, f);
      }
    
      Opal.defn(self, '$dirname', TMP_3 = function ːdirname(path) {
        var self = this;

        
        if (path === nil) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        }
        if (path['$respond_to?']("to_path")) {
          path = path.$to_path();
        }
        if (!path.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
        }

        var root, p;

        root = skipRoot(path);

        // if (root > name + 1) in the C code
        if (root.length == 0) {
          path = path.substring(path.length - 1, path.length);
        }
        else if (root.length - path.length < 0) {
          path = path.substring(path.indexOf(root)-1, path.length);
        }

        p = lastSeparator(root);
        if (!p) {
          p = root;
        }
        if (p === path) {
          return '.';
        }
        return path.substring(0, path.length - p.length);
      ;
      }, TMP_3.$$arity = 1);
      Opal.defn(self, '$basename', TMP_4 = function ːbasename(name, suffix) {
        var self = this;

        if (suffix == null) {
          suffix = nil;
        }
        
        var p, q, e, f = 0, n = -1, tmp, pointerMath, origName;

        if (name === nil) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")
        }
        if (name['$respond_to?']("to_path")) {
          name = name.$to_path();
        }
        if (!name.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (name.$class()) + " into String")
        }
        if (suffix !== nil && !suffix.$$is_string) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (suffix.$class()) + " into String")
        }

        if (name.length == 0) {
          return name;
        }

        origName = name;
        name = skipprefix(name);

        while (isDirSep(name)) {
          tmp = name;
          name = inc(name);
        }

        if (!name) {
          p = tmp;
          f = 1;
        }
        else {
          if (!(p = lastSeparator(name))) {
            p = name;
          }
          else {
            while (isDirSep(p)) {
              p = inc(p);
            }
          }

          n = pointerSubtract(chompdirsep(p), p);

          for (q = p; pointerSubtract(q, p) < n && q.charAt(0) === '.'; q = inc(q)) {
          }

          for (e = null; pointerSubtract(q, p) < n; q = inc(q)) {
            if (q.charAt(0) === '.') {
              e = q;
            }
          }

          if (e) {
            f = pointerSubtract(e, p);
          }
          else {
            f = n;
          }
        }

        return handleSuffix(n, f, p, suffix, name, origName);
      ;
      }, TMP_4.$$arity = -2);
      Opal.defn(self, '$extname', TMP_5 = function ːextname(path) {
        var $a, $b, self = this, filename = nil, last_dot_idx = nil;

        if ((($a = path['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise($scope.get('TypeError'), "no implicit conversion of nil into String")};
        if ((($a = path['$respond_to?']("to_path")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          path = path.$to_path()};
        if ((($a = path['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise($scope.get('TypeError'), "no implicit conversion of " + (path.$class()) + " into String")
        };
        filename = self.$basename(path);
        if ((($a = filename['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ((($a = (((($b = last_dot_idx['$nil?']()) !== false && $b !== nil && $b != null) ? $b : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return filename['$[]']($range(($rb_plus(last_dot_idx, 1)), -1, false))
        };
      }, TMP_5.$$arity = 1);
      Opal.defn(self, '$exist?', TMP_6 = function(path) {
        var self = this;

        return Opal.modules[path] != null;
      }, TMP_6.$$arity = 1);
      Opal.alias(self, 'exists?', 'exist?');
      Opal.defn(self, '$directory?', TMP_8 = function(path) {
        var $a, $b, TMP_7, self = this, files = nil, file = nil;

        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub((new RegExp("(^." + $scope.get('SEPARATOR') + "+|" + $scope.get('SEPARATOR') + "+$)")));
        file = ($a = ($b = files).$find, $a.$$p = (TMP_7 = function(file){var self = TMP_7.$$s || this;
if (file == null) file = nil;
        return file['$=~']((new RegExp("^" + path)))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        return file;
      }, TMP_8.$$arity = 1);
      Opal.defn(self, '$join', TMP_9 = function ːjoin($a_rest) {
        var self = this, paths;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        paths = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          paths[$arg_idx - 0] = arguments[$arg_idx];
        }
        return paths.$join($scope.get('SEPARATOR')).$gsub((new RegExp("" + $scope.get('SEPARATOR') + "+")), $scope.get('SEPARATOR'));
      }, TMP_9.$$arity = -1);
      return (Opal.defn(self, '$split', TMP_10 = function ːsplit(path) {
        var self = this;

        return path.$split($scope.get('SEPARATOR'));
      }, TMP_10.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self));
  })($scope.base, $scope.get('IO'))
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$to_f', '$now', '$new']);
  (function($base, $super) {
    function $Process(){};
    var self = $Process = $klass($base, $super, 'Process', $Process);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

    Opal.cdecl($scope, 'CLOCK_REALTIME', 0);

    Opal.cdecl($scope, 'CLOCK_MONOTONIC', 1);

    Opal.defs(self, '$pid', TMP_1 = function ːpid() {
      var self = this;

      return 0;
    }, TMP_1.$$arity = 0);

    Opal.defs(self, '$times', TMP_2 = function ːtimes() {
      var self = this, t = nil;

      t = $scope.get('Time').$now().$to_f();
      return (($scope.get('Benchmark')).$$scope.get('Tms')).$new(t, t, t, t, t);
    }, TMP_2.$$arity = 0);

    return (Opal.defs(self, '$clock_gettime', TMP_3 = function ːclock_gettime(clock_id, unit) {
      var self = this;

      if (unit == null) {
        unit = nil;
      }
      return $scope.get('Time').$now().$to_f();
    }, TMP_3.$$arity = -2), nil) && 'clock_gettime';
  })($scope.base, null);
  (function($base, $super) {
    function $Signal(){};
    var self = $Signal = $klass($base, $super, 'Signal', $Signal);

    var def = self.$$proto, $scope = self.$$scope, TMP_4;

    return (Opal.defs(self, '$trap', TMP_4 = function ːtrap($a_rest) {
      var self = this;

      return nil;
    }, TMP_4.$$arity = -1), nil) && 'trap'
  })($scope.base, null);
  return (function($base, $super) {
    function $GC(){};
    var self = $GC = $klass($base, $super, 'GC', $GC);

    var def = self.$$proto, $scope = self.$$scope, TMP_5;

    return (Opal.defs(self, '$start', TMP_5 = function ːstart() {
      var self = this;

      return nil;
    }, TMP_5.$$arity = 0), nil) && 'start'
  })($scope.base, null);
};
/* Generated by Opal 0.10.2 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var TMP_30, TMP_31, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $scope.get('Kernel').$raise($scope.get('NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }

  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18;

    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";

    Opal.defn(self, '$<<', TMP_1 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("<<"));
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$capitalize!', TMP_2 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("capitalize!"));
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$chomp!', TMP_3 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chomp!"));
    }, TMP_3.$$arity = -1);

    Opal.defn(self, '$chop!', TMP_4 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("chop!"));
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$downcase!', TMP_5 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("downcase!"));
    }, TMP_5.$$arity = -1);

    Opal.defn(self, '$gsub!', TMP_6 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("gsub!"));
    }, TMP_6.$$arity = -1);

    Opal.defn(self, '$lstrip!', TMP_7 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("lstrip!"));
    }, TMP_7.$$arity = -1);

    Opal.defn(self, '$next!', TMP_8 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("next!"));
    }, TMP_8.$$arity = -1);

    Opal.defn(self, '$reverse!', TMP_9 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("reverse!"));
    }, TMP_9.$$arity = -1);

    Opal.defn(self, '$slice!', TMP_10 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("slice!"));
    }, TMP_10.$$arity = -1);

    Opal.defn(self, '$squeeze!', TMP_11 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("squeeze!"));
    }, TMP_11.$$arity = -1);

    Opal.defn(self, '$strip!', TMP_12 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("strip!"));
    }, TMP_12.$$arity = -1);

    Opal.defn(self, '$sub!', TMP_13 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("sub!"));
    }, TMP_13.$$arity = -1);

    Opal.defn(self, '$succ!', TMP_14 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("succ!"));
    }, TMP_14.$$arity = -1);

    Opal.defn(self, '$swapcase!', TMP_15 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("swapcase!"));
    }, TMP_15.$$arity = -1);

    Opal.defn(self, '$tr!', TMP_16 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr!"));
    }, TMP_16.$$arity = -1);

    Opal.defn(self, '$tr_s!', TMP_17 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("tr_s!"));
    }, TMP_17.$$arity = -1);

    return (Opal.defn(self, '$upcase!', TMP_18 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), (ERROR)['$%']("upcase!"));
    }, TMP_18.$$arity = -1), nil) && 'upcase!';
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

    var ERROR = "Object freezing is not supported by Opal";

    Opal.defn(self, '$freeze', TMP_19 = function ːfreeze() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$frozen?', TMP_20 = function() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_20.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22, TMP_23;

    var ERROR = "Object tainting is not supported by Opal";

    Opal.defn(self, '$taint', TMP_21 = function ːtaint() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$untaint', TMP_22 = function ːuntaint() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return self;
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$tainted?', TMP_23 = function() {
      var self = this;

      handle_unsupported_feature(ERROR);
      return false;
    }, TMP_23.$$arity = 0);
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_24, TMP_25, TMP_26, TMP_27;

    Opal.defn(self, '$public', TMP_24 = function($a_rest) {
      var self = this, methods;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      methods = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        methods[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    
    }, TMP_24.$$arity = -1);

    Opal.alias(self, 'private', 'public');

    Opal.alias(self, 'protected', 'public');

    Opal.alias(self, 'nesting', 'public');

    Opal.defn(self, '$private_class_method', TMP_25 = function ːprivate_class_method($a_rest) {
      var self = this;

      return self;
    }, TMP_25.$$arity = -1);

    Opal.alias(self, 'public_class_method', 'private_class_method');

    Opal.defn(self, '$private_method_defined?', TMP_26 = function(obj) {
      var self = this;

      return false;
    }, TMP_26.$$arity = 1);

    Opal.defn(self, '$private_constant', TMP_27 = function ːprivate_constant($a_rest) {
      var self = this;

      return nil;
    }, TMP_27.$$arity = -1);

    Opal.alias(self, 'protected_method_defined?', 'private_method_defined?');

    Opal.alias(self, 'public_instance_methods', 'instance_methods');

    return Opal.alias(self, 'public_method_defined?', 'method_defined?');
  })($scope.base, null);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_28;

    Opal.defn(self, '$private_methods', TMP_28 = function ːprivate_methods($a_rest) {
      var self = this;

      return [];
    }, TMP_28.$$arity = -1);

    Opal.alias(self, 'private_instance_methods', 'private_methods');
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_29;

    Opal.defn(self, '$eval', TMP_29 = function($a_rest) {
      var self = this;

      return self.$raise($scope.get('NotImplementedError'), "To use Kernel#eval, you must first require 'opal-parser'. " + ("See https://github.com/opal/opal/blob/" + ($scope.get('RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, TMP_29.$$arity = -1)
  })($scope.base);
  Opal.defs(self, '$public', TMP_30 = function($a_rest) {
    var self = this;

    return nil;
  }, TMP_30.$$arity = -1);
  return (Opal.defs(self, '$private', TMP_31 = function($a_rest) {
    var self = this;

    return nil;
  }, TMP_31.$$arity = -1), nil) && 'private';
};
/* Generated by Opal 0.10.2 */
(function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/string/inheritance");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  return self.$require("corelib/unsupported");
})(Opal);

}

// UMD Module
(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory;
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register a named module.
    define('asciidoctor', ['module'], function (module) {
      return factory(module.config());
    });
  } else {
    // Browser globals (root is window)
    root.Asciidoctor = factory;
  }
// eslint-disable-next-line no-unused-vars
}(this, function (moduleConfig) {
/* Generated by Opal 0.10.1 */
Opal.modules["set"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_32, TMP_33, TMP_35, TMP_37, TMP_39, TMP_41, TMP_42;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(enum$) {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      TMP_2.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil && block != null) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$dup', TMP_4 = function ːdup() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$-', TMP_5 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_5.$$arity = 1);

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', TMP_6 = function ːinspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, $b, TMP_7, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil && $b != null ?self.$size()['$=='](other.$size()) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)
        } else {
        return false
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$add', TMP_9 = function ːadd(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_10 = function ːclassify() {
      var $a, $b, TMP_11, $c, TMP_12, self = this, $iter = TMP_10.$$p, block = $iter || nil, result = nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_11 = function(h, k){var self = TMP_11.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      return result;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_13 = function() {
      var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil, result = nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self.$replace(result);
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', TMP_15 = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete?', TMP_16 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_17 = function ːdelete_if() {try {

      var $a, $b, TMP_18, $c, $d, TMP_19, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

      TMP_17.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil && $a != null) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)).$each, $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$add?', TMP_20 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$each', TMP_21 = function ːeach() {
      var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_22 = function() {
      var self = this;

      return self.hash['$empty?']();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_24 = function(other) {
      var $a, $b, TMP_23, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$clear', TMP_25 = function ːclear() {
      var self = this;

      self.hash.$clear();
      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$include?', TMP_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    }, TMP_26.$$arity = 1);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', TMP_28 = function ːmerge(enum$) {
      var $a, $b, TMP_27, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$replace', TMP_29 = function ːreplace(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$size', TMP_30 = function ːsize() {
      var self = this;

      return self.hash.$size();
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', TMP_32 = function ːsubtract(enum$) {
      var $a, $b, TMP_31, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$|', TMP_33 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$superset?', TMP_35 = function(set) {
      var $a, $b, TMP_34, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
    }, TMP_35.$$arity = 1);

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', TMP_37 = function(set) {
      var $a, $b, TMP_36, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', TMP_39 = function(set) {
      var $a, $b, TMP_38, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', TMP_41 = function(set) {
      var $a, $b, TMP_40, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 1);

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', TMP_42 = function ːto_a() {
      var self = this;

      return self.hash.$keys();
    }, TMP_42.$$arity = 0), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_43;

    Opal.defn(self, '$to_set', TMP_43 = function ːto_set(klass, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = $scope.get('Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_43.$$p = null;
      return ($b = ($c = klass).$new, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)));
    }, TMP_43.$$arity = -1)
  })($scope.base);
};

/* Generated by Opal 0.10.1 */
Opal.modules["strscan"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$private']);
  return (function($base, $super) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

    def.pos = def.string = def.working = def.matched = def.prev_pos = def.match = nil;
    self.$attr_reader("pos");

    self.$attr_reader("matched");

    Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(string) {
      var self = this;

      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return self.match = [];
    }, TMP_1.$$arity = 1);

    self.$attr_reader("string");

    Opal.defn(self, '$beginning_of_line?', TMP_2 = function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n";
    }, TMP_2.$$arity = 0);

    Opal.alias(self, 'bol?', 'beginning_of_line?');

    Opal.defn(self, '$scan', TMP_3 = function ːscan(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defn(self, '$scan_until', TMP_4 = function ːscan_until(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var pos     = self.pos,
          working = self.working,
          result;

      while (true) {
        result   = pattern.exec(working);
        pos     += 1;
        working  = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            return self.matched = nil;
          }

          continue;
        }

        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.prev_pos = pos - 1;
        self.pos      = pos;
        self.working  = working.substr(result[0].length);

        return self.matched;
      }
    ;
    }, TMP_4.$$arity = 1);

    Opal.defn(self, '$[]', TMP_5 = function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    ;
    }, TMP_5.$$arity = 1);

    Opal.defn(self, '$check', TMP_6 = function ːcheck(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    }, TMP_6.$$arity = 1);

    Opal.defn(self, '$check_until', TMP_7 = function ːcheck_until(pattern) {
      var self = this;

      
      var prev_pos = self.prev_pos,
          pos      = self.pos;

      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos      = pos;

      return result;
    ;
    }, TMP_7.$$arity = 1);

    Opal.defn(self, '$peek', TMP_8 = function ːpeek(length) {
      var self = this;

      return self.working.substring(0, length);
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$eos?', TMP_9 = function() {
      var self = this;

      return self.working.length === 0;
    }, TMP_9.$$arity = 0);

    Opal.defn(self, '$exist?', TMP_10 = function(pattern) {
      var self = this;

      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else if (result.index == 0) {
        return 0;
      }
      else {
        return result.index + 1;
      }
    ;
    }, TMP_10.$$arity = 1);

    Opal.defn(self, '$skip', TMP_11 = function ːskip(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;

        self.matched   = match_str;
        self.prev_pos  = self.pos;
        self.pos      += match_len;
        self.working   = self.working.substring(match_len);

        return match_len;
      }
    ;
    }, TMP_11.$$arity = 1);

    Opal.defn(self, '$skip_until', TMP_12 = function ːskip_until(pattern) {
      var self = this;

      
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      }
      else {
        self.matched = result.substr(-1);

        return result.length;
      }
    ;
    }, TMP_12.$$arity = 1);

    Opal.defn(self, '$get_byte', TMP_13 = function ːget_byte() {
      var self = this;

      
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos  = self.pos;
        self.pos      += 1;
        result      = self.matched = self.working.substring(0, 1);
        self.working   = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    ;
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'getch', 'get_byte');

    Opal.defn(self, '$match?', TMP_14 = function(pattern) {
      var self = this;

      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else {
        self.prev_pos = self.pos;

        return result[0].length;
      }
    ;
    }, TMP_14.$$arity = 1);

    Opal.defn(self, '$pos=', TMP_15 = function(pos) {
      var self = this;

      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return self.working = self.string.slice(pos);
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$post_match', TMP_16 = function ːpost_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    ;
    }, TMP_16.$$arity = 0);

    Opal.defn(self, '$pre_match', TMP_17 = function ːpre_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    ;
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$reset', TMP_18 = function ːreset() {
      var self = this;

      self.working = self.string;
      self.matched = nil;
      return self.pos = 0;
    }, TMP_18.$$arity = 0);

    Opal.defn(self, '$rest', TMP_19 = function ːrest() {
      var self = this;

      return self.working;
    }, TMP_19.$$arity = 0);

    Opal.defn(self, '$rest?', TMP_20 = function() {
      var self = this;

      return self.working.length !== 0;
    }, TMP_20.$$arity = 0);

    Opal.defn(self, '$rest_size', TMP_21 = function ːrest_size() {
      var self = this;

      return self.$rest().$size();
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$terminate', TMP_22 = function ːterminate() {
      var $a, $b, self = this;

      self.match = nil;
      return (($a = [self.string.$length()]), $b = self, $b['$pos='].apply($b, $a), $a[$a.length-1]);
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$unscan', TMP_23 = function ːunscan() {
      var self = this;

      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, TMP_23.$$arity = 0);

    self.$private();

    return (Opal.defn(self, '$anchor', TMP_24 = function ːanchor(pattern) {
      var self = this;

      return new RegExp('^(?:' + pattern.toString().substr(1, pattern.toString().length - 2) + ')');
    }, TMP_24.$$arity = 1), nil) && 'anchor';
  })($scope.base, null)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/file"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$new', '$attr_reader', '$delete', '$gsub', '$==', '$read', '$size', '$to_enum', '$chomp', '$each_line', '$readlines', '$split', '$===']);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$open', TMP_1 = function ːopen(path, $a_rest) {
      var $b, self = this, rest, $iter = TMP_1.$$p, $yield = $iter || nil, file = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      rest = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        rest[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      file = ($b = $scope.get('File')).$new.apply($b, [path].concat(Opal.to_a(rest)));
      if (($yield !== nil)) {
        return Opal.yield1($yield, file);
        } else {
        return file
      };
    }, TMP_1.$$arity = -2)
  })($scope.base);
  (function($base, $super) {
    function $File(){};
    var self = $File = $klass($base, $super, 'File', $File);

    var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

    def.eof = def.path = nil;
    Opal.cdecl($scope, 'SEPARATOR', "/");

    Opal.cdecl($scope, 'ALT_SEPARATOR', nil);

    self.$attr_reader("eof");

    self.$attr_reader("lineno");

    self.$attr_reader("path");

    Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(path, flags) {
      var self = this, encoding_flag_regexp = nil;

      if (flags == null) {
        flags = "r";
      }
      self.path = path;
      self.contents = nil;
      self.eof = false;
      self.lineno = 0;
      flags = flags.$delete("b");
      encoding_flag_regexp = /:(.*)/;
      flags = flags.$gsub(encoding_flag_regexp, "");
      self.flags = flags;
      if ($scope.get('JAVASCRIPT_IO_MODULE')['$==']("node")) {
        return self.fd = require('fs').openSync(path, flags)
        } else {
        return nil
      };
    }, TMP_2.$$arity = -2);

    Opal.defn(self, '$read', TMP_3 = function ːread() {
      var $a, self = this, res = nil;

      if ((($a = self.eof) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ""
        } else {
        res = $scope.get('File').$read(self.path);
        self.eof = true;
        self.lineno = res.$size();
        return res;
      };
    }, TMP_3.$$arity = 0);

    Opal.defn(self, '$each_line', TMP_4 = function ːeach_line(separator) {
      var $a, self = this, $iter = TMP_4.$$p, block = $iter || nil, lines = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      TMP_4.$$p = null;
      if ((($a = self.eof) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (function() {if ((block !== nil)) {
          return self
          } else {
          return [].$to_enum()
        }; return nil; })()};
      if ((block !== nil)) {
        lines = $scope.get('File').$read(self.path);
        
        self.eof = false;
        self.lineno = 0;
        var chomped  = lines.$chomp(),
            trailing = lines.length != chomped.length,
            splitted = chomped.split(separator);

        for (var i = 0, length = splitted.length; i < length; i++) {
          self.lineno += 1;
          if (i < length - 1 || trailing) {
            Opal.yield1(block, splitted[i] + separator);
          }
          else {
            Opal.yield1(block, splitted[i]);
          }
        }
        self.eof = true;
      
        return self;
        } else {
        return self.$read().$each_line()
      };
    }, TMP_4.$$arity = -1);

    Opal.defn(self, '$readlines', TMP_5 = function ːreadlines() {
      var self = this;

      return $scope.get('File').$readlines(self.path);
    }, TMP_5.$$arity = 0);

    Opal.defs(self, '$readlines', TMP_6 = function ːreadlines(path, separator) {
      var self = this, content = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"];
      }
      content = $scope.get('File').$read(path);
      return content.$split(separator);
    }, TMP_6.$$arity = -2);

    Opal.defs(self, '$file?', TMP_7 = function(path) {
      var self = this;

      return true;
    }, TMP_7.$$arity = 1);

    Opal.defs(self, '$readable?', TMP_8 = function(path) {
      var self = this;

      return true;
    }, TMP_8.$$arity = 1);

    return (Opal.defs(self, '$read', TMP_9 = function ːread(path) {
      var self = this, $case = nil;

      return (function() {$case = $scope.get('JAVASCRIPT_IO_MODULE');if ("node"['$===']($case)) {return require('fs').readFileSync(path, 'utf8');}else if ("phantomjs"['$===']($case)) {return require('fs').read(path);}else if ("java_nio"['$===']($case)) {
        var Paths = Java.type('java.nio.file.Paths');
        var Files = Java.type('java.nio.file.Files');
        var lines = Files.readAllLines(Paths.get(path), Java.type('java.nio.charset.StandardCharsets').UTF_8);
        var data = [];
        lines.forEach(function(line) { data.push(line); });
        return data.join("\n");
      }else if ("xmlhttprequest"['$===']($case)) {
        var data = '';
        var status = -1;
        try {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', path, false);
          xhr.addEventListener('load', function() {
            status = this.status;
            // status is 0 for local file mode (i.e., file://)
            if (status == 0 || status == 200) {
              data = this.responseText;
            }
          });
          xhr.overrideMimeType('text/plain');
          xhr.send();
        }
        catch (e) {
          status = 0;
        }
        // assume that no data in local file mode means it doesn't exist
        if (status == 404 || (status == 0 && data == '')) {
          throw $scope.get('IOError').$new('No such file or directory: ' + path);
        }
        return data;
      }else if ("spidermonkey"['$===']($case)) {return read(path);}else {return ""}})();
    }, TMP_9.$$arity = 1), nil) && 'read';
  })($scope.base, null);
  return (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    return (Opal.defs(self, '$read', TMP_10 = function ːread(path) {
      var self = this;

      return $scope.get('File').$read(path);
    }, TMP_10.$$arity = 1), nil) && 'read'
  })($scope.base, null);
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/match_data"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$[]=']);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    def.matches = nil;
    return (Opal.defn(self, '$[]=', TMP_1 = function(idx, val) {
      var self = this;

      return self.matches['$[]='](idx, val);
    }, TMP_1.$$arity = 2), nil) && '[]='
  })($scope.base, null)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/kernel"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$freeze', TMP_1 = function ːfreeze() {
      var self = this;

      return nil;
    }, TMP_1.$$arity = 0)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/thread_safe"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  (function($base) {
    var $ThreadSafe, self = $ThreadSafe = $module($base, 'ThreadSafe');

    var def = self.$$proto, $scope = self.$$scope;

    nil
  })($scope.base);
  return (function($base, $super) {
    function $Cache(){};
    var self = $Cache = $klass($base, $super, 'Cache', $Cache);

    var def = self.$$proto, $scope = self.$$scope;

    return nil;
  })($scope.base, Opal.get('Hash'));
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/converter/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$node_name', '$empty?', '$send', '$content']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $scope = self.$$scope;

      nil
    })($scope.base);

    (function($base, $super) {
      function $Base(){};
      var self = $Base = $klass($base, $super, 'Base', $Base);

      var def = self.$$proto, $scope = self.$$scope;

      return self.$include($scope.get('Converter'))
    })($scope.get('Converter'), null);

    (function($base, $super) {
      function $BuiltIn(){};
      var self = $BuiltIn = $klass($base, $super, 'BuiltIn', $BuiltIn);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(backend, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        return nil;
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$convert', TMP_2 = function ːconvert(node, transform, opts) {
        var $a, self = this;

        if (transform == null) {
          transform = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        ((($a = transform) !== false && $a !== nil && $a != null) ? $a : transform = node.$node_name());
        if ((($a = opts['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.$send(transform, node))
          } else {
          return (self.$send(transform, node, opts))
        };
      }, TMP_2.$$arity = -2);

      Opal.alias(self, 'handles?', 'respond_to?');

      Opal.defn(self, '$content', TMP_3 = function ːcontent(node) {
        var self = this;

        return node.$content();
      }, TMP_3.$$arity = 1);

      Opal.alias(self, 'pass', 'content');

      return (Opal.defn(self, '$skip', TMP_4 = function ːskip(node) {
        var self = this;

        return nil;
      }, TMP_4.$$arity = 1), nil) && 'skip';
    })($scope.get('Converter'), null);
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/converter/factory"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$require', '$to_s', '$warn', '$register', '$default', '$resolve', '$create', '$converters', '$unregister_all', '$attr_reader', '$each', '$[]=', '$==', '$[]', '$clear', '$===', '$key?']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Factory(){};
        var self = $Factory = $klass($base, $super, 'Factory', $Factory);

        var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12;

        def.converters = def.star_converter = nil;
        self.__default__ = nil;

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

          Opal.defn(self, '$default', TMP_1 = function(initialize_singleton) {
            var $a, $b, self = this;
            if (self.__default__ == null) self.__default__ = nil;

            if (initialize_singleton == null) {
              initialize_singleton = true;
            }
            if (initialize_singleton !== false && initialize_singleton !== nil && initialize_singleton != null) {
              } else {
              return ((($a = self.__default__) !== false && $a !== nil && $a != null) ? $a : self.$new())
            };
            return ((($a = self.__default__) !== false && $a !== nil && $a != null) ? $a : self.__default__ = (function() { try {
              (function() {if ((($b = (Opal.Object.$$scope.ThreadSafe == null ? nil : 'constant')) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                return nil
                } else {
                return self.$require("thread_safe".$to_s())
              }; return nil; })()
              return self.$new(((Opal.get('ThreadSafe')).$$scope.get('Cache')).$new())
            } catch ($err) {
              if (Opal.rescue($err, [Opal.get('LoadError')])) {
                try {
                  self.$warn("asciidoctor: WARNING: gem 'thread_safe' is not installed. This gem is recommended when registering custom converters.")
                  return self.$new()
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }})());
          }, TMP_1.$$arity = -1);
          Opal.defn(self, '$register', TMP_2 = function ːregister(converter, backends) {
            var self = this;

            if (backends == null) {
              backends = ["*"];
            }
            return self.$default().$register(converter, backends);
          }, TMP_2.$$arity = -2);
          Opal.defn(self, '$resolve', TMP_3 = function ːresolve(backend) {
            var self = this;

            return self.$default().$resolve(backend);
          }, TMP_3.$$arity = 1);
          Opal.defn(self, '$create', TMP_4 = function ːcreate(backend, opts) {
            var self = this;

            if (opts == null) {
              opts = $hash2([], {});
            }
            return self.$default().$create(backend, opts);
          }, TMP_4.$$arity = -2);
          Opal.defn(self, '$converters', TMP_5 = function ːconverters() {
            var self = this;

            return self.$default().$converters();
          }, TMP_5.$$arity = 0);
          return (Opal.defn(self, '$unregister_all', TMP_6 = function ːunregister_all() {
            var self = this;

            return self.$default().$unregister_all();
          }, TMP_6.$$arity = 0), nil) && 'unregister_all';
        })(Opal.get_singleton_class(self));

        self.$attr_reader("converters");

        Opal.defn(self, '$initialize', TMP_7 = function ːinitialize(converters) {
          var $a, self = this;

          if (converters == null) {
            converters = nil;
          }
          self.converters = ((($a = converters) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
          return self.star_converter = nil;
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$register', TMP_9 = function ːregister(converter, backends) {
          var $a, $b, TMP_8, self = this;

          if (backends == null) {
            backends = ["*"];
          }
          ($a = ($b = backends).$each, $a.$$p = (TMP_8 = function(backend){var self = TMP_8.$$s || this;
            if (self.converters == null) self.converters = nil;
if (backend == null) backend = nil;
          self.converters['$[]='](backend, converter);
            if (backend['$==']("*")) {
              return self.star_converter = converter
              } else {
              return nil
            };}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
          return nil;
        }, TMP_9.$$arity = -2);

        Opal.defn(self, '$resolve', TMP_10 = function ːresolve(backend) {
          var $a, $b, self = this;

          return ($a = self.converters, $a !== false && $a !== nil && $a != null ?(((($b = self.converters['$[]'](backend)) !== false && $b !== nil && $b != null) ? $b : self.star_converter)) : $a);
        }, TMP_10.$$arity = 1);

        Opal.defn(self, '$unregister_all', TMP_11 = function ːunregister_all() {
          var self = this;

          self.converters.$clear();
          return self.star_converter = nil;
        }, TMP_11.$$arity = 0);

        return (Opal.defn(self, '$create', TMP_12 = function ːcreate(backend, opts) {
          var $a, self = this, converter = nil, base_converter = nil, $case = nil, template_converter = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          if ((($a = (converter = self.$resolve(backend))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (function() {if ((($a = Opal.get('Class')['$==='](converter)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return (converter.$new(backend, opts))
              } else {
              return converter
            }; return nil; })()};
          base_converter = (function() {$case = backend;if ("html5"['$===']($case)) {if ((($a = (function(){ try { return ((((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('Html5Converter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/html5".$to_s())
          };
          return $scope.get('Html5Converter').$new(backend, opts);}else if ("docbook5"['$===']($case)) {if ((($a = (function(){ try { return ((((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('DocBook5Converter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/docbook5".$to_s())
          };
          return $scope.get('DocBook5Converter').$new(backend, opts);}else if ("docbook45"['$===']($case)) {if ((($a = (function(){ try { return ((((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('DocBook45Converter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/docbook45".$to_s())
          };
          return $scope.get('DocBook45Converter').$new(backend, opts);}else if ("manpage"['$===']($case)) {if ((($a = (function(){ try { return ((((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('ManPageConverter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/manpage".$to_s())
          };
          return $scope.get('ManPageConverter').$new(backend, opts);}else { return nil }})();
          if ((($a = opts['$key?']("template_dirs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return base_converter
          };
          if ((($a = (function(){ try { return ((((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('TemplateConverter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/template".$to_s())
          };
          if ((($a = (function(){ try { return ((((((Opal.get('Asciidoctor')).$$scope.get('Converter'))).$$scope.get('CompositeConverter'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/composite".$to_s())
          };
          template_converter = $scope.get('TemplateConverter').$new(backend, opts['$[]']("template_dirs"), opts);
          return $scope.get('CompositeConverter').$new(backend, template_converter, base_converter);
        }, TMP_12.$$arity = -2), nil) && 'create';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/converter"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$register', '$==', '$send', '$include?', '$setup_backend_info', '$raise', '$class', '$sub', '$[]', '$[]=', '$backend_info', '$extend', '$include', '$respond_to?', '$write', '$chomp', '$open', '$require']);
  (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12;

      (function($base) {
        var $Config, self = $Config = $module($base, 'Config');

        var def = self.$$proto, $scope = self.$$scope, TMP_3;

        Opal.defn(self, '$register_for', TMP_3 = function ːregister_for($a_rest) {
          var $b, $c, TMP_1, $d, TMP_2, self = this, backends, metaclass = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          backends = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            backends[$arg_idx - 0] = arguments[$arg_idx];
          }
          $scope.get('Factory').$register(self, backends);
          metaclass = (function(self) {
            var $scope = self.$$scope, def = self.$$proto;

            return self
          })(Opal.get_singleton_class(self));
          if (backends['$=='](["*"])) {
            ($b = ($c = metaclass).$send, $b.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this;
if (name == null) name = nil;
            return true}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c, "define_method", "converts?")
            } else {
            ($b = ($d = metaclass).$send, $b.$$p = (TMP_2 = function(name){var self = TMP_2.$$s || this;
if (name == null) name = nil;
            return backends['$include?'](name)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($d, "define_method", "converts?")
          };
          return nil;
        }, TMP_3.$$arity = -1)
      })($scope.base);

      (function($base) {
        var $BackendInfo, self = $BackendInfo = $module($base, 'BackendInfo');

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9;

        Opal.defn(self, '$backend_info', TMP_4 = function ːbackend_info() {
          var $a, self = this;
          if (self.backend_info == null) self.backend_info = nil;

          return ((($a = self.backend_info) !== false && $a !== nil && $a != null) ? $a : self.backend_info = self.$setup_backend_info());
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$setup_backend_info', TMP_5 = function ːsetup_backend_info() {
          var $a, self = this, base = nil, ext = nil, type = nil, syntax = nil;
          if (self.backend == null) self.backend = nil;

          if ((($a = self.backend) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise(Opal.get('ArgumentError'), "Cannot determine backend for converter: " + (self.$class()))
          };
          base = self.backend.$sub($scope.get('TrailingDigitsRx'), "");
          if ((($a = (ext = $scope.get('DEFAULT_EXTENSIONS')['$[]'](base))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            type = ext['$[]']($range(1, -1, false))
            } else {
            base = "html";
            ext = ".html";
            type = "html";
            syntax = "html";
          };
          return $hash2(["basebackend", "outfilesuffix", "filetype", "htmlsyntax"], {"basebackend": base, "outfilesuffix": ext, "filetype": type, "htmlsyntax": syntax});
        }, TMP_5.$$arity = 0);

        Opal.defn(self, '$filetype', TMP_6 = function ːfiletype(value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          if (value !== false && value !== nil && value != null) {
            return self.$backend_info()['$[]=']("filetype", value)
            } else {
            return self.$backend_info()['$[]']("filetype")
          };
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$basebackend', TMP_7 = function ːbasebackend(value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          if (value !== false && value !== nil && value != null) {
            return self.$backend_info()['$[]=']("basebackend", value)
            } else {
            return self.$backend_info()['$[]']("basebackend")
          };
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$outfilesuffix', TMP_8 = function ːoutfilesuffix(value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          if (value !== false && value !== nil && value != null) {
            return self.$backend_info()['$[]=']("outfilesuffix", value)
            } else {
            return self.$backend_info()['$[]']("outfilesuffix")
          };
        }, TMP_8.$$arity = -1);

        Opal.defn(self, '$htmlsyntax', TMP_9 = function ːhtmlsyntax(value) {
          var self = this;

          if (value == null) {
            value = nil;
          }
          if (value !== false && value !== nil && value != null) {
            return self.$backend_info()['$[]=']("htmlsyntax", value)
            } else {
            return self.$backend_info()['$[]']("htmlsyntax")
          };
        }, TMP_9.$$arity = -1);
      })($scope.base);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_10;

        return (Opal.defn(self, '$included', TMP_10 = function ːincluded(converter) {
          var self = this;

          return converter.$extend($scope.get('Config'));
        }, TMP_10.$$arity = 1), nil) && 'included'
      })(Opal.get_singleton_class(self));

      self.$include($scope.get('Config'));

      self.$include($scope.get('BackendInfo'));

      Opal.defn(self, '$initialize', TMP_11 = function ːinitialize(backend, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        self.backend = backend;
        return self.$setup_backend_info();
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$convert', TMP_12 = function ːconvert(node, transform, opts) {
        var self = this;

        if (transform == null) {
          transform = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        return self.$raise(Opal.get('NotImplementedError'));
      }, TMP_12.$$arity = -2);

      Opal.alias(self, 'convert_with_options', 'convert');
    })($scope.base);

    (function($base) {
      var $Writer, self = $Writer = $module($base, 'Writer');

      var def = self.$$proto, $scope = self.$$scope, TMP_14;

      Opal.defn(self, '$write', TMP_14 = function ːwrite(output, target) {
        var $a, $b, TMP_13, self = this;

        if ((($a = target['$respond_to?']("write")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          target.$write(output.$chomp());
          target.$write($scope.get('EOL'));
          } else {
          ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_13 = function(f){var self = TMP_13.$$s || this;
if (f == null) f = nil;
          return f.$write(output)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b, target, "w")
        };
        return nil;
      }, TMP_14.$$arity = 2)
    })($scope.base);

    (function($base) {
      var $VoidWriter, self = $VoidWriter = $module($base, 'VoidWriter');

      var def = self.$$proto, $scope = self.$$scope, TMP_15;

      self.$include($scope.get('Writer'));

      Opal.defn(self, '$write', TMP_15 = function ːwrite(output, target) {
        var self = this;

        return nil;
      }, TMP_15.$$arity = 2);
    })($scope.base);
  })($scope.base);
  self.$require("asciidoctor/converter/base");
  return self.$require("asciidoctor/converter/factory");
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/converter/composite"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$each', '$respond_to?', '$composed', '$compact', '$flatten', '$node_name', '$convert', '$converter_for', '$[]', '$[]=', '$find_converter', '$handles?', '$raise']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $CompositeConverter(){};
      var self = $CompositeConverter = $klass($base, $super, 'CompositeConverter', $CompositeConverter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_6;

      def.converter_map = def.converters = nil;
      self.$attr_reader("converters");

      Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(backend, $a_rest) {
        var $b, $c, TMP_1, self = this, converters;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        converters = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          converters[$arg_idx - 1] = arguments[$arg_idx];
        }
        self.backend = backend;
        ($b = ($c = (self.converters = converters.$flatten().$compact())).$each, $b.$$p = (TMP_1 = function(converter){var self = TMP_1.$$s || this, $a;
if (converter == null) converter = nil;
        if ((($a = converter['$respond_to?']("composed")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return converter.$composed(self)
            } else {
            return nil
          }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
        return self.converter_map = $hash2([], {});
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$convert', TMP_3 = function ːconvert(node, transform, opts) {
        var $a, self = this;

        if (transform == null) {
          transform = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        ((($a = transform) !== false && $a !== nil && $a != null) ? $a : transform = node.$node_name());
        return (self.$converter_for(transform)).$convert(node, transform, opts);
      }, TMP_3.$$arity = -2);

      Opal.alias(self, 'convert_with_options', 'convert');

      Opal.defn(self, '$converter_for', TMP_4 = function ːconverter_for(transform) {
        var $a, $b, $c, self = this;

        return ($a = transform, $b = self.converter_map, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, (self.$find_converter(transform)))));
      }, TMP_4.$$arity = 1);

      return (Opal.defn(self, '$find_converter', TMP_6 = function ːfind_converter(transform) {try {

        var $a, $b, TMP_5, self = this;

        ($a = ($b = self.converters).$each, $a.$$p = (TMP_5 = function(candidate){var self = TMP_5.$$s || this, $c;
if (candidate == null) candidate = nil;
        if ((($c = candidate['$handles?'](transform)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            Opal.ret(candidate)
            } else {
            return nil
          }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
        return self.$raise("Could not find a converter to handle transform: " + (transform));
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_6.$$arity = 1), nil) && 'find_converter';
    })($scope.get('Converter'), (($scope.get('Converter')).$$scope.get('Base')))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/converter/html5"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$default=', '$==', '$[]', '$instance', '$empty?', '$attr', '$>=', '$safe', '$attr?', '$<<', '$doctitle', '$include?', '$normalize_web_path', '$embed_primary_stylesheet', '$read_asset', '$normalize_system_path', '$===', '$coderay_stylesheet_name', '$embed_coderay_stylesheet', '$pygments_stylesheet_name', '$embed_pygments_stylesheet', '$docinfo', '$id', '$sections?', '$doctype', '$*', '$noheader', '$outline', '$has_header?', '$notitle', '$title', '$header', '$sub_macros', '$>', '$to_i', '$each', '$downcase', '$concat', '$content', '$footnotes?', '$!', '$index', '$text', '$footnotes', '$nofooter', '$inspect', '$!=', '$document', '$sections', '$level', '$special', '$numbered', '$caption', '$<=', '$sectnum', '$<', '$captioned_title', '$+', '$role', '$title?', '$icon_uri', '$compact', '$media_uri', '$option?', '$append_boolean_attribute', '$style', '$each_with_index', '$items', '$text?', '$blocks?', '$chomp', '$read_svg_contents', '$image_uri', '$to_sym', '$start_with?', '$end_with?', '$list_marker_keyword', '$parent', '$warn', '$context', '$times', '$size', '$columns', '$colspan', '$rowspan', '$rows', '$select', '$role?', '$insert', '$split', '$target', '$type', '$attributes', '$references', '$join', '$map', '$chop', '$read_contents', '$sub', '$gsub', '$match', '$length']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Html5Converter(){};
      var self = $Html5Converter = $klass($base, $super, 'Html5Converter', $Html5Converter);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_4, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_14, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_44, TMP_45, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_57, TMP_58, TMP_60, TMP_62, TMP_63, TMP_64, TMP_66;

      def.xml_mode = def.void_element_slash = def.stylesheets = nil;
      (($a = [[nil, nil, nil]]), $b = (Opal.cdecl($scope, 'QUOTE_TAGS', $hash2(["emphasis", "strong", "monospaced", "superscript", "subscript", "double", "single", "mark", "asciimath", "latexmath"], {"emphasis": ["<em>", "</em>", true], "strong": ["<strong>", "</strong>", true], "monospaced": ["<code>", "</code>", true], "superscript": ["<sup>", "</sup>", true], "subscript": ["<sub>", "</sub>", true], "double": ["&#8220;", "&#8221;", false], "single": ["&#8216;", "&#8217;", false], "mark": ["<mark>", "</mark>", true], "asciimath": ["\\$", "\\$", false], "latexmath": ["\\(", "\\)", false]}))), $b['$default='].apply($b, $a), $a[$a.length-1]);

      Opal.cdecl($scope, 'SvgPreambleRx', /\A.*?(?=<svg\b)/m);

      Opal.cdecl($scope, 'SvgStartTagRx', /\A<svg[^>]*>/);

      Opal.cdecl($scope, 'DimensionAttributeRx', /\s(?:width|height|style)=(["']).*?\1/);

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(backend, opts) {
        var $a, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        self.xml_mode = opts['$[]']("htmlsyntax")['$==']("xml");
        self.void_element_slash = (function() {if ((($a = self.xml_mode) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return nil
        }; return nil; })();
        return self.stylesheets = $scope.get('Stylesheets').$instance();
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$document', TMP_4 = function ːdocument(node) {
        var $a, $b, $c, $d, TMP_2, TMP_3, self = this, result = nil, slash = nil, br = nil, asset_uri_scheme = nil, cdn_base = nil, linkcss = nil, lang_attribute = nil, webfonts = nil, iconfont_stylesheet = nil, $case = nil, highlighter = nil, pygments_style = nil, docinfo_content = nil, body_attrs = nil, sectioned = nil, details = nil, authorcount = nil, highlightjs_path = nil, prettify_path = nil, eqnums_val = nil, eqnums_opt = nil;

        result = [];
        slash = self.void_element_slash;
        br = "<br" + (slash) + ">";
        if ((($a = ((asset_uri_scheme = (node.$attr("asset-uri-scheme", "https"))))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        linkcss = ((($a = $rb_ge(node.$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE')))) !== false && $a !== nil && $a != null) ? $a : (node['$attr?']("linkcss")));
        result['$<<']("<!DOCTYPE html>");
        lang_attribute = (function() {if ((($a = (node['$attr?']("nolang"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " lang=\"" + (node.$attr("lang", "en")) + "\""
        }; return nil; })();
        result['$<<']("<html" + ((function() {if ((($a = self.xml_mode) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " xmlns=\"http://www.w3.org/1999/xhtml\""
          } else {
          return nil
        }; return nil; })()) + (lang_attribute) + ">");
        result['$<<']("<head>\n<meta charset=\"" + (node.$attr("encoding", "UTF-8")) + "\"" + (slash) + ">\n<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"" + (slash) + "><![endif]-->\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"" + (slash) + ">\n<meta name=\"generator\" content=\"Asciidoctor " + (node.$attr("asciidoctor-version")) + "\"" + (slash) + ">");
        if ((($a = node['$attr?']("app-name")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<meta name=\"application-name\" content=\"" + (node.$attr("app-name")) + "\"" + (slash) + ">")};
        if ((($a = node['$attr?']("description")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<meta name=\"description\" content=\"" + (node.$attr("description")) + "\"" + (slash) + ">")};
        if ((($a = node['$attr?']("keywords")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<meta name=\"keywords\" content=\"" + (node.$attr("keywords")) + "\"" + (slash) + ">")};
        if ((($a = node['$attr?']("authors")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<meta name=\"author\" content=\"" + (node.$attr("authors")) + "\"" + (slash) + ">")};
        if ((($a = node['$attr?']("copyright")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<meta name=\"copyright\" content=\"" + (node.$attr("copyright")) + "\"" + (slash) + ">")};
        result['$<<']("<title>" + (node.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true}))) + "</title>");
        if ((($a = $scope.get('DEFAULT_STYLESHEET_KEYS')['$include?'](node.$attr("stylesheet"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (webfonts = node.$attr("webfonts"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (asset_uri_scheme) + "//fonts.googleapis.com/css?family=" + ((function() {if ((($a = webfonts['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return "Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"
              } else {
              return webfonts
            }; return nil; })()) + "\"" + (slash) + ">")};
          if (linkcss !== false && linkcss !== nil && linkcss != null) {
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path($scope.get('DEFAULT_STYLESHEET_NAME'), (node.$attr("stylesdir", "")), false)) + "\"" + (slash) + ">")
            } else {
            result['$<<'](self.stylesheets.$embed_primary_stylesheet())
          };
        } else if ((($a = node['$attr?']("stylesheet")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (linkcss !== false && linkcss !== nil && linkcss != null) {
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path((node.$attr("stylesheet")), (node.$attr("stylesdir", "")))) + "\"" + (slash) + ">")
            } else {
            result['$<<']("<style>\n" + (node.$read_asset(node.$normalize_system_path((node.$attr("stylesheet")), (node.$attr("stylesdir", ""))), $hash2(["warn_on_failure"], {"warn_on_failure": true}))) + "\n</style>")
          }};
        if ((($a = node['$attr?']("icons", "font")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = node['$attr?']("iconfont-remote")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (node.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/4.6.3/css/font-awesome.min.css")) + "\"" + (slash) + ">")
            } else {
            iconfont_stylesheet = "" + (node.$attr("iconfont-name", "font-awesome")) + ".css";
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(iconfont_stylesheet, (node.$attr("stylesdir", "")), false)) + "\"" + (slash) + ">");
          }};
        $case = (highlighter = node.$attr("source-highlighter"));if ("coderay"['$===']($case)) {if ((node.$attr("coderay-css", "class"))['$==']("class")) {
          if (linkcss !== false && linkcss !== nil && linkcss != null) {
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(self.stylesheets.$coderay_stylesheet_name(), (node.$attr("stylesdir", "")), false)) + "\"" + (slash) + ">")
            } else {
            result['$<<'](self.stylesheets.$embed_coderay_stylesheet())
          }}}else if ("pygments"['$===']($case)) {if ((node.$attr("pygments-css", "class"))['$==']("class")) {
          pygments_style = node.$attr("pygments-style");
          if (linkcss !== false && linkcss !== nil && linkcss != null) {
            result['$<<']("<link rel=\"stylesheet\" href=\"" + (node.$normalize_web_path(self.stylesheets.$pygments_stylesheet_name(pygments_style), (node.$attr("stylesdir", "")), false)) + "\"" + (slash) + ">")
            } else {
            result['$<<']((self.stylesheets.$embed_pygments_stylesheet(pygments_style)))
          };}};
        if ((($a = ((docinfo_content = node.$docinfo()))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](docinfo_content)
        };
        result['$<<']("</head>");
        body_attrs = [];
        if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          body_attrs['$<<']("id=\"" + (node.$id()) + "\"")};
        if ((($a = ($b = ($c = ($d = (sectioned = node['$sections?']()), $d !== false && $d !== nil && $d != null ?(node['$attr?']("toc-class")) : $d), $c !== false && $c !== nil && $c != null ?(node['$attr?']("toc")) : $c), $b !== false && $b !== nil && $b != null ?(node['$attr?']("toc-placement", "auto")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          body_attrs['$<<']("class=\"" + (node.$doctype()) + " " + (node.$attr("toc-class")) + " toc-" + (node.$attr("toc-position", "header")) + "\"")
          } else {
          body_attrs['$<<']("class=\"" + (node.$doctype()) + "\"")
        };
        if ((($a = node['$attr?']("max-width")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          body_attrs['$<<']("style=\"max-width: " + (node.$attr("max-width")) + ";\"")};
        result['$<<']("<body " + ($rb_times(body_attrs, " ")) + ">");
        if ((($a = node.$noheader()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<']("<div id=\"header\">");
          if (node.$doctype()['$==']("manpage")) {
            result['$<<']("<h1>" + (node.$doctitle()) + " Manual Page</h1>");
            if ((($a = ($b = (($c = sectioned !== false && sectioned !== nil && sectioned != null) ? (node['$attr?']("toc")) : sectioned), $b !== false && $b !== nil && $b != null ?(node['$attr?']("toc-placement", "auto")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<div id=\"toc\" class=\"" + (node.$attr("toc-class", "toc")) + "\">\n<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n</div>")};
            result['$<<']("<h2>" + (node.$attr("manname-title")) + "</h2>\n<div class=\"sectionbody\">\n<p>" + (node.$attr("manname")) + " - " + (node.$attr("manpurpose")) + "</p>\n</div>");
            } else {
            if ((($a = node['$has_header?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = node.$notitle()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                result['$<<']("<h1>" + (node.$header().$title()) + "</h1>")
              };
              details = [];
              if ((($a = node['$attr?']("author")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                details['$<<']("<span id=\"author\" class=\"author\">" + (node.$attr("author")) + "</span>" + (br));
                if ((($a = node['$attr?']("email")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  details['$<<']("<span id=\"email\" class=\"email\">" + (node.$sub_macros(node.$attr("email"))) + "</span>" + (br))};
                if ((($a = $rb_gt((authorcount = (node.$attr("authorcount")).$to_i()), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  ($a = ($b = ($range(2, authorcount, false))).$each, $a.$$p = (TMP_2 = function(idx){var self = TMP_2.$$s || this, $e;
if (idx == null) idx = nil;
                  details['$<<']("<span id=\"author" + (idx) + "\" class=\"author\">" + (node.$attr("author_" + (idx))) + "</span>" + (br));
                    if ((($e = node['$attr?']("email_" + (idx))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                      return details['$<<']("<span id=\"email" + (idx) + "\" class=\"email\">" + (node.$sub_macros(node.$attr("email_" + (idx)))) + "</span>" + (br))
                      } else {
                      return nil
                    };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b)};};
              if ((($a = node['$attr?']("revnumber")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                details['$<<']("<span id=\"revnumber\">" + ((((($a = (node.$attr("version-label"))) !== false && $a !== nil && $a != null) ? $a : "")).$downcase()) + " " + (node.$attr("revnumber")) + ((function() {if ((($a = (node['$attr?']("revdate"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  return ","
                  } else {
                  return ""
                }; return nil; })()) + "</span>")};
              if ((($a = node['$attr?']("revdate")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                details['$<<']("<span id=\"revdate\">" + (node.$attr("revdate")) + "</span>")};
              if ((($a = node['$attr?']("revremark")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                details['$<<']("" + (br) + "<span id=\"revremark\">" + (node.$attr("revremark")) + "</span>")};
              if ((($a = details['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                result['$<<']("<div class=\"details\">");
                result.$concat(details);
                result['$<<']("</div>");
              };};
            if ((($a = ($c = (($d = sectioned !== false && sectioned !== nil && sectioned != null) ? (node['$attr?']("toc")) : sectioned), $c !== false && $c !== nil && $c != null ?(node['$attr?']("toc-placement", "auto")) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<']("<div id=\"toc\" class=\"" + (node.$attr("toc-class", "toc")) + "\">\n<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n</div>")};
          };
          result['$<<']("</div>");
        };
        result['$<<']("<div id=\"content\">\n" + (node.$content()) + "\n</div>");
        if ((($a = ($c = node['$footnotes?'](), $c !== false && $c !== nil && $c != null ?(node['$attr?']("nofootnotes"))['$!']() : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div id=\"footnotes\">\n<hr" + (slash) + ">");
          ($a = ($c = node.$footnotes()).$each, $a.$$p = (TMP_3 = function(footnote){var self = TMP_3.$$s || this;
if (footnote == null) footnote = nil;
          return result['$<<']("<div class=\"footnote\" id=\"_footnote_" + (footnote.$index()) + "\">\n<a href=\"#_footnoteref_" + (footnote.$index()) + "\">" + (footnote.$index()) + "</a>. " + (footnote.$text()) + "\n</div>")}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c);
          result['$<<']("</div>");};
        if ((($a = node.$nofooter()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<']("<div id=\"footer\">");
          result['$<<']("<div id=\"footer-text\">");
          if ((($a = node['$attr?']("revnumber")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + (node.$attr("version-label")) + " " + (node.$attr("revnumber")) + (br))};
          if ((($a = ($d = (node['$attr?']("last-update-label")), $d !== false && $d !== nil && $d != null ?(node['$attr?']("reproducible"))['$!']() : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result['$<<']("" + (node.$attr("last-update-label")) + " " + (node.$attr("docdatetime")))};
          result['$<<']("</div>");
          result['$<<']("</div>");
        };
        if ((($a = ((docinfo_content = node.$docinfo("footer")))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result['$<<'](docinfo_content)
        };
        $case = highlighter;if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {highlightjs_path = node.$attr("highlightjsdir", "" + (cdn_base) + "/highlight.js/8.9.1");
        result['$<<']("<link rel=\"stylesheet\" href=\"" + (highlightjs_path) + "/styles/" + (node.$attr("highlightjs-theme", "github")) + ".min.css\"" + (slash) + ">");
        result['$<<']("<script src=\"" + (highlightjs_path) + "/highlight.min.js\"></script>\n<script>hljs.initHighlighting()</script>");}else if ("prettify"['$===']($case)) {prettify_path = node.$attr("prettifydir", "" + (cdn_base) + "/prettify/r298");
        result['$<<']("<link rel=\"stylesheet\" href=\"" + (prettify_path) + "/" + (node.$attr("prettify-theme", "prettify")) + ".min.css\"" + (slash) + ">");
        result['$<<']("<script src=\"" + (prettify_path) + "/prettify.min.js\"></script>\n<script>prettyPrint()</script>");};
        if ((($a = node['$attr?']("stem")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          eqnums_val = node.$attr("eqnums", "none");
          if ((($a = eqnums_val['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            eqnums_val = "AMS"};
          eqnums_opt = " equationNumbers: { autoNumber: \"" + (eqnums_val) + "\" } ";
          result['$<<']("<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  messageStyle: \"none\",\n  tex2jax: {\n    inlineMath: [" + ($scope.get('INLINE_MATH_DELIMITERS')['$[]']("latexmath").$inspect()) + "],\n    displayMath: [" + ($scope.get('BLOCK_MATH_DELIMITERS')['$[]']("latexmath").$inspect()) + "],\n    ignoreClass: \"nostem|nolatexmath\"\n  },\n  asciimath2jax: {\n    delimiters: [" + ($scope.get('BLOCK_MATH_DELIMITERS')['$[]']("asciimath").$inspect()) + "],\n    ignoreClass: \"nostem|noasciimath\"\n  },\n  TeX: {" + (eqnums_opt) + "}\n});\n</script>\n<script src=\"" + (cdn_base) + "/mathjax/2.6.0/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>");};
        result['$<<']("</body>");
        result['$<<']("</html>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$embedded', TMP_6 = function ːembedded(node) {
        var $a, $b, $c, $d, TMP_5, self = this, result = nil, id_attr = nil, toc_p = nil;

        result = [];
        if (node.$doctype()['$==']("manpage")) {
          if ((($a = node.$notitle()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return " id=\"" + (node.$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            result['$<<']("<h1" + (id_attr) + ">" + (node.$doctitle()) + " Manual Page</h1>");
          };
          result['$<<']("<h2>" + (node.$attr("manname-title")) + "</h2>\n<div class=\"sectionbody\">\n<p>" + (node.$attr("manname")) + " - " + (node.$attr("manpurpose")) + "</p>\n</div>");
        } else if ((($a = ($b = node['$has_header?'](), $b !== false && $b !== nil && $b != null ?node.$notitle()['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " id=\"" + (node.$id()) + "\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("<h1" + (id_attr) + ">" + (node.$header().$title()) + "</h1>");};
        if ((($a = ($b = ($c = ($d = node['$sections?'](), $d !== false && $d !== nil && $d != null ?(node['$attr?']("toc")) : $d), $c !== false && $c !== nil && $c != null ?((toc_p = node.$attr("toc-placement")))['$!=']("macro") : $c), $b !== false && $b !== nil && $b != null ?toc_p['$!=']("preamble") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div id=\"toc\" class=\"toc\">\n<div id=\"toctitle\">" + (node.$attr("toc-title")) + "</div>\n" + (self.$outline(node)) + "\n</div>")};
        result['$<<'](node.$content());
        if ((($a = ($b = node['$footnotes?'](), $b !== false && $b !== nil && $b != null ?(node['$attr?']("nofootnotes"))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div id=\"footnotes\">\n<hr" + (self.void_element_slash) + ">");
          ($a = ($b = node.$footnotes()).$each, $a.$$p = (TMP_5 = function(footnote){var self = TMP_5.$$s || this;
if (footnote == null) footnote = nil;
          return result['$<<']("<div class=\"footnote\" id=\"_footnote_" + (footnote.$index()) + "\">\n<a href=\"#_footnoteref_" + (footnote.$index()) + "\">" + (footnote.$index()) + "</a>. " + (footnote.$text()) + "\n</div>")}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
          result['$<<']("</div>");};
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$outline', TMP_8 = function ːoutline(node, opts) {
        var $a, $b, TMP_7, self = this, sectnumlevels = nil, toclevels = nil, result = nil, sections = nil, slevel = nil, first_section = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = node['$sections?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        sectnumlevels = ((($a = opts['$[]']("sectnumlevels")) !== false && $a !== nil && $a != null) ? $a : (node.$document().$attr("sectnumlevels", 3)).$to_i());
        toclevels = ((($a = opts['$[]']("toclevels")) !== false && $a !== nil && $a != null) ? $a : (node.$document().$attr("toclevels", 2)).$to_i());
        result = [];
        sections = node.$sections();
        slevel = ((first_section = sections['$[]'](0))).$level();
        if ((($a = (($b = slevel['$=='](0)) ? first_section.$special() : slevel['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          slevel = 1};
        result['$<<']("<ul class=\"sectlevel" + (slevel) + "\">");
        ($a = ($b = sections).$each, $a.$$p = (TMP_7 = function(section){var self = TMP_7.$$s || this, $c, $d, $e, section_num = nil, child_toc_level = nil;
if (section == null) section = nil;
        section_num = (function() {if ((($c = (($d = ($e = section.$numbered(), $e !== false && $e !== nil && $e != null ?section.$caption()['$!']() : $e), $d !== false && $d !== nil && $d != null ?$rb_le(section.$level(), sectnumlevels) : $d))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return "" + (section.$sectnum()) + " "
            } else {
            return nil
          }; return nil; })();
          if ((($c = ($d = $rb_lt(section.$level(), toclevels), $d !== false && $d !== nil && $d != null ?(child_toc_level = self.$outline(section, $hash2(["toclevels", "secnumlevels"], {"toclevels": toclevels, "secnumlevels": sectnumlevels}))) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            result['$<<']("<li><a href=\"#" + (section.$id()) + "\">" + (section_num) + (section.$captioned_title()) + "</a>");
            result['$<<'](child_toc_level);
            return result['$<<']("</li>");
            } else {
            return result['$<<']("<li><a href=\"#" + (section.$id()) + "\">" + (section_num) + (section.$captioned_title()) + "</a></li>")
          };}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
        result['$<<']("</ul>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_8.$$arity = -2);

      Opal.defn(self, '$section', TMP_9 = function ːsection(node) {
        var $a, $b, $c, self = this, slevel = nil, htag = nil, id_attr = nil, anchor = nil, link_start = nil, link_end = nil, id = nil, doc = nil, class_attr = nil, role = nil, sectnum = nil;

        slevel = node.$level();
        if ((($a = (($b = slevel['$=='](0)) ? node.$special() : slevel['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          slevel = 1};
        htag = "h" + ($rb_plus(slevel, 1));
        id_attr = anchor = link_start = link_end = nil;
        if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          id_attr = " id=\"" + (id = node.$id()) + "\"";
          if ((($a = ((doc = node.$document()))['$attr?']("sectanchors")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            anchor = "<a class=\"anchor\" href=\"#" + (id) + "\"></a>"};
          if ((($a = doc['$attr?']("sectlinks")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            link_start = "<a class=\"link\" href=\"#" + (id) + "\">";
            link_end = "</a>";};};
        if (slevel['$=='](0)) {
          return "<h1" + (id_attr) + " class=\"sect0\">" + (anchor) + (link_start) + (node.$title()) + (link_end) + "</h1>\n" + (node.$content())
          } else {
          class_attr = (function() {if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " class=\"sect" + (slevel) + " " + (role) + "\""
            } else {
            return " class=\"sect" + (slevel) + "\""
          }; return nil; })();
          sectnum = (function() {if ((($a = ($b = ($c = node.$numbered(), $c !== false && $c !== nil && $c != null ?node.$caption()['$!']() : $c), $b !== false && $b !== nil && $b != null ?$rb_le(slevel, (node.$document().$attr("sectnumlevels", 3)).$to_i()) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + (node.$sectnum()) + " "
            } else {
            return nil
          }; return nil; })();
          return "<div" + (class_attr) + ">\n<" + (htag) + (id_attr) + ">" + (anchor) + (link_start) + (sectnum) + (node.$captioned_title()) + (link_end) + "</" + (htag) + ">\n" + ((function() {if (slevel['$=='](1)) {
            return "<div class=\"sectionbody\">\n" + (node.$content()) + "\n</div>"
            } else {
            return node.$content()
          }; return nil; })()) + "\n</div>";
        };
      }, TMP_9.$$arity = 1);

      Opal.defn(self, '$admonition', TMP_10 = function ːadmonition(node) {
        var $a, $b, self = this, id_attr = nil, name = nil, title_element = nil, caption = nil, role = nil;

        id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        name = node.$attr("name");
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        caption = (function() {if ((($a = node.$document()['$attr?']("icons")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = (node.$document()['$attr?']("icons", "font")), $b !== false && $b !== nil && $b != null ?(node['$attr?']("icon"))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "<i class=\"fa icon-" + (name) + "\" title=\"" + (node.$caption()) + "\"></i>"
            } else {
            return "<img src=\"" + (node.$icon_uri(name)) + "\" alt=\"" + (node.$caption()) + "\"" + (self.void_element_slash) + ">"
          }
          } else {
          return "<div class=\"title\">" + (node.$caption()) + "</div>"
        }; return nil; })();
        return "<div" + (id_attr) + " class=\"admonitionblock " + (name) + (($a = (role = node.$role()), $a !== false && $a !== nil && $a != null ?" " + (role) : $a)) + "\">\n<table>\n<tr>\n<td class=\"icon\">\n" + (caption) + "\n</td>\n<td class=\"content\">\n" + (title_element) + (node.$content()) + "\n</td>\n</tr>\n</table>\n</div>";
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$audio', TMP_11 = function ːaudio(node) {
        var $a, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil;

        xml = self.xml_mode;
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["audioblock", node.$role()].$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">\n" + (title_element) + "<div class=\"content\">\n<audio src=\"" + (node.$media_uri(node.$attr("target"))) + "\"" + ((function() {if ((($a = (node['$option?']("autoplay"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.$append_boolean_attribute("autoplay", xml))
          } else {
          return nil
        }; return nil; })()) + ((function() {if ((($a = (node['$option?']("nocontrols"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return (self.$append_boolean_attribute("controls", xml))
        }; return nil; })()) + ((function() {if ((($a = (node['$option?']("loop"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.$append_boolean_attribute("loop", xml))
          } else {
          return nil
        }; return nil; })()) + ">\nYour browser does not support the audio tag.\n</audio>\n</div>\n</div>";
      }, TMP_11.$$arity = 1);

      Opal.defn(self, '$colist', TMP_14 = function ːcolist(node) {
        var $a, $b, TMP_12, $c, TMP_13, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil;

        result = [];
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["colist", node.$style(), node.$role()].$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        result['$<<']("<div" + (id_attribute) + (class_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div class=\"title\">" + (node.$title()) + "</div>")};
        if ((($a = node.$document()['$attr?']("icons")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<table>");
          font_icons = node.$document()['$attr?']("icons", "font");
          ($a = ($b = node.$items()).$each_with_index, $a.$$p = (TMP_12 = function(item, i){var self = TMP_12.$$s || this, num = nil, num_element = nil;
            if (self.void_element_slash == null) self.void_element_slash = nil;
if (item == null) item = nil;if (i == null) i = nil;
          num = $rb_plus(i, 1);
            num_element = (function() {if (font_icons !== false && font_icons !== nil && font_icons != null) {
              return "<i class=\"conum\" data-value=\"" + (num) + "\"></i><b>" + (num) + "</b>"
              } else {
              return "<img src=\"" + (node.$icon_uri("callouts/" + (num))) + "\" alt=\"" + (num) + "\"" + (self.void_element_slash) + ">"
            }; return nil; })();
            return result['$<<']("<tr>\n<td>" + (num_element) + "</td>\n<td>" + (item.$text()) + "</td>\n</tr>");}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $a).call($b);
          result['$<<']("</table>");
          } else {
          result['$<<']("<ol>");
          ($a = ($c = node.$items()).$each, $a.$$p = (TMP_13 = function(item){var self = TMP_13.$$s || this;
if (item == null) item = nil;
          return result['$<<']("<li>\n<p>" + (item.$text()) + "</p>\n</li>")}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($c);
          result['$<<']("</ol>");
        };
        result['$<<']("</div>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_14.$$arity = 1);

      Opal.defn(self, '$dlist', TMP_21 = function ːdlist(node) {
        var $a, $b, TMP_15, $c, TMP_17, $d, TMP_19, self = this, result = nil, id_attribute = nil, classes = nil, $case = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;

        result = [];
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = (function() {$case = node.$style();if ("qanda"['$===']($case)) {return ["qlist", "qanda", node.$role()]}else if ("horizontal"['$===']($case)) {return ["hdlist", node.$role()]}else {return ["dlist", node.$style(), node.$role()]}})().$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        result['$<<']("<div" + (id_attribute) + (class_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div class=\"title\">" + (node.$title()) + "</div>")};
        $case = node.$style();if ("qanda"['$===']($case)) {result['$<<']("<ol>");
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_15 = function(terms, dd){var self = TMP_15.$$s || this, $c, $d, TMP_16;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        result['$<<']("<li>");
          ($c = ($d = [].concat(Opal.to_a(terms))).$each, $c.$$p = (TMP_16 = function(dt){var self = TMP_16.$$s || this;
if (dt == null) dt = nil;
          return result['$<<']("<p><em>" + (dt.$text()) + "</em></p>")}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $c).call($d);
          if (dd !== false && dd !== nil && dd != null) {
            if ((($c = dd['$text?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              result['$<<']("<p>" + (dd.$text()) + "</p>")};
            if ((($c = dd['$blocks?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              result['$<<'](dd.$content())};};
          return result['$<<']("</li>");}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($b);
        result['$<<']("</ol>");}else if ("horizontal"['$===']($case)) {slash = self.void_element_slash;
        result['$<<']("<table>");
        if ((($a = ((($c = (node['$attr?']("labelwidth"))) !== false && $c !== nil && $c != null) ? $c : (node['$attr?']("itemwidth")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<colgroup>");
          col_style_attribute = (function() {if ((($a = (node['$attr?']("labelwidth"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " style=\"width: " + ((node.$attr("labelwidth")).$chomp("%")) + "%;\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("<col" + (col_style_attribute) + (slash) + ">");
          col_style_attribute = (function() {if ((($a = (node['$attr?']("itemwidth"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " style=\"width: " + ((node.$attr("itemwidth")).$chomp("%")) + "%;\""
            } else {
            return nil
          }; return nil; })();
          result['$<<']("<col" + (col_style_attribute) + (slash) + ">");
          result['$<<']("</colgroup>");};
        ($a = ($c = node.$items()).$each, $a.$$p = (TMP_17 = function(terms, dd){var self = TMP_17.$$s || this, $d, $e, TMP_18, terms_array = nil, last_term = nil;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        result['$<<']("<tr>");
          result['$<<']("<td class=\"hdlist1" + ((function() {if ((($d = (node['$option?']("strong"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return " strong"
            } else {
            return nil
          }; return nil; })()) + "\">");
          terms_array = [].concat(Opal.to_a(terms));
          last_term = terms_array['$[]'](-1);
          ($d = ($e = terms_array).$each, $d.$$p = (TMP_18 = function(dt){var self = TMP_18.$$s || this, $f;
if (dt == null) dt = nil;
          result['$<<'](dt.$text());
            if ((($f = dt['$!='](last_term)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              return result['$<<']("<br" + (slash) + ">")
              } else {
              return nil
            };}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $d).call($e);
          result['$<<']("</td>");
          result['$<<']("<td class=\"hdlist2\">");
          if (dd !== false && dd !== nil && dd != null) {
            if ((($d = dd['$text?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              result['$<<']("<p>" + (dd.$text()) + "</p>")};
            if ((($d = dd['$blocks?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              result['$<<'](dd.$content())};};
          result['$<<']("</td>");
          return result['$<<']("</tr>");}, TMP_17.$$s = self, TMP_17.$$arity = 2, TMP_17), $a).call($c);
        result['$<<']("</table>");}else {result['$<<']("<dl>");
        dt_style_attribute = (function() {if ((($a = node.$style()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " class=\"hdlist1\""
        }; return nil; })();
        ($a = ($d = node.$items()).$each, $a.$$p = (TMP_19 = function(terms, dd){var self = TMP_19.$$s || this, $e, $f, TMP_20;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        ($e = ($f = [].concat(Opal.to_a(terms))).$each, $e.$$p = (TMP_20 = function(dt){var self = TMP_20.$$s || this;
if (dt == null) dt = nil;
          return result['$<<']("<dt" + (dt_style_attribute) + ">" + (dt.$text()) + "</dt>")}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $e).call($f);
          if (dd !== false && dd !== nil && dd != null) {
            result['$<<']("<dd>");
            if ((($e = dd['$text?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              result['$<<']("<p>" + (dd.$text()) + "</p>")};
            if ((($e = dd['$blocks?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              result['$<<'](dd.$content())};
            return result['$<<']("</dd>");
            } else {
            return nil
          };}, TMP_19.$$s = self, TMP_19.$$arity = 2, TMP_19), $a).call($d);
        result['$<<']("</dl>");};
        result['$<<']("</div>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_21.$$arity = 1);

      Opal.defn(self, '$example', TMP_22 = function ːexample(node) {
        var $a, self = this, id_attribute = nil, title_element = nil, role = nil;

        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + " class=\"" + ((function() {if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $rb_times(["exampleblock", role], " ")
          } else {
          return "exampleblock"
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (node.$content()) + "\n</div>\n</div>";
      }, TMP_22.$$arity = 1);

      Opal.defn(self, '$floating_title', TMP_23 = function ːfloating_title(node) {
        var $a, self = this, tag_name = nil, id_attribute = nil, classes = nil;

        tag_name = "h" + ($rb_plus(node.$level(), 1));
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = [node.$style(), node.$role()].$compact();
        return "<" + (tag_name) + (id_attribute) + " class=\"" + ($rb_times(classes, " ")) + "\">" + (node.$title()) + "</" + (tag_name) + ">";
      }, TMP_23.$$arity = 1);

      Opal.defn(self, '$image', TMP_24 = function ːimage(node) {
        var $a, $b, $c, $d, self = this, target = nil, width_attr = nil, height_attr = nil, svg = nil, obj = nil, img = nil, fallback = nil, link = nil, id_attr = nil, classes = nil, class_attr = nil, styles = nil, style_attr = nil, title_el = nil;

        target = node.$attr("target");
        width_attr = (function() {if ((($a = (node['$attr?']("width"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " width=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        height_attr = (function() {if ((($a = (node['$attr?']("height"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " height=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        if ((($a = ($b = ($c = (((($d = (node['$attr?']("format", "svg", false))) !== false && $d !== nil && $d != null) ? $d : (target['$include?'](".svg")))), $c !== false && $c !== nil && $c != null ?$rb_lt(node.$document().$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE'))) : $c), $b !== false && $b !== nil && $b != null ?(((($c = (svg = (node['$option?']("inline")))) !== false && $c !== nil && $c != null) ? $c : (obj = (node['$option?']("interactive"))))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (svg !== false && svg !== nil && svg != null) {
            img = ((($a = (self.$read_svg_contents(node, target))) !== false && $a !== nil && $a != null) ? $a : "<span class=\"alt\">" + (node.$attr("alt")) + "</span>")
          } else if (obj !== false && obj !== nil && obj != null) {
            fallback = (function() {if ((($a = (node['$attr?']("fallback"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return "<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (width_attr) + (height_attr) + (self.void_element_slash) + ">"
              } else {
              return "<span class=\"alt\">" + (node.$attr("alt")) + "</span>"
            }; return nil; })();
            img = "<object type=\"image/svg+xml\" data=\"" + (node.$image_uri(target)) + "\"" + (width_attr) + (height_attr) + ">" + (fallback) + "</object>";}};
        ((($a = img) !== false && $a !== nil && $a != null) ? $a : img = "<img src=\"" + (node.$image_uri(target)) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (width_attr) + (height_attr) + (self.void_element_slash) + ">");
        if ((($a = (link = node.$attr("link"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          img = "<a class=\"image\" href=\"" + (link) + "\">" + (img) + "</a>"};
        id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["imageblock", node.$role()].$compact();
        class_attr = " class=\"" + ($rb_times(classes, " ")) + "\"";
        styles = [];
        if ((($a = node['$attr?']("align")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          styles['$<<']("text-align: " + (node.$attr("align")))};
        if ((($a = node['$attr?']("float")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          styles['$<<']("float: " + (node.$attr("float")))};
        style_attr = (function() {if ((($a = styles['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " style=\"" + ($rb_times(styles, ";")) + "\""
        }; return nil; })();
        title_el = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "\n<div class=\"title\">" + (node.$captioned_title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attr) + (class_attr) + (style_attr) + ">\n<div class=\"content\">\n" + (img) + "\n</div>" + (title_el) + "\n</div>";
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$listing', TMP_25 = function ːlisting(node) {
        var $a, self = this, nowrap = nil, language = nil, code_attrs = nil, $case = nil, pre_class = nil, pre_start = nil, pre_end = nil, id_attribute = nil, title_element = nil, role = nil;

        nowrap = ((($a = (node.$document()['$attr?']("prewrap"))['$!']()) !== false && $a !== nil && $a != null) ? $a : (node['$option?']("nowrap")));
        if (node.$style()['$==']("source")) {
          if ((($a = (language = node.$attr("language", nil, false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            code_attrs = " data-lang=\"" + (language) + "\""
            } else {
            code_attrs = nil
          };
          $case = node.$document().$attr("source-highlighter");if ("coderay"['$===']($case)) {pre_class = " class=\"CodeRay highlight" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\""}else if ("pygments"['$===']($case)) {pre_class = " class=\"pygments highlight" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\""}else if ("highlightjs"['$===']($case) || "highlight.js"['$===']($case)) {pre_class = " class=\"highlightjs highlight" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\"";
          if (language !== false && language !== nil && language != null) {
            code_attrs = " class=\"language-" + (language) + "\"" + (code_attrs)};}else if ("prettify"['$===']($case)) {pre_class = " class=\"prettyprint highlight" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + ((function() {if ((($a = (node['$attr?']("linenums"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " linenums"
            } else {
            return nil
          }; return nil; })()) + "\"";
          if (language !== false && language !== nil && language != null) {
            code_attrs = " class=\"language-" + (language) + "\"" + (code_attrs)};}else if ("html-pipeline"['$===']($case)) {pre_class = (function() {if (language !== false && language !== nil && language != null) {
            return " lang=\"" + (language) + "\""
            } else {
            return nil
          }; return nil; })();
          code_attrs = nil;}else {pre_class = " class=\"highlight" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
            return " nowrap"
            } else {
            return nil
          }; return nil; })()) + "\"";
          if (language !== false && language !== nil && language != null) {
            code_attrs = " class=\"language-" + (language) + "\"" + (code_attrs)};};
          pre_start = "<pre" + (pre_class) + "><code" + (code_attrs) + ">";
          pre_end = "</code></pre>";
          } else {
          pre_start = "<pre" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
            return " class=\"nowrap\""
            } else {
            return nil
          }; return nil; })()) + ">";
          pre_end = "</pre>";
        };
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$captioned_title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + " class=\"listingblock" + (($a = (role = node.$role()), $a !== false && $a !== nil && $a != null ?" " + (role) : $a)) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (pre_start) + (node.$content()) + (pre_end) + "\n</div>\n</div>";
      }, TMP_25.$$arity = 1);

      Opal.defn(self, '$literal', TMP_26 = function ːliteral(node) {
        var $a, self = this, id_attribute = nil, title_element = nil, nowrap = nil, role = nil;

        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        nowrap = ((($a = (node.$document()['$attr?']("prewrap"))['$!']()) !== false && $a !== nil && $a != null) ? $a : (node['$option?']("nowrap")));
        return "<div" + (id_attribute) + " class=\"literalblock" + (($a = (role = node.$role()), $a !== false && $a !== nil && $a != null ?" " + (role) : $a)) + "\">\n" + (title_element) + "<div class=\"content\">\n<pre" + ((function() {if (nowrap !== false && nowrap !== nil && nowrap != null) {
          return " class=\"nowrap\""
          } else {
          return nil
        }; return nil; })()) + ">" + (node.$content()) + "</pre>\n</div>\n</div>";
      }, TMP_26.$$arity = 1);

      Opal.defn(self, '$stem', TMP_27 = function ːstem(node) {
        var $a, $b, self = this, id_attribute = nil, title_element = nil, open = nil, close = nil, equation = nil, role = nil;

        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        $b = $scope.get('BLOCK_MATH_DELIMITERS')['$[]'](node.$style().$to_sym()), $a = Opal.to_ary($b), open = ($a[0] == null ? nil : $a[0]), close = ($a[1] == null ? nil : $a[1]), $b;
        if ((($a = ($b = (((equation = node.$content()))['$start_with?'](open)), $b !== false && $b !== nil && $b != null ?(equation['$end_with?'](close)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          equation = "" + (open) + (equation) + (close)
        };
        return "<div" + (id_attribute) + " class=\"" + ((function() {if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $rb_times(["stemblock", role], " ")
          } else {
          return "stemblock"
        }; return nil; })()) + "\">\n" + (title_element) + "<div class=\"content\">\n" + (equation) + "\n</div>\n</div>";
      }, TMP_27.$$arity = 1);

      Opal.defn(self, '$olist', TMP_29 = function ːolist(node) {
        var $a, $b, TMP_28, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil, reversed_attribute = nil;

        result = [];
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["olist", node.$style(), node.$role()].$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        result['$<<']("<div" + (id_attribute) + (class_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div class=\"title\">" + (node.$title()) + "</div>")};
        type_attribute = (function() {if ((($a = (keyword = node.$list_marker_keyword())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " type=\"" + (keyword) + "\""
          } else {
          return nil
        }; return nil; })();
        start_attribute = (function() {if ((($a = (node['$attr?']("start"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " start=\"" + (node.$attr("start")) + "\""
          } else {
          return nil
        }; return nil; })();
        reversed_attribute = (function() {if ((($a = (node['$option?']("reversed"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.$append_boolean_attribute("reversed", self.xml_mode))
          } else {
          return nil
        }; return nil; })();
        result['$<<']("<ol class=\"" + (node.$style()) + "\"" + (type_attribute) + (start_attribute) + (reversed_attribute) + ">");
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_28 = function(item){var self = TMP_28.$$s || this, $c;
if (item == null) item = nil;
        result['$<<']("<li>");
          result['$<<']("<p>" + (item.$text()) + "</p>");
          if ((($c = item['$blocks?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</li>");}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $a).call($b);
        result['$<<']("</ol>");
        result['$<<']("</div>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_29.$$arity = 1);

      Opal.defn(self, '$open', TMP_30 = function ːopen(node) {
        var $a, $b, $c, $d, self = this, style = nil, id_attr = nil, title_el = nil, role = nil;

        if (((style = node.$style()))['$==']("abstract")) {
          if ((($a = (($b = node.$parent()['$=='](node.$document())) ? node.$document().$doctype()['$==']("book") : node.$parent()['$=='](node.$document()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
            return "";
            } else {
            id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return " id=\"" + (node.$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            title_el = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return "<div class=\"title\">" + (node.$title()) + "</div>\n"
              } else {
              return nil
            }; return nil; })();
            return "<div" + (id_attr) + " class=\"quoteblock abstract" + (($a = (role = node.$role()), $a !== false && $a !== nil && $a != null ?" " + (role) : $a)) + "\">\n" + (title_el) + "<blockquote>\n" + (node.$content()) + "\n</blockquote>\n</div>";
          }
        } else if ((($a = (($b = style['$==']("partintro")) ? (((($c = ((($d = $rb_gt(node.$level(), 0)) !== false && $d !== nil && $d != null) ? $d : node.$parent().$context()['$!=']("section"))) !== false && $c !== nil && $c != null) ? $c : node.$document().$doctype()['$!=']("book"))) : style['$==']("partintro"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.");
          return "";
          } else {
          id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " id=\"" + (node.$id()) + "\""
            } else {
            return nil
          }; return nil; })();
          title_el = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "<div class=\"title\">" + (node.$title()) + "</div>\n"
            } else {
            return nil
          }; return nil; })();
          return "<div" + (id_attr) + " class=\"openblock" + ((function() {if ((($a = (($b = style !== false && style !== nil && style != null) ? style['$!=']("open") : style)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " " + (style)
            } else {
            return ""
          }; return nil; })()) + (($a = (role = node.$role()), $a !== false && $a !== nil && $a != null ?" " + (role) : $a)) + "\">\n" + (title_el) + "<div class=\"content\">\n" + (node.$content()) + "\n</div>\n</div>";
        };
      }, TMP_30.$$arity = 1);

      Opal.defn(self, '$page_break', TMP_31 = function ːpage_break(node) {
        var self = this;

        return "<div style=\"page-break-after: always;\"></div>";
      }, TMP_31.$$arity = 1);

      Opal.defn(self, '$paragraph', TMP_32 = function ːparagraph(node) {
        var $a, self = this, class_attribute = nil, attributes = nil;

        class_attribute = (function() {if ((($a = node.$role()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "class=\"paragraph " + (node.$role()) + "\""
          } else {
          return "class=\"paragraph\""
        }; return nil; })();
        attributes = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "id=\"" + (node.$id()) + "\" " + (class_attribute)
          } else {
          return class_attribute
        }; return nil; })();
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div " + (attributes) + ">\n<div class=\"title\">" + (node.$title()) + "</div>\n<p>" + (node.$content()) + "</p>\n</div>"
          } else {
          return "<div " + (attributes) + ">\n<p>" + (node.$content()) + "</p>\n</div>"
        };
      }, TMP_32.$$arity = 1);

      Opal.defn(self, '$preamble', TMP_33 = function ːpreamble(node) {
        var $a, $b, $c, self = this, doc = nil, toc = nil;

        if ((($a = ($b = ($c = ((doc = node.$document()))['$attr?']("toc-placement", "preamble"), $c !== false && $c !== nil && $c != null ?doc['$sections?']() : $c), $b !== false && $b !== nil && $b != null ?(doc['$attr?']("toc")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          toc = "\n<div id=\"toc\" class=\"" + (doc.$attr("toc-class", "toc")) + "\">\n<div id=\"toctitle\">" + (doc.$attr("toc-title")) + "</div>\n" + (self.$outline(doc)) + "\n</div>"
          } else {
          toc = nil
        };
        return "<div id=\"preamble\">\n<div class=\"sectionbody\">\n" + (node.$content()) + "\n</div>" + (toc) + "\n</div>";
      }, TMP_33.$$arity = 1);

      Opal.defn(self, '$quote', TMP_34 = function ːquote(node) {
        var $a, $b, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;

        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["quoteblock", node.$role()].$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "\n<div class=\"title\">" + (node.$title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        attribution = (function() {if ((($a = (node['$attr?']("attribution"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (node.$attr("attribution"))
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ((($a = (node['$attr?']("citetitle"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (node.$attr("citetitle"))
          } else {
          return nil
        }; return nil; })();
        if ((($a = ((($b = attribution) !== false && $b !== nil && $b != null) ? $b : citetitle)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          cite_element = (function() {if (citetitle !== false && citetitle !== nil && citetitle != null) {
            return "<cite>" + (citetitle) + "</cite>"
            } else {
            return nil
          }; return nil; })();
          attribution_text = (function() {if (attribution !== false && attribution !== nil && attribution != null) {
            return "&#8212; " + (attribution) + ((function() {if (citetitle !== false && citetitle !== nil && citetitle != null) {
              return "<br" + (self.void_element_slash) + ">\n"
              } else {
              return nil
            }; return nil; })())
            } else {
            return nil
          }; return nil; })();
          attribution_element = "\n<div class=\"attribution\">\n" + (attribution_text) + (cite_element) + "\n</div>";
          } else {
          attribution_element = nil
        };
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<blockquote>\n" + (node.$content()) + "\n</blockquote>" + (attribution_element) + "\n</div>";
      }, TMP_34.$$arity = 1);

      Opal.defn(self, '$thematic_break', TMP_35 = function ːthematic_break(node) {
        var self = this;

        return "<hr" + (self.void_element_slash) + ">";
      }, TMP_35.$$arity = 1);

      Opal.defn(self, '$sidebar', TMP_36 = function ːsidebar(node) {
        var $a, self = this, id_attribute = nil, title_element = nil, role = nil;

        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<div class=\"title\">" + (node.$title()) + "</div>\n"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + " class=\"" + ((function() {if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $rb_times(["sidebarblock", role], " ")
          } else {
          return "sidebarblock"
        }; return nil; })()) + "\">\n<div class=\"content\">\n" + (title_element) + (node.$content()) + "\n</div>\n</div>";
      }, TMP_36.$$arity = 1);

      Opal.defn(self, '$table', TMP_44 = function ːtable(node) {
        var $a, $b, TMP_37, $c, TMP_38, $d, TMP_39, $e, $f, TMP_43, self = this, result = nil, id_attribute = nil, classes = nil, styles = nil, role = nil, class_attribute = nil, style_attribute = nil, slash = nil, tag = nil;

        result = [];
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["tableblock", "frame-" + (node.$attr("frame", "all")), "grid-" + (node.$attr("grid", "all"))];
        styles = [];
        if ((($a = ($b = (node['$option?']("autowidth")), $b !== false && $b !== nil && $b != null ?(node['$attr?']("width", nil, false))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else if ((($a = node['$attr?']("tablepcwidth", 100)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          classes['$<<']("spread")
          } else {
          styles['$<<']("width: " + (node.$attr("tablepcwidth")) + "%;")
        };
        if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          classes['$<<'](role)};
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        if ((($a = node['$attr?']("float")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          styles['$<<']("float: " + (node.$attr("float")) + ";")};
        style_attribute = (function() {if ((($a = styles['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " style=\"" + ($rb_times(styles, " ")) + "\""
        }; return nil; })();
        result['$<<']("<table" + (id_attribute) + (class_attribute) + (style_attribute) + ">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<caption class=\"title\">" + (node.$captioned_title()) + "</caption>")};
        if ((($a = $rb_gt((node.$attr("rowcount")), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          slash = self.void_element_slash;
          result['$<<']("<colgroup>");
          if ((($a = node['$option?']("autowidth")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            tag = "<col" + (slash) + ">";
            ($a = ($b = node.$columns().$size()).$times, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this;

            return result['$<<'](tag)}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($b);
            } else {
            ($a = ($c = node.$columns()).$each, $a.$$p = (TMP_38 = function(col){var self = TMP_38.$$s || this;
if (col == null) col = nil;
            return result['$<<']("<col style=\"width: " + (col.$attr("colpcwidth")) + "%;\"" + (slash) + ">")}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($c)
          };
          result['$<<']("</colgroup>");
          ($a = ($d = ($e = ($f = ["head", "foot", "body"]).$select, $e.$$p = (TMP_43 = function(tsec){var self = TMP_43.$$s || this;
if (tsec == null) tsec = nil;
          return node.$rows()['$[]'](tsec)['$empty?']()['$!']()}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43), $e).call($f)).$each, $a.$$p = (TMP_39 = function(tsec){var self = TMP_39.$$s || this, $e, $f, TMP_40;
if (tsec == null) tsec = nil;
          result['$<<']("<t" + (tsec) + ">");
            ($e = ($f = node.$rows()['$[]'](tsec)).$each, $e.$$p = (TMP_40 = function(row){var self = TMP_40.$$s || this, $g, $h, TMP_41;
if (row == null) row = nil;
            result['$<<']("<tr>");
              ($g = ($h = row).$each, $g.$$p = (TMP_41 = function(cell){var self = TMP_41.$$s || this, $i, $j, TMP_42, $k, cell_content = nil, $case = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;
if (cell == null) cell = nil;
              if (tsec['$==']("head")) {
                  cell_content = cell.$text()
                  } else {
                  $case = cell.$style();if ("asciidoc"['$===']($case)) {cell_content = "<div>" + (cell.$content()) + "</div>"}else if ("verse"['$===']($case)) {cell_content = "<div class=\"verse\">" + (cell.$text()) + "</div>"}else if ("literal"['$===']($case)) {cell_content = "<div class=\"literal\"><pre>" + (cell.$text()) + "</pre></div>"}else {cell_content = "";
                  ($i = ($j = cell.$content()).$each, $i.$$p = (TMP_42 = function(text){var self = TMP_42.$$s || this;
if (text == null) text = nil;
                  return cell_content = "" + (cell_content) + "<p class=\"tableblock\">" + (text) + "</p>"}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $i).call($j);}
                };
                cell_tag_name = ((function() {if ((($i = ((($k = tsec['$==']("head")) !== false && $k !== nil && $k != null) ? $k : cell.$style()['$==']("header"))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                  return "th"
                  } else {
                  return "td"
                }; return nil; })());
                cell_class_attribute = " class=\"tableblock halign-" + (cell.$attr("halign")) + " valign-" + (cell.$attr("valign")) + "\"";
                cell_colspan_attribute = (function() {if ((($i = cell.$colspan()) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                  return " colspan=\"" + (cell.$colspan()) + "\""
                  } else {
                  return nil
                }; return nil; })();
                cell_rowspan_attribute = (function() {if ((($i = cell.$rowspan()) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                  return " rowspan=\"" + (cell.$rowspan()) + "\""
                  } else {
                  return nil
                }; return nil; })();
                cell_style_attribute = (function() {if ((($i = (node.$document()['$attr?']("cellbgcolor"))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                  return " style=\"background-color: " + (node.$document().$attr("cellbgcolor")) + ";\""
                  } else {
                  return nil
                }; return nil; })();
                return result['$<<']("<" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + ">" + (cell_content) + "</" + (cell_tag_name) + ">");}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $g).call($h);
              return result['$<<']("</tr>");}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $e).call($f);
            return result['$<<']("</t" + (tsec) + ">");}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $a).call($d);};
        result['$<<']("</table>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_44.$$arity = 1);

      Opal.defn(self, '$toc', TMP_45 = function ːtoc(node) {
        var $a, $b, $c, self = this, doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;

        if ((($a = ($b = ($c = ((doc = node.$document()))['$attr?']("toc-placement", "macro"), $c !== false && $c !== nil && $c != null ?doc['$sections?']() : $c), $b !== false && $b !== nil && $b != null ?(doc['$attr?']("toc")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return "<!-- toc disabled -->"
        };
        if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          id_attr = " id=\"" + (node.$id()) + "\"";
          title_id_attr = " id=\"" + (node.$id()) + "title\"";
          } else {
          id_attr = " id=\"toc\"";
          title_id_attr = " id=\"toctitle\"";
        };
        title = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return node.$title()
          } else {
          return (doc.$attr("toc-title"))
        }; return nil; })();
        levels = (function() {if ((($a = (node['$attr?']("levels"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (node.$attr("levels")).$to_i()
          } else {
          return nil
        }; return nil; })();
        role = (function() {if ((($a = node['$role?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return node.$role()
          } else {
          return (doc.$attr("toc-class", "toc"))
        }; return nil; })();
        return "<div" + (id_attr) + " class=\"" + (role) + "\">\n<div" + (title_id_attr) + " class=\"title\">" + (title) + "</div>\n" + (self.$outline(doc, $hash2(["toclevels"], {"toclevels": levels}))) + "\n</div>";
      }, TMP_45.$$arity = 1);

      Opal.defn(self, '$ulist', TMP_47 = function ːulist(node) {
        var $a, $b, TMP_46, self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;

        result = [];
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        div_classes = ["ulist", node.$style(), node.$role()].$compact();
        marker_checked = nil;
        marker_unchecked = nil;
        if ((($a = (checklist = node['$option?']("checklist"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          div_classes.$insert(1, "checklist");
          ul_class_attribute = " class=\"checklist\"";
          if ((($a = node['$option?']("interactive")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.xml_mode) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked=\"checked\"/> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"/> ";
              } else {
              marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked> ";
              marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\"> ";
            }
          } else if ((($a = node.$document()['$attr?']("icons", "font")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            marker_checked = "<i class=\"fa fa-check-square-o\"></i> ";
            marker_unchecked = "<i class=\"fa fa-square-o\"></i> ";
            } else {
            marker_checked = "&#10003; ";
            marker_unchecked = "&#10063; ";
          };
          } else {
          ul_class_attribute = (function() {if ((($a = node.$style()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " class=\"" + (node.$style()) + "\""
            } else {
            return nil
          }; return nil; })()
        };
        result['$<<']("<div" + (id_attribute) + " class=\"" + ($rb_times(div_classes, " ")) + "\">");
        if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result['$<<']("<div class=\"title\">" + (node.$title()) + "</div>")};
        result['$<<']("<ul" + (ul_class_attribute) + ">");
        ($a = ($b = node.$items()).$each, $a.$$p = (TMP_46 = function(item){var self = TMP_46.$$s || this, $c, $d;
if (item == null) item = nil;
        result['$<<']("<li>");
          if ((($c = (($d = checklist !== false && checklist !== nil && checklist != null) ? (item['$attr?']("checkbox")) : checklist)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            result['$<<']("<p>" + ((function() {if ((($c = (item['$attr?']("checked"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return marker_checked
              } else {
              return marker_unchecked
            }; return nil; })()) + (item.$text()) + "</p>")
            } else {
            result['$<<']("<p>" + (item.$text()) + "</p>")
          };
          if ((($c = item['$blocks?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            result['$<<'](item.$content())};
          return result['$<<']("</li>");}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $a).call($b);
        result['$<<']("</ul>");
        result['$<<']("</div>");
        return $rb_times(result, $scope.get('EOL'));
      }, TMP_47.$$arity = 1);

      Opal.defn(self, '$verse', TMP_48 = function ːverse(node) {
        var $a, $b, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;

        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["verseblock", node.$role()].$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "\n<div class=\"title\">" + (node.$title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        attribution = (function() {if ((($a = (node['$attr?']("attribution"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (node.$attr("attribution"))
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ((($a = (node['$attr?']("citetitle"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (node.$attr("citetitle"))
          } else {
          return nil
        }; return nil; })();
        if ((($a = ((($b = attribution) !== false && $b !== nil && $b != null) ? $b : citetitle)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          cite_element = (function() {if (citetitle !== false && citetitle !== nil && citetitle != null) {
            return "<cite>" + (citetitle) + "</cite>"
            } else {
            return nil
          }; return nil; })();
          attribution_text = (function() {if (attribution !== false && attribution !== nil && attribution != null) {
            return "&#8212; " + (attribution) + ((function() {if (citetitle !== false && citetitle !== nil && citetitle != null) {
              return "<br" + (self.void_element_slash) + ">\n"
              } else {
              return nil
            }; return nil; })())
            } else {
            return nil
          }; return nil; })();
          attribution_element = "\n<div class=\"attribution\">\n" + (attribution_text) + (cite_element) + "\n</div>";
          } else {
          attribution_element = nil
        };
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<pre class=\"content\">" + (node.$content()) + "</pre>" + (attribution_element) + "\n</div>";
      }, TMP_48.$$arity = 1);

      Opal.defn(self, '$video', TMP_49 = function ːvideo(node) {
        var $a, $b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, autoplay_param = nil, loop_param = nil, rel_param_val = nil, start_param = nil, end_param = nil, controls_param = nil, fs_param = nil, fs_attribute = nil, modest_param = nil, theme_param = nil, hl_param = nil, target = nil, list = nil, list_param = nil, playlist = nil, poster_attribute = nil, poster = nil, start_t = nil, end_t = nil, time_anchor = nil;

        xml = self.xml_mode;
        id_attribute = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " id=\"" + (node.$id()) + "\""
          } else {
          return nil
        }; return nil; })();
        classes = ["videoblock", node.$role()].$compact();
        class_attribute = " class=\"" + ($rb_times(classes, " ")) + "\"";
        title_element = (function() {if ((($a = node['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "\n<div class=\"title\">" + (node.$captioned_title()) + "</div>"
          } else {
          return nil
        }; return nil; })();
        width_attribute = (function() {if ((($a = (node['$attr?']("width"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " width=\"" + (node.$attr("width")) + "\""
          } else {
          return nil
        }; return nil; })();
        height_attribute = (function() {if ((($a = (node['$attr?']("height"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " height=\"" + (node.$attr("height")) + "\""
          } else {
          return nil
        }; return nil; })();
        return (function() {$case = node.$attr("poster");if ("vimeo"['$===']($case)) {if ((($a = ((asset_uri_scheme = (node.$document().$attr("asset-uri-scheme", "https"))))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        start_anchor = (function() {if ((($a = (node['$attr?']("start", nil, false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "#at=" + (node.$attr("start"))
          } else {
          return nil
        }; return nil; })();
        delimiter = "?";
        autoplay_param = (function() {if ((($a = (node['$option?']("autoplay"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + (delimiter) + "autoplay=1"
          } else {
          return nil
        }; return nil; })();
        if (autoplay_param !== false && autoplay_param !== nil && autoplay_param != null) {
          delimiter = "&amp;"};
        loop_param = (function() {if ((($a = (node['$option?']("loop"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + (delimiter) + "loop=1"
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<div class=\"content\">\n<iframe" + (width_attribute) + (height_attribute) + " src=\"" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (node.$attr("target")) + (start_anchor) + (autoplay_param) + (loop_param) + "\" frameborder=\"0\"" + ((function() {if ((($a = (node['$option?']("nofullscreen"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return (self.$append_boolean_attribute("allowfullscreen", xml))
        }; return nil; })()) + "></iframe>\n</div>\n</div>";}else if ("youtube"['$===']($case)) {if ((($a = ((asset_uri_scheme = (node.$document().$attr("asset-uri-scheme", "https"))))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        rel_param_val = (function() {if ((($a = (node['$option?']("related"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 1
          } else {
          return 0
        }; return nil; })();
        start_param = (function() {if ((($a = (node['$attr?']("start", nil, false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;start=" + (node.$attr("start"))
          } else {
          return nil
        }; return nil; })();
        end_param = (function() {if ((($a = (node['$attr?']("end", nil, false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;end=" + (node.$attr("end"))
          } else {
          return nil
        }; return nil; })();
        autoplay_param = (function() {if ((($a = (node['$option?']("autoplay"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;autoplay=1"
          } else {
          return nil
        }; return nil; })();
        loop_param = (function() {if ((($a = (node['$option?']("loop"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;loop=1"
          } else {
          return nil
        }; return nil; })();
        controls_param = (function() {if ((($a = (node['$option?']("nocontrols"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;controls=0"
          } else {
          return nil
        }; return nil; })();
        if ((($a = node['$option?']("nofullscreen")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          fs_param = "&amp;fs=0";
          fs_attribute = nil;
          } else {
          fs_param = nil;
          fs_attribute = self.$append_boolean_attribute("allowfullscreen", xml);
        };
        modest_param = (function() {if ((($a = (node['$option?']("modest"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;modestbranding=1"
          } else {
          return nil
        }; return nil; })();
        theme_param = (function() {if ((($a = (node['$attr?']("theme", nil, false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;theme=" + (node.$attr("theme"))
          } else {
          return nil
        }; return nil; })();
        hl_param = (function() {if ((($a = (node['$attr?']("lang"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "&amp;hl=" + (node.$attr("lang"))
          } else {
          return nil
        }; return nil; })();
        $b = (node.$attr("target")).$split("/", 2), $a = Opal.to_ary($b), target = ($a[0] == null ? nil : $a[0]), list = ($a[1] == null ? nil : $a[1]), $b;
        if ((($a = (((($b = list) !== false && $b !== nil && $b != null) ? $b : list = (node.$attr("list", nil, false))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          list_param = "&amp;list=" + (list)
          } else {
          $b = target.$split(",", 2), $a = Opal.to_ary($b), target = ($a[0] == null ? nil : $a[0]), playlist = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = (((($b = playlist) !== false && $b !== nil && $b != null) ? $b : playlist = (node.$attr("playlist", nil, false))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            list_param = "&amp;playlist=" + (playlist)
            } else {
            list_param = (function() {if (loop_param !== false && loop_param !== nil && loop_param != null) {
              return "&amp;playlist=" + (target)
              } else {
              return nil
            }; return nil; })()
          };
        };
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<div class=\"content\">\n<iframe" + (width_attribute) + (height_attribute) + " src=\"" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (target) + "?rel=" + (rel_param_val) + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (controls_param) + (list_param) + (fs_param) + (modest_param) + (theme_param) + (hl_param) + "\" frameborder=\"0\"" + (fs_attribute) + "></iframe>\n</div>\n</div>";}else {poster_attribute = (function() {if ((($a = (("") + (poster = node.$attr("poster")))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return " poster=\"" + (node.$media_uri(poster)) + "\""
        }; return nil; })();
        start_t = node.$attr("start", nil, false);
        end_t = node.$attr("end", nil, false);
        time_anchor = (function() {if ((($a = (((($b = start_t) !== false && $b !== nil && $b != null) ? $b : end_t))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "#t=" + (start_t) + ((function() {if (end_t !== false && end_t !== nil && end_t != null) {
            return ","
            } else {
            return nil
          }; return nil; })()) + (end_t)
          } else {
          return nil
        }; return nil; })();
        return "<div" + (id_attribute) + (class_attribute) + ">" + (title_element) + "\n<div class=\"content\">\n<video src=\"" + (node.$media_uri(node.$attr("target"))) + (time_anchor) + "\"" + (width_attribute) + (height_attribute) + (poster_attribute) + ((function() {if ((($a = (node['$option?']("autoplay"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.$append_boolean_attribute("autoplay", xml))
          } else {
          return nil
        }; return nil; })()) + ((function() {if ((($a = (node['$option?']("nocontrols"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return (self.$append_boolean_attribute("controls", xml))
        }; return nil; })()) + ((function() {if ((($a = (node['$option?']("loop"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.$append_boolean_attribute("loop", xml))
          } else {
          return nil
        }; return nil; })()) + ">\nYour browser does not support the video tag.\n</video>\n</div>\n</div>";}})();
      }, TMP_49.$$arity = 1);

      Opal.defn(self, '$inline_anchor', TMP_50 = function ːinline_anchor(node) {
        var $a, $b, self = this, target = nil, $case = nil, refid = nil, text = nil, attrs = nil, role = nil;

        target = node.$target();
        return (function() {$case = node.$type();if ("xref"['$===']($case)) {refid = ((($a = node.$attributes()['$[]']("refid")) !== false && $a !== nil && $a != null) ? $a : target);
        text = ((($a = node.$text()) !== false && $a !== nil && $a != null) ? $a : (((($b = node.$document().$references()['$[]']("ids")['$[]'](refid)) !== false && $b !== nil && $b != null) ? $b : "[" + (refid) + "]")));
        return "<a href=\"" + (target) + "\">" + (text) + "</a>";}else if ("ref"['$===']($case)) {return "<a id=\"" + (target) + "\"></a>"}else if ("link"['$===']($case)) {attrs = [];
        if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrs['$<<'](" id=\"" + (node.$id()) + "\"")};
        if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrs['$<<'](" class=\"" + (role) + "\"")};
        if ((($a = node['$attr?']("title", nil, false)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrs['$<<'](" title=\"" + (node.$attr("title")) + "\"")};
        if ((($a = node['$attr?']("window", nil, false)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrs['$<<'](" target=\"" + (node.$attr("window")) + "\"")};
        return "<a href=\"" + (target) + "\"" + (attrs.$join()) + ">" + (node.$text()) + "</a>";}else if ("bibref"['$===']($case)) {return "<a id=\"" + (target) + "\"></a>[" + (target) + "]"}else {return self.$warn("asciidoctor: WARNING: unknown anchor type: " + (node.$type().$inspect()))}})();
      }, TMP_50.$$arity = 1);

      Opal.defn(self, '$inline_break', TMP_51 = function ːinline_break(node) {
        var self = this;

        return "" + (node.$text()) + "<br" + (self.void_element_slash) + ">";
      }, TMP_51.$$arity = 1);

      Opal.defn(self, '$inline_button', TMP_52 = function ːinline_button(node) {
        var self = this;

        return "<b class=\"button\">" + (node.$text()) + "</b>";
      }, TMP_52.$$arity = 1);

      Opal.defn(self, '$inline_callout', TMP_53 = function ːinline_callout(node) {
        var $a, self = this, src = nil;

        if ((($a = node.$document()['$attr?']("icons", "font")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<i class=\"conum\" data-value=\"" + (node.$text()) + "\"></i><b>(" + (node.$text()) + ")</b>"
        } else if ((($a = node.$document()['$attr?']("icons")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          src = node.$icon_uri("callouts/" + (node.$text()));
          return "<img src=\"" + (src) + "\" alt=\"" + (node.$text()) + "\"" + (self.void_element_slash) + ">";
          } else {
          return "<b class=\"conum\">(" + (node.$text()) + ")</b>"
        };
      }, TMP_53.$$arity = 1);

      Opal.defn(self, '$inline_footnote', TMP_54 = function ːinline_footnote(node) {
        var $a, self = this, index = nil, id_attr = nil;

        if ((($a = (index = node.$attr("index"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (node.$type()['$==']("xref")) {
            return "<sup class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnote_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</sup>"
            } else {
            id_attr = (function() {if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return " id=\"_footnote_" + (node.$id()) + "\""
              } else {
              return nil
            }; return nil; })();
            return "<sup class=\"footnote\"" + (id_attr) + ">[<a id=\"_footnoteref_" + (index) + "\" class=\"footnote\" href=\"#_footnote_" + (index) + "\" title=\"View footnote.\">" + (index) + "</a>]</sup>";
          }
        } else if (node.$type()['$==']("xref")) {
          return "<sup class=\"footnoteref red\" title=\"Unresolved footnote reference.\">[" + (node.$text()) + "]</sup>"
          } else {
          return nil
        };
      }, TMP_54.$$arity = 1);

      Opal.defn(self, '$inline_image', TMP_57 = function ːinline_image(node) {
        var $a, $b, TMP_55, $c, TMP_56, $d, $e, $f, $g, self = this, type = nil, class_attr_val = nil, title_attr = nil, img = nil, target = nil, attrs = nil, svg = nil, obj = nil, fallback = nil, window_attr = nil, role = nil, style_attr = nil;

        if ((($a = (($b = ((type = node.$type()))['$==']("icon")) ? (node.$document()['$attr?']("icons", "font")) : ((type = node.$type()))['$==']("icon"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          class_attr_val = "fa fa-" + (node.$target());
          ($a = ($b = $hash2(["size", "rotate", "flip"], {"size": "fa-", "rotate": "fa-rotate-", "flip": "fa-flip-"})).$each, $a.$$p = (TMP_55 = function(key, prefix){var self = TMP_55.$$s || this, $c;
if (key == null) key = nil;if (prefix == null) prefix = nil;
          if ((($c = node['$attr?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return class_attr_val = "" + (class_attr_val) + " " + (prefix) + (node.$attr(key))
              } else {
              return nil
            }}, TMP_55.$$s = self, TMP_55.$$arity = 2, TMP_55), $a).call($b);
          title_attr = (function() {if ((($a = (node['$attr?']("title"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " title=\"" + (node.$attr("title")) + "\""
            } else {
            return nil
          }; return nil; })();
          img = "<i class=\"" + (class_attr_val) + "\"" + (title_attr) + "></i>";
        } else if ((($a = (($c = type['$==']("icon")) ? (node.$document()['$attr?']("icons"))['$!']() : type['$==']("icon"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          img = "[" + (node.$attr("alt")) + "]"
          } else {
          target = node.$target();
          attrs = ($a = ($c = ["width", "height", "title"]).$map, $a.$$p = (TMP_56 = function(name){var self = TMP_56.$$s || this, $d;
if (name == null) name = nil;
          if ((($d = (node['$attr?'](name))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return " " + (name) + "=\"" + (node.$attr(name)) + "\""
              } else {
              return nil
            }}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56), $a).call($c).$join();
          if ((($a = ($d = ($e = ($f = type['$!=']("icon"), $f !== false && $f !== nil && $f != null ?(((($g = (node['$attr?']("format", "svg", false))) !== false && $g !== nil && $g != null) ? $g : (target['$include?'](".svg")))) : $f), $e !== false && $e !== nil && $e != null ?$rb_lt(node.$document().$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE'))) : $e), $d !== false && $d !== nil && $d != null ?(((($e = (svg = (node['$option?']("inline")))) !== false && $e !== nil && $e != null) ? $e : (obj = (node['$option?']("interactive"))))) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (svg !== false && svg !== nil && svg != null) {
              img = ((($a = (self.$read_svg_contents(node, target))) !== false && $a !== nil && $a != null) ? $a : "<span class=\"alt\">" + (node.$attr("alt")) + "</span>")
            } else if (obj !== false && obj !== nil && obj != null) {
              fallback = (function() {if ((($a = (node['$attr?']("fallback"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return "<img src=\"" + (node.$image_uri(node.$attr("fallback"))) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (attrs) + (self.void_element_slash) + ">"
                } else {
                return "<span class=\"alt\">" + (node.$attr("alt")) + "</span>"
              }; return nil; })();
              img = "<object type=\"image/svg+xml\" data=\"" + (node.$image_uri(target)) + "\"" + (attrs) + ">" + (fallback) + "</object>";}};
          ((($a = img) !== false && $a !== nil && $a != null) ? $a : img = "<img src=\"" + ((function() {if (type['$==']("icon")) {
            return (node.$icon_uri(target))
            } else {
            return (node.$image_uri(target))
          }; return nil; })()) + "\" alt=\"" + (node.$attr("alt")) + "\"" + (attrs) + (self.void_element_slash) + ">");
        };
        if ((($a = node['$attr?']("link")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          window_attr = (function() {if ((($a = (node['$attr?']("window"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return " target=\"" + (node.$attr("window")) + "\""
            } else {
            return nil
          }; return nil; })();
          img = "<a class=\"image\" href=\"" + (node.$attr("link")) + "\"" + (window_attr) + ">" + (img) + "</a>";};
        class_attr_val = (function() {if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + (type) + " " + (role)
          } else {
          return type
        }; return nil; })();
        style_attr = (function() {if ((($a = (node['$attr?']("float"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " style=\"float: " + (node.$attr("float")) + "\""
          } else {
          return nil
        }; return nil; })();
        return "<span class=\"" + (class_attr_val) + "\"" + (style_attr) + ">" + (img) + "</span>";
      }, TMP_57.$$arity = 1);

      Opal.defn(self, '$inline_indexterm', TMP_58 = function ːinline_indexterm(node) {
        var self = this;

        if (node.$type()['$==']("visible")) {
          return node.$text()
          } else {
          return ""
        };
      }, TMP_58.$$arity = 1);

      Opal.defn(self, '$inline_kbd', TMP_60 = function ːinline_kbd(node) {
        var $a, $b, TMP_59, self = this, keys = nil, key_combo = nil;

        if (((keys = node.$attr("keys"))).$size()['$=='](1)) {
          return "<kbd>" + (keys['$[]'](0)) + "</kbd>"
          } else {
          key_combo = ($a = ($b = keys).$map, $a.$$p = (TMP_59 = function(key){var self = TMP_59.$$s || this;
if (key == null) key = nil;
          return "<kbd>" + (key) + "</kbd>+"}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59), $a).call($b).$join().$chop();
          return "<span class=\"keyseq\">" + (key_combo) + "</span>";
        };
      }, TMP_60.$$arity = 1);

      Opal.defn(self, '$inline_menu', TMP_62 = function ːinline_menu(node) {
        var $a, $b, TMP_61, self = this, menu = nil, submenus = nil, submenu_path = nil, menuitem = nil;

        menu = node.$attr("menu");
        if ((($a = ((submenus = node.$attr("submenus")))['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          submenu_path = ($a = ($b = submenus).$map, $a.$$p = (TMP_61 = function(submenu){var self = TMP_61.$$s || this;
if (submenu == null) submenu = nil;
          return "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656; "}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($b).$join().$chop();
          return "<span class=\"menuseq\"><span class=\"menu\">" + (menu) + "</span>&#160;&#9656; " + (submenu_path) + " <span class=\"menuitem\">" + (node.$attr("menuitem")) + "</span></span>";
        } else if ((($a = (menuitem = node.$attr("menuitem"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<span class=\"menuseq\"><span class=\"menu\">" + (menu) + "</span>&#160;&#9656; <span class=\"menuitem\">" + (menuitem) + "</span></span>"
          } else {
          return "<span class=\"menu\">" + (menu) + "</span>"
        };
      }, TMP_62.$$arity = 1);

      Opal.defn(self, '$inline_quoted', TMP_63 = function ːinline_quoted(node) {
        var $a, $b, self = this, open = nil, close = nil, is_tag = nil, role = nil, quoted_text = nil;

        $b = $scope.get('QUOTE_TAGS')['$[]'](node.$type()), $a = Opal.to_ary($b), open = ($a[0] == null ? nil : $a[0]), close = ($a[1] == null ? nil : $a[1]), is_tag = ($a[2] == null ? nil : $a[2]), $b;
        if ((($a = (role = node.$role())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (is_tag !== false && is_tag !== nil && is_tag != null) {
            quoted_text = "" + (open.$chop()) + " class=\"" + (role) + "\">" + (node.$text()) + (close)
            } else {
            quoted_text = "<span class=\"" + (role) + "\">" + (open) + (node.$text()) + (close) + "</span>"
          }
          } else {
          quoted_text = "" + (open) + (node.$text()) + (close)
        };
        if ((($a = node.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "<a id=\"" + (node.$id()) + "\"></a>" + (quoted_text)
          } else {
          return quoted_text
        };
      }, TMP_63.$$arity = 1);

      Opal.defn(self, '$append_boolean_attribute', TMP_64 = function ːappend_boolean_attribute(name, xml) {
        var self = this;

        if (xml !== false && xml !== nil && xml != null) {
          return " " + (name) + "=\"" + (name) + "\""
          } else {
          return " " + (name)
        };
      }, TMP_64.$$arity = 2);

      return (Opal.defn(self, '$read_svg_contents', TMP_66 = function ːread_svg_contents(node, target) {
        var $a, $b, TMP_65, self = this, svg = nil, old_start_tag = nil, new_start_tag = nil;

        if ((($a = (svg = node.$read_contents(target, $hash2(["start", "normalize", "label"], {"start": (node.$document().$attr("imagesdir")), "normalize": true, "label": "SVG"})))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = svg['$start_with?']("<svg")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            svg = svg.$sub($scope.get('SvgPreambleRx'), "")
          };
          old_start_tag = new_start_tag = nil;
          ($a = ($b = ["width", "height"]).$each, $a.$$p = (TMP_65 = function(dim){var self = TMP_65.$$s || this, $c;
if (dim == null) dim = nil;
          if ((($c = node['$attr?'](dim)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if (new_start_tag !== false && new_start_tag !== nil && new_start_tag != null) {
                } else {
                new_start_tag = ((old_start_tag = (svg.$match($scope.get('SvgStartTagRx')))['$[]'](0))).$gsub($scope.get('DimensionAttributeRx'), "")
              };
              return new_start_tag = "" + (new_start_tag.$chop()) + " " + (dim) + "=\"" + (node.$attr(dim)) + "px\">";
              } else {
              return nil
            }}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65), $a).call($b);
          if (new_start_tag !== false && new_start_tag !== nil && new_start_tag != null) {
            svg = "" + (new_start_tag) + (svg['$[]']($range(old_start_tag.$length(), -1, false)))};};
        return svg;
      }, TMP_66.$$arity = 2), nil) && 'read_svg_contents';
    })($scope.get('Converter'), (($scope.get('Converter')).$$scope.get('BuiltIn')))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/string"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$<', '$length', '$bytes', '$to_s', '$byteslice']);
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, $a, TMP_1;

    if ((($a = self['$method_defined?']("limit")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (Opal.defn(self, '$limit', TMP_1 = function ːlimit(size) {
        var $a, self = this, result = nil;

        if ((($a = $rb_lt(size, self.$bytes().$length())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return self.$to_s()
        };
        result = self.$byteslice(0, size);
        return result.$to_s();
      }, TMP_1.$$arity = 1), nil) && 'limit'
    }
  })($scope.base, null)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/extensions"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range, $hash = Opal.hash;

  Opal.add_stubs(['$[]=', '$config', '$nil_or_empty?', '$name', '$grep', '$constants', '$include', '$const_get', '$extend', '$attr_reader', '$merge', '$class', '$update', '$raise', '$new', '$create_block', '$===', '$has_more_lines?', '$next_block', '$dup', '$<<', '$each', '$define_method', '$send', '$insert', '$call', '$attr_accessor', '$[]', '$option', '$to_set', '$flatten', '$resolve_regexp', '$==', '$attr', '$method', '$register', '$arity', '$instance_exec', '$to_proc', '$activate', '$+', '$values', '$groups', '$add_document_processor', '$!', '$any?', '$select', '$add_syntax_processor', '$to_sym', '$include?', '$private', '$tr', '$to_s', '$join', '$map', '$upcase', '$chr', '$split', '$instance_variable_get', '$instance_variable_set', '$resolve_args', '$freeze', '$process_block_given?', '$source_location', '$class_for_name', '$<', '$update_config', '$unshift', '$as_symbol', '$name=', '$pop', '$size', '$>', '$-', '$fill', '$-@', '$next_auto_id', '$generate_name', '$length', '$empty?', '$const_defined?']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Extensions, self = $Extensions = $module($base, 'Extensions');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Processor(){};
        var self = $Processor = $klass($base, $super, 'Processor', $Processor);

        var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, $a, $b, TMP_11;

        def.config = nil;
        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

          Opal.defn(self, '$config', TMP_1 = function ːconfig() {
            var $a, self = this;
            if (self.config == null) self.config = nil;

            return ((($a = self.config) !== false && $a !== nil && $a != null) ? $a : self.config = $hash2([], {}));
          }, TMP_1.$$arity = 0);
          Opal.defn(self, '$option', TMP_2 = function ːoption(key, default_value) {
            var self = this;

            return self.$config()['$[]='](key, default_value);
          }, TMP_2.$$arity = 2);
          Opal.defn(self, '$use_dsl', TMP_3 = function ːuse_dsl() {
            var $a, self = this;

            if ((($a = self.$name()['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = self.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return self.$include(self.$const_get("DSL"))
                } else {
                return nil
              }
            } else if ((($a = self.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$extend(self.$const_get("DSL"))
              } else {
              return nil
            };
          }, TMP_3.$$arity = 0);
          Opal.alias(self, 'extend_dsl', 'use_dsl');
          return Opal.alias(self, 'include_dsl', 'use_dsl');
        })(Opal.get_singleton_class(self));

        self.$attr_reader("config");

        Opal.defn(self, '$initialize', TMP_4 = function ːinitialize(config) {
          var self = this;

          if (config == null) {
            config = $hash2([], {});
          }
          return self.config = self.$class().$config().$merge(config);
        }, TMP_4.$$arity = -1);

        Opal.defn(self, '$update_config', TMP_5 = function ːupdate_config(config) {
          var self = this;

          return self.config.$update(config);
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$process', TMP_6 = function ːprocess($a_rest) {
          var self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_6.$$arity = -1);

        Opal.defn(self, '$create_block', TMP_7 = function ːcreate_block(parent, context, source, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return $scope.get('Block').$new(parent, context, $hash2(["source", "attributes"], {"source": source, "attributes": attrs}).$merge(opts));
        }, TMP_7.$$arity = -5);

        Opal.defn(self, '$create_image_block', TMP_8 = function ːcreate_image_block(parent, attrs, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return self.$create_block(parent, "image", nil, attrs, opts);
        }, TMP_8.$$arity = -3);

        Opal.defn(self, '$create_inline', TMP_9 = function ːcreate_inline(parent, context, text, opts) {
          var self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return $scope.get('Inline').$new(parent, context, text, opts);
        }, TMP_9.$$arity = -4);

        Opal.defn(self, '$parse_content', TMP_10 = function ːparse_content(parent, content, attributes) {
          var $a, $b, self = this, reader = nil, block = nil;

          if (attributes == null) {
            attributes = nil;
          }
          reader = (function() {if ((($a = $scope.get('Reader')['$==='](content)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return content
            } else {
            return ($scope.get('Reader').$new(content))
          }; return nil; })();
          while ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          block = $scope.get('Parser').$next_block(reader, parent, ((function() {if (attributes !== false && attributes !== nil && attributes != null) {
            return attributes.$dup()
            } else {
            return $hash2([], {})
          }; return nil; })()));
          if (block !== false && block !== nil && block != null) {
            parent['$<<'](block)};};
          return parent;
        }, TMP_10.$$arity = -3);

        return ($a = ($b = [["create_paragraph", "create_block", "paragraph"], ["create_open_block", "create_block", "open"], ["create_example_block", "create_block", "example"], ["create_pass_block", "create_block", "pass"], ["create_listing_block", "create_block", "listing"], ["create_literal_block", "create_block", "literal"], ["create_anchor", "create_inline", "anchor"]]).$each, $a.$$p = (TMP_11 = function(method_name, delegate_method_name, context){var self = TMP_11.$$s || this, $c, $d, TMP_12;
if (method_name == null) method_name = nil;if (delegate_method_name == null) delegate_method_name = nil;if (context == null) context = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_12 = function($e_rest){var self = TMP_12.$$s || this, args, $f;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = self).$send.apply($f, [delegate_method_name].concat(Opal.to_a(args.$dup().$insert(1, context))))}, TMP_12.$$s = self, TMP_12.$$arity = -1, TMP_12), $c).call($d, method_name)}, TMP_11.$$s = self, TMP_11.$$arity = 3, TMP_11), $a).call($b);
      })($scope.base, null);

      (function($base) {
        var $ProcessorDsl, self = $ProcessorDsl = $module($base, 'ProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_15;

        Opal.defn(self, '$option', TMP_13 = function ːoption(key, value) {
          var self = this;

          return self.$config()['$[]='](key, value);
        }, TMP_13.$$arity = 2);

        Opal.defn(self, '$process', TMP_14 = function ːprocess($a_rest) {
          var $b, self = this, args, $iter = TMP_14.$$p, block = $iter || nil;
          if (self.process_block == null) self.process_block = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_14.$$p = null;
          if ((block !== nil)) {
            return self.process_block = block
          } else if ((($b = self.process_block) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return ($b = self.process_block).$call.apply($b, Opal.to_a(args))
            } else {
            return self.$raise(Opal.get('NotImplementedError'))
          };
        }, TMP_14.$$arity = -1);

        Opal.defn(self, '$process_block_given?', TMP_15 = function() {
          var $a, self = this;

          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil);
        }, TMP_15.$$arity = 0);
      })($scope.base);

      (function($base, $super) {
        function $Preprocessor(){};
        var self = $Preprocessor = $klass($base, $super, 'Preprocessor', $Preprocessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_16;

        return (Opal.defn(self, '$process', TMP_16 = function ːprocess(document, reader) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_16.$$arity = 2), nil) && 'process'
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('Preprocessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $Treeprocessor(){};
        var self = $Treeprocessor = $klass($base, $super, 'Treeprocessor', $Treeprocessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_17;

        return (Opal.defn(self, '$process', TMP_17 = function ːprocess(document) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_17.$$arity = 1), nil) && 'process'
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('Treeprocessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $Postprocessor(){};
        var self = $Postprocessor = $klass($base, $super, 'Postprocessor', $Postprocessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_18;

        return (Opal.defn(self, '$process', TMP_18 = function ːprocess(document, output) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_18.$$arity = 2), nil) && 'process'
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('Postprocessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $IncludeProcessor(){};
        var self = $IncludeProcessor = $klass($base, $super, 'IncludeProcessor', $IncludeProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_19, TMP_20;

        Opal.defn(self, '$process', TMP_19 = function ːprocess(document, reader, target, attributes) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_19.$$arity = 4);

        return (Opal.defn(self, '$handles?', TMP_20 = function(target) {
          var self = this;

          return true;
        }, TMP_20.$$arity = 1), nil) && 'handles?';
      })($scope.base, $scope.get('Processor'));

      Opal.casgn($scope.get('IncludeProcessor'), 'DSL', $scope.get('ProcessorDsl'));

      (function($base, $super) {
        function $DocinfoProcessor(){};
        var self = $DocinfoProcessor = $klass($base, $super, 'DocinfoProcessor', $DocinfoProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_21, TMP_22;

        def.config = nil;
        self.$attr_accessor("location");

        Opal.defn(self, '$initialize', TMP_21 = function ːinitialize(config) {
          var $a, $b, $c, $d, self = this, $iter = TMP_21.$$p, $yield = $iter || nil;

          if (config == null) {
            config = $hash2([], {});
          }
          TMP_21.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_21, false)), $a.$$p = null, $a).call($b, config);
          return ($a = "location", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "head")));
        }, TMP_21.$$arity = -1);

        return (Opal.defn(self, '$process', TMP_22 = function ːprocess(document) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_22.$$arity = 1), nil) && 'process';
      })($scope.base, $scope.get('Processor'));

      (function($base) {
        var $DocinfoProcessorDsl, self = $DocinfoProcessorDsl = $module($base, 'DocinfoProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_23;

        self.$include($scope.get('ProcessorDsl'));

        Opal.defn(self, '$at_location', TMP_23 = function ːat_location(value) {
          var self = this;

          return self.$option("location", value);
        }, TMP_23.$$arity = 1);
      })($scope.base);

      Opal.casgn($scope.get('DocinfoProcessor'), 'DSL', $scope.get('DocinfoProcessorDsl'));

      (function($base, $super) {
        function $BlockProcessor(){};
        var self = $BlockProcessor = $klass($base, $super, 'BlockProcessor', $BlockProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_24, TMP_25;

        def.config = nil;
        self.$attr_accessor("name");

        Opal.defn(self, '$initialize', TMP_24 = function ːinitialize(name, config) {
          var $a, $b, $c, $d, self = this, $iter = TMP_24.$$p, $yield = $iter || nil, $case = nil;

          if (name == null) {
            name = nil;
          }
          if (config == null) {
            config = $hash2([], {});
          }
          TMP_24.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_24, false)), $a.$$p = null, $a).call($b, config);
          self.name = ((($a = name) !== false && $a !== nil && $a != null) ? $a : self.config['$[]']("name"));
          $case = self.config['$[]']("contexts");if (Opal.get('NilClass')['$===']($case)) {($a = "contexts", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, ["open", "paragraph"].$to_set())))}else if (Opal.get('Symbol')['$===']($case)) {self.config['$[]=']("contexts", [self.config['$[]']("contexts")].$to_set())}else {self.config['$[]=']("contexts", self.config['$[]']("contexts").$to_set())};
          return ($a = "content_model", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "compound")));
        }, TMP_24.$$arity = -1);

        return (Opal.defn(self, '$process', TMP_25 = function ːprocess(parent, reader, attributes) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_25.$$arity = 3), nil) && 'process';
      })($scope.base, $scope.get('Processor'));

      (function($base) {
        var $BlockProcessorDsl, self = $BlockProcessorDsl = $module($base, 'BlockProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30;

        self.$include($scope.get('ProcessorDsl'));

        Opal.defn(self, '$named', TMP_26 = function ːnamed(value) {
          var $a, self = this;

          if ((($a = $scope.get('Processor')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.name = value
            } else {
            return self.$option("name", value)
          };
        }, TMP_26.$$arity = 1);

        Opal.alias(self, 'match_name', 'named');

        Opal.alias(self, 'bind_to', 'named');

        Opal.defn(self, '$contexts', TMP_27 = function ːcontexts($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("contexts", value.$flatten());
        }, TMP_27.$$arity = -1);

        Opal.alias(self, 'on_contexts', 'contexts');

        Opal.alias(self, 'on_context', 'contexts');

        Opal.defn(self, '$content_model', TMP_28 = function ːcontent_model(value) {
          var self = this;

          return self.$option("content_model", value);
        }, TMP_28.$$arity = 1);

        Opal.alias(self, 'parse_content_as', 'content_model');

        Opal.defn(self, '$positional_attributes', TMP_29 = function ːpositional_attributes($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("pos_attrs", value.$flatten());
        }, TMP_29.$$arity = -1);

        Opal.alias(self, 'pos_attrs', 'positional_attributes');

        Opal.alias(self, 'name_attributes', 'positional_attributes');

        Opal.alias(self, 'name_positional_attributes', 'positional_attributes');

        Opal.defn(self, '$default_attrs', TMP_30 = function ːdefault_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value);
        }, TMP_30.$$arity = 1);

        Opal.alias(self, 'seed_attributes_with', 'default_attrs');
      })($scope.base);

      Opal.casgn($scope.get('BlockProcessor'), 'DSL', $scope.get('BlockProcessorDsl'));

      (function($base, $super) {
        function $MacroProcessor(){};
        var self = $MacroProcessor = $klass($base, $super, 'MacroProcessor', $MacroProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_31, TMP_32;

        def.config = nil;
        self.$attr_accessor("name");

        Opal.defn(self, '$initialize', TMP_31 = function ːinitialize(name, config) {
          var $a, $b, $c, $d, self = this, $iter = TMP_31.$$p, $yield = $iter || nil;

          if (name == null) {
            name = nil;
          }
          if (config == null) {
            config = $hash2([], {});
          }
          TMP_31.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_31, false)), $a.$$p = null, $a).call($b, config);
          self.name = ((($a = name) !== false && $a !== nil && $a != null) ? $a : self.config['$[]']("name"));
          return ($a = "content_model", $c = self.config, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "attributes")));
        }, TMP_31.$$arity = -1);

        return (Opal.defn(self, '$process', TMP_32 = function ːprocess(parent, target, attributes) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_32.$$arity = 3), nil) && 'process';
      })($scope.base, $scope.get('Processor'));

      (function($base) {
        var $MacroProcessorDsl, self = $MacroProcessorDsl = $module($base, 'MacroProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_33, TMP_34, TMP_35, TMP_36;

        self.$include($scope.get('ProcessorDsl'));

        Opal.defn(self, '$named', TMP_33 = function ːnamed(value) {
          var $a, self = this;

          if ((($a = $scope.get('Processor')['$==='](self)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.name = value
            } else {
            return self.$option("name", value)
          };
        }, TMP_33.$$arity = 1);

        Opal.alias(self, 'match_name', 'named');

        Opal.alias(self, 'bind_to', 'named');

        Opal.defn(self, '$content_model', TMP_34 = function ːcontent_model(value) {
          var self = this;

          return self.$option("content_model", value);
        }, TMP_34.$$arity = 1);

        Opal.alias(self, 'parse_content_as', 'content_model');

        Opal.defn(self, '$positional_attributes', TMP_35 = function ːpositional_attributes($a_rest) {
          var self = this, value;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          value = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            value[$arg_idx - 0] = arguments[$arg_idx];
          }
          return self.$option("pos_attrs", value.$flatten());
        }, TMP_35.$$arity = -1);

        Opal.alias(self, 'pos_attrs', 'positional_attributes');

        Opal.alias(self, 'name_attributes', 'positional_attributes');

        Opal.alias(self, 'name_positional_attributes', 'positional_attributes');

        Opal.defn(self, '$default_attrs', TMP_36 = function ːdefault_attrs(value) {
          var self = this;

          return self.$option("default_attrs", value);
        }, TMP_36.$$arity = 1);

        Opal.alias(self, 'seed_attributes_with', 'default_attrs');
      })($scope.base);

      (function($base, $super) {
        function $BlockMacroProcessor(){};
        var self = $BlockMacroProcessor = $klass($base, $super, 'BlockMacroProcessor', $BlockMacroProcessor);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('MacroProcessor'));

      Opal.casgn($scope.get('BlockMacroProcessor'), 'DSL', $scope.get('MacroProcessorDsl'));

      (function($base, $super) {
        function $InlineMacroProcessor(){};
        var self = $InlineMacroProcessor = $klass($base, $super, 'InlineMacroProcessor', $InlineMacroProcessor);

        var def = self.$$proto, $scope = self.$$scope, TMP_37, TMP_38;

        def.config = def.name = nil;
        Opal.defn(self, '$regexp', TMP_37 = function ːregexp() {
          var $a, $b, $c, self = this;

          return ($a = "regexp", $b = self.config, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, (self.$resolve_regexp(self.name, self.config['$[]']("format"))))));
        }, TMP_37.$$arity = 0);

        return (Opal.defn(self, '$resolve_regexp', TMP_38 = function ːresolve_regexp(name, format) {
          var self = this;

          if (format['$==']("short")) {
            return (new RegExp("\\\\?" + name + ":\\[((?:\\\\\\]|[^\\]])*?)\\]"))
            } else {
            return (new RegExp("\\\\?" + name + ":(\\S+?)\\[((?:\\\\\\]|[^\\]])*?)\\]"))
          };
        }, TMP_38.$$arity = 2), nil) && 'resolve_regexp';
      })($scope.base, $scope.get('MacroProcessor'));

      (function($base) {
        var $InlineMacroProcessorDsl, self = $InlineMacroProcessorDsl = $module($base, 'InlineMacroProcessorDsl');

        var def = self.$$proto, $scope = self.$$scope, TMP_39, TMP_40;

        self.$include($scope.get('MacroProcessorDsl'));

        Opal.defn(self, '$using_format', TMP_39 = function ːusing_format(value) {
          var self = this;

          return self.$option("format", value);
        }, TMP_39.$$arity = 1);

        Opal.defn(self, '$match', TMP_40 = function ːmatch(value) {
          var self = this;

          return self.$option("regexp", value);
        }, TMP_40.$$arity = 1);
      })($scope.base);

      Opal.casgn($scope.get('InlineMacroProcessor'), 'DSL', $scope.get('InlineMacroProcessorDsl'));

      (function($base, $super) {
        function $Extension(){};
        var self = $Extension = $klass($base, $super, 'Extension', $Extension);

        var def = self.$$proto, $scope = self.$$scope, TMP_41;

        self.$attr("kind");

        self.$attr("config");

        self.$attr("instance");

        return (Opal.defn(self, '$initialize', TMP_41 = function ːinitialize(kind, instance, config) {
          var self = this;

          self.kind = kind;
          self.instance = instance;
          return self.config = config;
        }, TMP_41.$$arity = 3), nil) && 'initialize';
      })($scope.base, null);

      (function($base, $super) {
        function $ProcessorExtension(){};
        var self = $ProcessorExtension = $klass($base, $super, 'ProcessorExtension', $ProcessorExtension);

        var def = self.$$proto, $scope = self.$$scope, TMP_42;

        self.$attr("process_method");

        return (Opal.defn(self, '$initialize', TMP_42 = function ːinitialize(kind, instance, process_method) {
          var $a, $b, self = this, $iter = TMP_42.$$p, $yield = $iter || nil;

          if (process_method == null) {
            process_method = nil;
          }
          TMP_42.$$p = null;
          ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, kind, instance, instance.$config());
          return self.process_method = ((($a = process_method) !== false && $a !== nil && $a != null) ? $a : (instance.$method("process")));
        }, TMP_42.$$arity = -3), nil) && 'initialize';
      })($scope.base, $scope.get('Extension'));

      (function($base, $super) {
        function $Group(){};
        var self = $Group = $klass($base, $super, 'Group', $Group);

        var def = self.$$proto, $scope = self.$$scope, TMP_44;

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_43;

          return (Opal.defn(self, '$register', TMP_43 = function ːregister(name) {
            var self = this;

            if (name == null) {
              name = nil;
            }
            return $scope.get('Extensions').$register(name, self);
          }, TMP_43.$$arity = -1), nil) && 'register'
        })(Opal.get_singleton_class(self));

        return (Opal.defn(self, '$activate', TMP_44 = function ːactivate(registry) {
          var self = this;

          return self.$raise(Opal.get('NotImplementedError'));
        }, TMP_44.$$arity = 1), nil) && 'activate';
      })($scope.base, null);

      (function($base, $super) {
        function $Registry(){};
        var self = $Registry = $klass($base, $super, 'Registry', $Registry);

        var def = self.$$proto, $scope = self.$$scope, TMP_45, TMP_47, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_62, TMP_64, TMP_65, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_73, TMP_74, TMP_75, TMP_76, TMP_77, TMP_78, TMP_80, TMP_82, TMP_83;

        def.groups = def.preprocessor_extensions = def.treeprocessor_extensions = def.postprocessor_extensions = def.include_processor_extensions = def.docinfo_processor_extensions = def.block_extensions = def.block_macro_extensions = def.inline_macro_extensions = nil;
        self.$attr_reader("document");

        self.$attr_reader("groups");

        Opal.defn(self, '$initialize', TMP_45 = function ːinitialize(groups) {
          var self = this;

          if (groups == null) {
            groups = $hash2([], {});
          }
          self.groups = groups;
          self.preprocessor_extensions = self.treeprocessor_extensions = self.postprocessor_extensions = self.include_processor_extensions = self.docinfo_processor_extensions = nil;
          self.block_extensions = self.block_macro_extensions = self.inline_macro_extensions = nil;
          return self.document = nil;
        }, TMP_45.$$arity = -1);

        Opal.defn(self, '$activate', TMP_47 = function ːactivate(document) {
          var $a, $b, TMP_46, self = this;

          self.document = document;
          ($a = ($b = ($rb_plus($scope.get('Extensions').$groups().$values(), self.groups.$values()))).$each, $a.$$p = (TMP_46 = function(group){var self = TMP_46.$$s || this, $c, $d, $case = nil;
if (group == null) group = nil;
          return (function() {$case = group;if (Opal.get('Proc')['$===']($case)) {return (function() {$case = group.$arity();if ((0)['$===']($case) || (-1)['$===']($case)) {return ($c = ($d = self).$instance_exec, $c.$$p = group.$to_proc(), $c).call($d)}else if ((1)['$===']($case)) {return group.$call(self)}else { return nil }})()}else if (Opal.get('Class')['$===']($case)) {return group.$new().$activate(self)}else {return group.$activate(self)}})()}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $a).call($b);
          return self;
        }, TMP_47.$$arity = 1);

        Opal.defn(self, '$preprocessor', TMP_48 = function ːpreprocessor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_48.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_48.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "preprocessor", args);
        }, TMP_48.$$arity = -1);

        Opal.defn(self, '$preprocessors?', TMP_49 = function() {
          var self = this;

          return self.preprocessor_extensions['$!']()['$!']();
        }, TMP_49.$$arity = 0);

        Opal.defn(self, '$preprocessors', TMP_50 = function ːpreprocessors() {
          var self = this;

          return self.preprocessor_extensions;
        }, TMP_50.$$arity = 0);

        Opal.defn(self, '$treeprocessor', TMP_51 = function ːtreeprocessor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_51.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_51.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "treeprocessor", args);
        }, TMP_51.$$arity = -1);

        Opal.defn(self, '$treeprocessors?', TMP_52 = function() {
          var self = this;

          return self.treeprocessor_extensions['$!']()['$!']();
        }, TMP_52.$$arity = 0);

        Opal.defn(self, '$treeprocessors', TMP_53 = function ːtreeprocessors() {
          var self = this;

          return self.treeprocessor_extensions;
        }, TMP_53.$$arity = 0);

        Opal.defn(self, '$postprocessor', TMP_54 = function ːpostprocessor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_54.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_54.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "postprocessor", args);
        }, TMP_54.$$arity = -1);

        Opal.defn(self, '$postprocessors?', TMP_55 = function() {
          var self = this;

          return self.postprocessor_extensions['$!']()['$!']();
        }, TMP_55.$$arity = 0);

        Opal.defn(self, '$postprocessors', TMP_56 = function ːpostprocessors() {
          var self = this;

          return self.postprocessor_extensions;
        }, TMP_56.$$arity = 0);

        Opal.defn(self, '$include_processor', TMP_57 = function ːinclude_processor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_57.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_57.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "include_processor", args);
        }, TMP_57.$$arity = -1);

        Opal.defn(self, '$include_processors?', TMP_58 = function() {
          var self = this;

          return self.include_processor_extensions['$!']()['$!']();
        }, TMP_58.$$arity = 0);

        Opal.defn(self, '$include_processors', TMP_59 = function ːinclude_processors() {
          var self = this;

          return self.include_processor_extensions;
        }, TMP_59.$$arity = 0);

        Opal.defn(self, '$docinfo_processor', TMP_60 = function ːdocinfo_processor($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_60.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_60.$$p = null;
          return ($b = ($c = self).$add_document_processor, $b.$$p = block.$to_proc(), $b).call($c, "docinfo_processor", args);
        }, TMP_60.$$arity = -1);

        Opal.defn(self, '$docinfo_processors?', TMP_62 = function(location) {
          var $a, $b, TMP_61, self = this;

          if (location == null) {
            location = nil;
          }
          if ((($a = self.docinfo_processor_extensions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (location !== false && location !== nil && location != null) {
              return ($a = ($b = self.docinfo_processor_extensions)['$any?'], $a.$$p = (TMP_61 = function(ext){var self = TMP_61.$$s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($b)
              } else {
              return true
            }
            } else {
            return false
          };
        }, TMP_62.$$arity = -1);

        Opal.defn(self, '$docinfo_processors', TMP_64 = function ːdocinfo_processors(location) {
          var $a, $b, TMP_63, self = this;

          if (location == null) {
            location = nil;
          }
          if ((($a = self.docinfo_processor_extensions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (location !== false && location !== nil && location != null) {
              return ($a = ($b = self.docinfo_processor_extensions).$select, $a.$$p = (TMP_63 = function(ext){var self = TMP_63.$$s || this;
if (ext == null) ext = nil;
              return ext.$config()['$[]']("location")['$=='](location)}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63), $a).call($b)
              } else {
              return self.docinfo_processor_extensions
            }
            } else {
            return nil
          };
        }, TMP_64.$$arity = -1);

        Opal.defn(self, '$block', TMP_65 = function ːblock($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_65.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_65.$$p = null;
          return ($b = ($c = self).$add_syntax_processor, $b.$$p = block.$to_proc(), $b).call($c, "block", args);
        }, TMP_65.$$arity = -1);

        Opal.defn(self, '$blocks?', TMP_66 = function() {
          var self = this;

          return self.block_extensions['$!']()['$!']();
        }, TMP_66.$$arity = 0);

        Opal.defn(self, '$registered_for_block?', TMP_67 = function(name, context) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.block_extensions['$[]'](name.$to_sym()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = (ext.$config()['$[]']("contexts")['$include?'](context))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return ext
              } else {
              return false
            }
            } else {
            return false
          };
        }, TMP_67.$$arity = 2);

        Opal.defn(self, '$find_block_extension', TMP_68 = function ːfind_block_extension(name) {
          var self = this;

          return self.block_extensions['$[]'](name.$to_sym());
        }, TMP_68.$$arity = 1);

        Opal.defn(self, '$block_macro', TMP_69 = function ːblock_macro($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_69.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_69.$$p = null;
          return ($b = ($c = self).$add_syntax_processor, $b.$$p = block.$to_proc(), $b).call($c, "block_macro", args);
        }, TMP_69.$$arity = -1);

        Opal.defn(self, '$block_macros?', TMP_70 = function() {
          var self = this;

          return self.block_macro_extensions['$!']()['$!']();
        }, TMP_70.$$arity = 0);

        Opal.defn(self, '$registered_for_block_macro?', TMP_71 = function(name) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.block_macro_extensions['$[]'](name.$to_sym()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ext
            } else {
            return false
          };
        }, TMP_71.$$arity = 1);

        Opal.defn(self, '$find_block_macro_extension', TMP_72 = function ːfind_block_macro_extension(name) {
          var self = this;

          return self.block_macro_extensions['$[]'](name.$to_sym());
        }, TMP_72.$$arity = 1);

        Opal.defn(self, '$inline_macro', TMP_73 = function ːinline_macro($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_73.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_73.$$p = null;
          return ($b = ($c = self).$add_syntax_processor, $b.$$p = block.$to_proc(), $b).call($c, "inline_macro", args);
        }, TMP_73.$$arity = -1);

        Opal.defn(self, '$inline_macros?', TMP_74 = function() {
          var self = this;

          return self.inline_macro_extensions['$!']()['$!']();
        }, TMP_74.$$arity = 0);

        Opal.defn(self, '$registered_for_inline_macro?', TMP_75 = function(name) {
          var $a, self = this, ext = nil;

          if ((($a = (ext = self.inline_macro_extensions['$[]'](name.$to_sym()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ext
            } else {
            return false
          };
        }, TMP_75.$$arity = 1);

        Opal.defn(self, '$find_inline_macro_extension', TMP_76 = function ːfind_inline_macro_extension(name) {
          var self = this;

          return self.inline_macro_extensions['$[]'](name.$to_sym());
        }, TMP_76.$$arity = 1);

        Opal.defn(self, '$inline_macros', TMP_77 = function ːinline_macros() {
          var self = this;

          return self.inline_macro_extensions.$values();
        }, TMP_77.$$arity = 0);

        self.$private();

        Opal.defn(self, '$add_document_processor', TMP_78 = function ːadd_document_processor(kind, args) {
          var $a, $b, TMP_79, $c, $d, $e, self = this, $iter = TMP_78.$$p, block = $iter || nil, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_78.$$p = null;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_symbol = ($a = ($b = kind_name.$split(" ")).$map, $a.$$p = (TMP_79 = function(word){var self = TMP_79.$$s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79), $a).call($b).$join().$to_sym();
          kind_class = $scope.get('Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ((($a = ((Opal.Object.$$scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (((Opal.get('AsciidoctorJ')).$$scope.get('Extensions')).$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = ((($a = self.$instance_variable_get(((("@") + (kind)) + "_extensions").$to_sym())) !== false && $a !== nil && $a != null) ? $a : self.$instance_variable_set(((("@") + (kind)) + "_extensions").$to_sym(), []));
          extension = (function() {if ((block !== nil)) {
            config = self.$resolve_args(args, 1);
            processor = kind_class.$new(config);
            if ((($a = kind_class.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            ($a = ($c = processor).$instance_exec, $a.$$p = block.$to_proc(), $a).call($c);
            processor.$freeze();
            if ((($a = processor['$process_block_given?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(Opal.get('ArgumentError').$new("No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            return $scope.get('ProcessorExtension').$new(kind, processor);
            } else {
            $d = self.$resolve_args(args, 2), $a = Opal.to_ary($d), processor = ($a[0] == null ? nil : $a[0]), config = ($a[1] == null ? nil : $a[1]), $d;
            if ((($a = ((($d = Opal.get('Class')['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : (($e = Opal.get('String')['$==='](processor), $e !== false && $e !== nil && $e != null ?(processor = $scope.get('Extensions').$class_for_name(processor)) : $e)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ((($d = $rb_lt(processor, kind_class)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? $rb_lt(processor, kind_java_class) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("Invalid type for " + (kind_name) + " extension: " + (processor)))
              };
              processor_instance = processor.$new(config);
              processor_instance.$freeze();
              return $scope.get('ProcessorExtension').$new(kind, processor_instance);
            } else if ((($a = ((($d = kind_class['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? kind_java_class['$==='](processor) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$update_config(config);
              processor.$freeze();
              return $scope.get('ProcessorExtension').$new(kind, processor);
              } else {
              return self.$raise(Opal.get('ArgumentError').$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          }; return nil; })();
          if (extension.$config()['$[]']("position")['$=='](">>")) {
            return kind_store.$unshift(extension)
            } else {
            return kind_store['$<<'](extension)
          };
        }, TMP_78.$$arity = 2);

        Opal.defn(self, '$add_syntax_processor', TMP_80 = function ːadd_syntax_processor(kind, args) {
          var $a, $b, TMP_81, $c, $d, $e, self = this, $iter = TMP_80.$$p, block = $iter || nil, kind_name = nil, kind_class_basename = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, processor_instance = nil;

          TMP_80.$$p = null;
          kind_name = kind.$to_s().$tr("_", " ");
          kind_class_basename = ($a = ($b = kind_name.$split(" ")).$map, $a.$$p = (TMP_81 = function(word){var self = TMP_81.$$s || this;
if (word == null) word = nil;
          return "" + (word.$chr().$upcase()) + (word['$[]']($range(1, -1, false)))}, TMP_81.$$s = self, TMP_81.$$arity = 1, TMP_81), $a).call($b).$join();
          kind_class_symbol = ((("") + (kind_class_basename)) + "Processor").$to_sym();
          kind_class = $scope.get('Extensions').$const_get(kind_class_symbol);
          kind_java_class = (function() {if ((($a = ((Opal.Object.$$scope.AsciidoctorJ == null ? nil : 'constant'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (((Opal.get('AsciidoctorJ')).$$scope.get('Extensions')).$const_get(kind_class_symbol))
            } else {
            return nil
          }; return nil; })();
          kind_store = ((($a = self.$instance_variable_get(((("@") + (kind)) + "_extensions").$to_sym())) !== false && $a !== nil && $a != null) ? $a : self.$instance_variable_set(((("@") + (kind)) + "_extensions").$to_sym(), $hash2([], {})));
          if ((block !== nil)) {
            $c = self.$resolve_args(args, 2), $a = Opal.to_ary($c), name = ($a[0] == null ? nil : $a[0]), config = ($a[1] == null ? nil : $a[1]), $c;
            processor = kind_class.$new(self.$as_symbol(name), config);
            if ((($a = kind_class.$constants().$grep("DSL")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$extend(kind_class.$const_get("DSL"))};
            if (block.$arity()['$=='](1)) {
              Opal.yield1(block, processor)
              } else {
              ($a = ($c = processor).$instance_exec, $a.$$p = block.$to_proc(), $a).call($c)
            };
            if ((($a = (name = self.$as_symbol(processor.$name()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(Opal.get('ArgumentError').$new("No name specified for " + (kind_name) + " extension at " + (block.$source_location())))
            };
            if ((($a = processor['$process_block_given?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$raise(Opal.get('NoMethodError').$new("No block specified to process " + (kind_name) + " extension at " + (block.$source_location())))
            };
            processor.$freeze();
            return kind_store['$[]='](name, $scope.get('ProcessorExtension').$new(kind, processor));
            } else {
            $d = self.$resolve_args(args, 3), $a = Opal.to_ary($d), processor = ($a[0] == null ? nil : $a[0]), name = ($a[1] == null ? nil : $a[1]), config = ($a[2] == null ? nil : $a[2]), $d;
            if ((($a = ((($d = Opal.get('Class')['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : (($e = Opal.get('String')['$==='](processor), $e !== false && $e !== nil && $e != null ?(processor = $scope.get('Extensions').$class_for_name(processor)) : $e)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ((($d = $rb_lt(processor, kind_class)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? $rb_lt(processor, kind_java_class) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("Class specified for " + (kind_name) + " extension does not inherit from " + (kind_class) + ": " + (processor)))
              };
              processor_instance = processor.$new(self.$as_symbol(name), config);
              if ((($a = (name = self.$as_symbol(processor_instance.$name()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              return kind_store['$[]='](name, $scope.get('ProcessorExtension').$new(kind, processor_instance));
            } else if ((($a = ((($d = kind_class['$==='](processor)) !== false && $d !== nil && $d != null) ? $d : ((($e = kind_java_class !== false && kind_java_class !== nil && kind_java_class != null) ? kind_java_class['$==='](processor) : kind_java_class)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              processor.$update_config(config);
              if ((($a = (name = (function() {if (name !== false && name !== nil && name != null) {
                return ((($d = [self.$as_symbol(name)]), $e = processor, $e['$name='].apply($e, $d), $d[$d.length-1]))
                } else {
                return (self.$as_symbol(processor.$name()))
              }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$raise(Opal.get('ArgumentError').$new("No name specified for " + (kind_name) + " extension: " + (processor)))
              };
              processor.$freeze();
              return kind_store['$[]='](name, $scope.get('ProcessorExtension').$new(kind, processor));
              } else {
              return self.$raise(Opal.get('ArgumentError').$new("Invalid arguments specified for registering " + (kind_name) + " extension: " + (args)))
            };
          };
        }, TMP_80.$$arity = 2);

        Opal.defn(self, '$resolve_args', TMP_82 = function ːresolve_args(args, expect) {
          var $a, self = this, opts = nil, num_args = nil, missing = nil;

          opts = (function() {if ((($a = Opal.get('Hash')['$==='](args['$[]'](-1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return args.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          if (expect['$=='](1)) {
            return opts};
          num_args = args.$size();
          if ((($a = $rb_gt((missing = $rb_minus($rb_minus(expect, 1), num_args)), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            args.$fill(nil, num_args, missing)
          } else if ((($a = $rb_lt(missing, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            args.$pop(missing['$-@']())};
          args['$<<'](opts);
          return args;
        }, TMP_82.$$arity = 2);

        return (Opal.defn(self, '$as_symbol', TMP_83 = function ːas_symbol(name) {
          var self = this;

          if (name !== false && name !== nil && name != null) {
            return name.$to_sym()
            } else {
            return nil
          };
        }, TMP_83.$$arity = 1), nil) && 'as_symbol';
      })($scope.base, null);

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_84, TMP_85, TMP_86, TMP_87, TMP_88, TMP_89, TMP_90, TMP_92;

        Opal.defn(self, '$generate_name', TMP_84 = function ːgenerate_name() {
          var self = this;

          return "extgrp" + (self.$next_auto_id());
        }, TMP_84.$$arity = 0);
        Opal.defn(self, '$next_auto_id', TMP_85 = function ːnext_auto_id() {
          var $a, self = this;
          if (self.auto_id == null) self.auto_id = nil;

          ((($a = self.auto_id) !== false && $a !== nil && $a != null) ? $a : self.auto_id = -1);
          return self.auto_id = $rb_plus(self.auto_id, 1);
        }, TMP_85.$$arity = 0);
        Opal.defn(self, '$groups', TMP_86 = function ːgroups() {
          var $a, self = this;
          if (self.groups == null) self.groups = nil;

          return ((($a = self.groups) !== false && $a !== nil && $a != null) ? $a : self.groups = $hash2([], {}));
        }, TMP_86.$$arity = 0);
        Opal.defn(self, '$build_registry', TMP_87 = function ːbuild_registry(name) {
          var $a, self = this, $iter = TMP_87.$$p, block = $iter || nil;

          if (name == null) {
            name = nil;
          }
          TMP_87.$$p = null;
          if ((block !== nil)) {
            ((($a = name) !== false && $a !== nil && $a != null) ? $a : name = self.$generate_name());
            return $scope.get('Registry').$new($hash(name, block));
            } else {
            return $scope.get('Registry').$new()
          };
        }, TMP_87.$$arity = -1);
        Opal.defn(self, '$register', TMP_88 = function ːregister($a_rest) {
          var $b, self = this, args, $iter = TMP_88.$$p, block = $iter || nil, argc = nil, resolved_group = nil, group = nil, $case = nil, name = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_88.$$p = null;
          argc = args.$length();
          resolved_group = (function() {if ((block !== nil)) {
            return block
          } else if ((($b = ((group = args.$pop()))['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$raise(Opal.get('ArgumentError').$new("Extension group to register not specified"))
            } else {
            return (function() {$case = group;if (Opal.get('Class')['$===']($case)) {return group}else if (Opal.get('String')['$===']($case)) {return self.$class_for_name(group)}else if (Opal.get('Symbol')['$===']($case)) {return self.$class_for_name(group.$to_s())}else {return group}})()
          }; return nil; })();
          name = ((($b = args.$pop()) !== false && $b !== nil && $b != null) ? $b : self.$generate_name());
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            self.$raise(Opal.get('ArgumentError').$new("Wrong number of arguments (" + (argc) + " for 1..2)"))
          };
          return self.$groups()['$[]='](name, resolved_group);
        }, TMP_88.$$arity = -1);
        Opal.defn(self, '$unregister_all', TMP_89 = function ːunregister_all() {
          var self = this;

          return self.groups = $hash2([], {});
        }, TMP_89.$$arity = 0);
        Opal.defn(self, '$resolve_class', TMP_90 = function ːresolve_class(object) {
          var $a, self = this;

          if ((($a = Opal.get('Class')['$==='](object)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return object
            } else {
            return (self.$class_for_name(object.$to_s()))
          };
        }, TMP_90.$$arity = 1);
        return (Opal.defn(self, '$class_for_name', TMP_92 = function ːclass_for_name(qualified_name) {
          var $a, $b, TMP_91, self = this, resolved_class = nil;

          resolved_class = Opal.get('Object');
          ($a = ($b = qualified_name.$split("::")).$each, $a.$$p = (TMP_91 = function(name){var self = TMP_91.$$s || this, $c;
if (name == null) name = nil;
          if ((($c = name['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil
            } else if ((($c = resolved_class['$const_defined?'](name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return resolved_class = resolved_class.$const_get(name)
              } else {
              return self.$raise("Could not resolve class for name: " + (qualified_name))
            }}, TMP_91.$$s = self, TMP_91.$$arity = 1, TMP_91), $a).call($b);
          return resolved_class;
        }, TMP_92.$$arity = 1), nil) && 'class_for_name';
      })(Opal.get_singleton_class(self));
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/nashorn/io"] = function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$write_proc=']);
  (($a = [function(s){print(s)}]), $b = $gvars.stdout, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  return (($a = [function(s){print(s)}]), $b = $gvars.stderr, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/electron/io"] = function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  Opal.add_stubs(['$write_proc=']);
  (($a = [function(s){console.log(s)}]), $b = $gvars.stdout, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
  return (($a = [function(s){console.error(s)}]), $b = $gvars.stderr, $b['$write_proc='].apply($b, $a), $a[$a.length-1]);
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext/node/io"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defs(self, '$binread', TMP_1 = function ːbinread(path) {
      var self = this;

      return require('fs').readFileSync(path).toString('binary');
    }, TMP_1.$$arity = 1), nil) && 'binread'
  })($scope.base, null)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/opal_ext"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$==']);
  
  var isNode = typeof process === 'object' && typeof process.versions === 'object' && process.browser != true,
      isElectron = typeof navigator === 'object' && typeof navigator.userAgent === 'string' && typeof navigator.userAgent.indexOf('Electron') !== -1,
      isBrowser = typeof window === 'object',
      isNashorn = typeof Java === 'object' && Java.type,
      isRhino = typeof java === 'object',
      isPhantomJS = typeof window === 'object' && typeof window.phantom === 'object',
      isWebWorker = typeof importScripts === 'function',
      isSpiderMonkey = typeof JSRuntime === 'object',
      platform,
      engine,
      framework,
      ioModule;

  // Load common modules
  Opal.load("pathname");
  Opal.load("base64");

  if (typeof config === 'object' && typeof config.runtime === 'object') {
    var runtime = config.runtime;
    platform = runtime.platform;
    engine = runtime.engine;
    framework = runtime.framework;
    ioModule = runtime.ioModule;
  }

  if (typeof platform === 'undefined') {
    // Try to automatically detect the JavaScript platform, engine and framework
    if (isNode) {
      platform = platform || 'node';
      engine = engine || 'v8';
      if (isElectron) {
        framework = framework || 'electron';
      }
    }
    else if (isNashorn) {
      platform = plaform || 'java';
      engine = engine || 'nashorn';
    }
    else if (isRhino) {
      platform = platform || 'java';
      engine = engine || 'rhino';
    }
    else if (isSpiderMonkey) {
      platform = platform || 'standalone';
      framework = framework || 'spidermonkey';
    }
    else if (isBrowser) {
      platform = platform || 'browser';
      if (isPhantomJS) {
        framework = framework || 'phantomjs';
      }
    }
    // NOTE: WebWorker are not limited to browser
    if (isWebWorker) {
      framework = framework || 'webworker';
    }
  }

  if (typeof platform === 'undefined') {
    throw new Error('Unable to automatically detect the JavaScript platform, please configure Asciidoctor.js: `Asciidoctor({runtime: {platform: \'node\'}})`');
  }

  if (platform === 'node') {
    Opal.load("nodejs");
  }

  // Optional information
  if (typeof framework === 'undefined') {
    framework = '';
  }
  if (typeof engine === 'undefined') {
    engine = '';
  }

  // IO Module
  if (typeof ioModule !== 'undefined') {
    if (ioModule != 'spidermonkey'
         && ioModule != 'phantomjs'
         && ioModule != 'node'
         && ioModule != 'java_nio'
         && ioModule != 'xmlhttprequest') {
      throw new Error('Invalid IO module, `config.ioModule` must be one of: spidermonkey, phantomjs, node, java_nio or xmlhttprequest');
    }
  } else {
    if (framework === 'spidermonkey') {
      ioModule = 'spidermonkey';
    } else if (framework === 'phantomjs') {
      ioModule = 'phantomjs';
    } else if (platform === 'node') {
      ioModule = 'node';
    } else if (engine === 'nashorn') {
      ioModule = 'java_nio'
    } else if (platform === 'browser' || typeof XmlHTTPRequest !== 'undefined') {
      ioModule = 'xmlhttprequest'
    } else {
      throw new Error('Unable to automatically detect the IO module, please configure Asciidoctor.js: `Asciidoctor({runtime: {ioModule: \'node\'}})`');
    }
  }


  Opal.cdecl($scope, 'JAVASCRIPT_IO_MODULE', ioModule);
  Opal.cdecl($scope, 'JAVASCRIPT_PLATFORM', platform);
  Opal.cdecl($scope, 'JAVASCRIPT_ENGINE', engine);
  Opal.cdecl($scope, 'JAVASCRIPT_FRAMEWORK', framework);
  self.$require("strscan");
  self.$require("asciidoctor/opal_ext/file");
  self.$require("asciidoctor/opal_ext/match_data");
  self.$require("asciidoctor/opal_ext/kernel");
  self.$require("asciidoctor/opal_ext/thread_safe");
  self.$require("asciidoctor/converter");
  self.$require("asciidoctor/converter/composite");
  self.$require("asciidoctor/converter/html5");
  self.$require("asciidoctor/opal_ext/string");
  self.$require("asciidoctor/extensions");
  if ($scope.get('JAVASCRIPT_ENGINE')['$==']("nashorn")) {
    self.$require("asciidoctor/opal_ext/nashorn/io")};
  if ($scope.get('JAVASCRIPT_FRAMEWORK')['$==']("electron")) {
    self.$require("asciidoctor/opal_ext/electron/io")};
  if ($scope.get('JAVASCRIPT_PLATFORM')['$==']("node")) {
    return self.$require("asciidoctor/opal_ext/node/io")
    } else {
    return nil
  };
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "1.5.5")
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/timings"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$[]=', '$now', '$-', '$delete', '$>', '$+', '$[]', '$puts', '$%', '$to_f', '$read_parse', '$convert', '$read_parse_convert']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Timings(){};
      var self = $Timings = $klass($base, $super, 'Timings', $Timings);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

      def.timers = def.log = nil;
      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize() {
        var self = this;

        self.log = $hash2([], {});
        return self.timers = $hash2([], {});
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$start', TMP_2 = function ːstart(key) {
        var self = this;

        return self.timers['$[]='](key, Opal.get('Time').$now());
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$record', TMP_3 = function ːrecord(key) {
        var self = this;

        return self.log['$[]='](key, ($rb_minus(Opal.get('Time').$now(), (self.timers.$delete(key)))));
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$read_parse', TMP_4 = function ːread_parse() {
        var $a, $b, self = this, time = nil;

        if ((($a = $rb_gt((time = $rb_plus((((($b = self.log['$[]']("read")) !== false && $b !== nil && $b != null) ? $b : 0)), (((($b = self.log['$[]']("parse")) !== false && $b !== nil && $b != null) ? $b : 0)))), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return time
          } else {
          return nil
        };
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$convert', TMP_5 = function ːconvert() {
        var $a, self = this;

        return ((($a = self.log['$[]']("convert")) !== false && $a !== nil && $a != null) ? $a : 0);
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$read_parse_convert', TMP_6 = function ːread_parse_convert() {
        var $a, $b, self = this, time = nil;

        if ((($a = $rb_gt((time = $rb_plus($rb_plus((((($b = self.log['$[]']("read")) !== false && $b !== nil && $b != null) ? $b : 0)), (((($b = self.log['$[]']("parse")) !== false && $b !== nil && $b != null) ? $b : 0))), (((($b = self.log['$[]']("convert")) !== false && $b !== nil && $b != null) ? $b : 0)))), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return time
          } else {
          return nil
        };
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$total', TMP_7 = function ːtotal() {
        var $a, $b, self = this, time = nil;

        if ((($a = $rb_gt((time = $rb_plus($rb_plus($rb_plus((((($b = self.log['$[]']("read")) !== false && $b !== nil && $b != null) ? $b : 0)), (((($b = self.log['$[]']("parse")) !== false && $b !== nil && $b != null) ? $b : 0))), (((($b = self.log['$[]']("convert")) !== false && $b !== nil && $b != null) ? $b : 0))), (((($b = self.log['$[]']("write")) !== false && $b !== nil && $b != null) ? $b : 0)))), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return time
          } else {
          return nil
        };
      }, TMP_7.$$arity = 0);

      return (Opal.defn(self, '$print_report', TMP_8 = function ːprint_report(to, subject) {
        var self = this;
        if ($gvars.stdout == null) $gvars.stdout = nil;

        if (to == null) {
          to = $gvars.stdout;
        }
        if (subject == null) {
          subject = nil;
        }
        if (subject !== false && subject !== nil && subject != null) {
          to.$puts("Input file: " + (subject))};
        to.$puts("  Time to read and parse source: " + ("%05.5f"['$%'](self.$read_parse().$to_f())));
        to.$puts("  Time to convert document: " + ("%05.5f"['$%'](self.$convert().$to_f())));
        return to.$puts("  Total time (read, parse and convert): " + ("%05.5f"['$%'](self.$read_parse_convert().$to_f())));
      }, TMP_8.$$arity = -1), nil) && 'print_report';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/core_ext/nil_or_empty"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = self['$method_defined?']("nil_or_empty?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return Opal.alias(self, 'nil_or_empty?', 'nil?')
    }
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = self['$method_defined?']("nil_or_empty?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return Opal.alias(self, 'nil_or_empty?', 'empty?')
    }
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = self['$method_defined?']("nil_or_empty?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return Opal.alias(self, 'nil_or_empty?', 'empty?')
    }
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = self['$method_defined?']("nil_or_empty?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return Opal.alias(self, 'nil_or_empty?', 'empty?')
    }
  })($scope.base, null);
  return (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, $a;

    if ((($a = self['$method_defined?']("nil_or_empty?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return Opal.alias(self, 'nil_or_empty?', 'nil?')
    }
  })($scope.base, null);
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/core_ext/string/limit"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$<', '$bytesize', '$valid_encoding?', '$force_encoding', '$byteslice', '$-']);
  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, $a, TMP_1;

    if ((($a = self['$method_defined?']("limit")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (Opal.defn(self, '$limit', TMP_1 = function ːlimit(size) {
        var $a, $b, self = this, result = nil;

        if ((($a = $rb_lt(size, self.$bytesize())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return self
        };
        while (!((($b = (((result = self.$byteslice(0, size))).$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_8'))))['$valid_encoding?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true)))) {
        size = $rb_minus(size, 1)};
        return result;
      }, TMP_1.$$arity = 1), nil) && 'limit'
    }
  })($scope.base, null)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/core_ext"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$!=']);
  self.$require("asciidoctor/core_ext/nil_or_empty");
  if ((($a = $scope.get('RUBY_MIN_VERSION_1_9')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return self.$require("asciidoctor/core_ext/string/limit")
  } else if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  };
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/helpers"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$==', '$===', '$fail', '$warn', '$chomp', '$message', '$class', '$normalize_lines_from_string', '$normalize_lines_array', '$empty?', '$to_a', '$bytes', '$[]', '$map', '$rstrip', '$lines', '$encode', '$force_encoding', '$join', '$[]=', '$encoding', '$nil_or_empty?', '$each_line', '$include?', '$=~', '$gsub', '$sprintf', '$each_byte', '$extname', '$-@', '$length', '$basename', '$directory?', '$dirname', '$!', '$!=', '$mkdir_p', '$mkdir']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_7, TMP_9, TMP_10, TMP_11, TMP_14, TMP_15, TMP_16, TMP_17;

      Opal.defs(self, '$require_library', TMP_1 = function ːrequire_library(name, gem_name, on_failure) {
        var self = this, e = nil, $case = nil;

        if (gem_name == null) {
          gem_name = true;
        }
        if (on_failure == null) {
          on_failure = "abort";
        }
        try {
          return self.$require(name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.get('LoadError')])) {e = $err;
            try {
              if (gem_name !== false && gem_name !== nil && gem_name != null) {
                if (gem_name['$=='](true)) {
                  gem_name = name};
                return (function() {$case = on_failure;if ("abort"['$===']($case)) {return self.$fail("asciidoctor: FAILED: required gem '" + (gem_name) + "' is not installed. Processing aborted.")}else if ("warn"['$===']($case)) {return self.$warn("asciidoctor: WARNING: optional gem '" + (gem_name) + "' is not installed. Functionality disabled.")}else { return nil }})();
                } else {
                return (function() {$case = on_failure;if ("abort"['$===']($case)) {return self.$fail("asciidoctor: FAILED: " + (e.$message().$chomp(".")) + ". Processing aborted.")}else if ("warn"['$===']($case)) {return self.$warn("asciidoctor: WARNING: " + (e.$message().$chomp(".")) + ". Functionality disabled.")}else { return nil }})()
              }
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_1.$$arity = -2);

      Opal.defs(self, '$normalize_lines', TMP_2 = function ːnormalize_lines(data) {
        var self = this;

        if (data.$class()['$=='](Opal.get('String'))) {
          return (self.$normalize_lines_from_string(data))
          } else {
          return (self.$normalize_lines_array(data))
        };
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$normalize_lines_array', TMP_7 = function ːnormalize_lines_array(data) {
        var $a, $b, TMP_3, $c, TMP_4, $d, TMP_5, $e, TMP_6, self = this, leading_bytes = nil, first_line = nil, utf8 = nil, leading_2_bytes = nil;

        if ((($a = data['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        leading_bytes = ((first_line = data['$[]'](0)))['$[]']($range(0, 2, false)).$bytes().$to_a();
        if ((($a = $scope.get('COERCE_ENCODING')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          utf8 = ((Opal.get('Encoding')).$$scope.get('UTF_8'));
          if (((leading_2_bytes = leading_bytes['$[]']($range(0, 1, false))))['$==']($scope.get('BOM_BYTES_UTF_16LE'))) {
            return ($a = ($b = ((data.$join().$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_16LE'))))['$[]']($range(1, -1, false)).$encode(utf8)).$lines()).$map, $a.$$p = (TMP_3 = function(line){var self = TMP_3.$$s || this;
if (line == null) line = nil;
            return line.$rstrip()}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
          } else if (leading_2_bytes['$==']($scope.get('BOM_BYTES_UTF_16BE'))) {
            data['$[]='](0, (first_line.$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_16BE'))))['$[]']($range(1, -1, false)));
            return ($a = ($c = data).$map, $a.$$p = (TMP_4 = function(line){var self = TMP_4.$$s || this;
if (line == null) line = nil;
            return "" + (((line.$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_16BE')))).$encode(utf8)).$rstrip())}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($c);
          } else if (leading_bytes['$[]']($range(0, 2, false))['$==']($scope.get('BOM_BYTES_UTF_8'))) {
            data['$[]='](0, (first_line.$force_encoding(utf8))['$[]']($range(1, -1, false)))};
          return ($a = ($d = data).$map, $a.$$p = (TMP_5 = function(line){var self = TMP_5.$$s || this;
if (line == null) line = nil;
          if (line.$encoding()['$=='](utf8)) {
              return line.$rstrip()
              } else {
              return (line.$force_encoding(utf8)).$rstrip()
            }}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d);
          } else {
          if (leading_bytes['$==']($scope.get('BOM_BYTES_UTF_8'))) {
            data['$[]='](0, first_line['$[]']($range(3, -1, false)))};
          return ($a = ($e = data).$map, $a.$$p = (TMP_6 = function(line){var self = TMP_6.$$s || this;
if (line == null) line = nil;
          return line.$rstrip()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($e);
        };
      }, TMP_7.$$arity = 1);

      Opal.defs(self, '$normalize_lines_from_string', TMP_9 = function ːnormalize_lines_from_string(data) {
        var $a, $b, TMP_8, self = this, utf8 = nil, leading_bytes = nil, leading_2_bytes = nil;

        if ((($a = data['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        if ((($a = $scope.get('COERCE_ENCODING')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          utf8 = ((Opal.get('Encoding')).$$scope.get('UTF_8'));
          leading_bytes = data['$[]']($range(0, 2, false)).$bytes().$to_a();
          if (((leading_2_bytes = leading_bytes['$[]']($range(0, 1, false))))['$==']($scope.get('BOM_BYTES_UTF_16LE'))) {
            data = (data.$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_16LE'))))['$[]']($range(1, -1, false)).$encode(utf8)
          } else if (leading_2_bytes['$==']($scope.get('BOM_BYTES_UTF_16BE'))) {
            data = (data.$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_16BE'))))['$[]']($range(1, -1, false)).$encode(utf8)
          } else if (leading_bytes['$[]']($range(0, 2, false))['$==']($scope.get('BOM_BYTES_UTF_8'))) {
            data = (function() {if (data.$encoding()['$=='](utf8)) {
              return data['$[]']($range(1, -1, false))
              } else {
              return (data.$force_encoding(utf8))['$[]']($range(1, -1, false))
            }; return nil; })()
          } else if (data.$encoding()['$=='](utf8)) {
            } else {
            data = data.$force_encoding(utf8)
          };
        } else if (data['$[]']($range(0, 2, false)).$bytes().$to_a()['$==']($scope.get('BOM_BYTES_UTF_8'))) {
          data = data['$[]']($range(3, -1, false))};
        return ($a = ($b = data.$each_line()).$map, $a.$$p = (TMP_8 = function(line){var self = TMP_8.$$s || this;
if (line == null) line = nil;
        return line.$rstrip()}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
      }, TMP_9.$$arity = 1);

      Opal.defs(self, '$uriish?', TMP_10 = function(str) {
        var $a, self = this;

        return ($a = (str['$include?'](":")), $a !== false && $a !== nil && $a != null ?str['$=~']($scope.get('UriSniffRx')) : $a);
      }, TMP_10.$$arity = 1);

      Opal.defs(self, '$uri_prefix', TMP_11 = function ːuri_prefix(str) {
        var $a, $b, self = this;

        if ((($a = ($b = (str['$include?'](":")), $b !== false && $b !== nil && $b != null ?str['$=~']($scope.get('UriSniffRx')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))
          } else {
          return nil
        };
      }, TMP_11.$$arity = 1);

      Opal.cdecl($scope, 'REGEXP_ENCODE_URI_CHARS', /[^\w\-.!~*';:@=+$,()\[\]]/);

      Opal.defs(self, '$encode_uri', TMP_14 = function ːencode_uri(str) {
        var $a, $b, TMP_12, self = this;

        return ($a = ($b = str).$gsub, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $c, $d, TMP_13, $e;

        return ($c = ($d = (($e = $gvars['~']) === nil ? nil : $e['$[]'](0)).$each_byte()).$map, $c.$$p = (TMP_13 = function(c){var self = TMP_13.$$s || this;
if (c == null) c = nil;
          return self.$sprintf("%%%02X", c)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $c).call($d).$join()}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b, $scope.get('REGEXP_ENCODE_URI_CHARS'));
      }, TMP_14.$$arity = 1);

      Opal.defs(self, '$rootname', TMP_15 = function ːrootname(file_name) {
        var $a, self = this, ext = nil;

        if ((($a = ((ext = Opal.get('File').$extname(file_name)))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return file_name
          } else {
          return file_name['$[]']($range(0, ext.$length()['$-@'](), true))
        };
      }, TMP_15.$$arity = 1);

      Opal.defs(self, '$basename', TMP_16 = function ːbasename(file_name, drop_extname) {
        var self = this;

        if (drop_extname == null) {
          drop_extname = false;
        }
        if (drop_extname !== false && drop_extname !== nil && drop_extname != null) {
          return Opal.get('File').$basename(file_name, (Opal.get('File').$extname(file_name)))
          } else {
          return Opal.get('File').$basename(file_name)
        };
      }, TMP_16.$$arity = -2);

      Opal.defs(self, '$mkdir_p', TMP_17 = function ːmkdir_p(dir) {
        var $a, $b, self = this, parent_dir = nil;

        if ((($a = Opal.get('File')['$directory?'](dir)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          parent_dir = Opal.get('File').$dirname(dir);
          if ((($a = ($b = Opal.get('File')['$directory?'](parent_dir = Opal.get('File').$dirname(dir))['$!'](), $b !== false && $b !== nil && $b != null ?parent_dir['$!='](".") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$mkdir_p(parent_dir)};
          return Opal.get('Dir').$mkdir(dir);
        };
      }, TMP_17.$$arity = 1);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/substitutors"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$join', '$keys', '$[]', '$+', '$attr_reader', '$!', '$==', '$===', '$each', '$has_key?', '$<<', '$empty?', '$*', '$include?', '$extract_passthroughs', '$sub_specialchars', '$sub_quotes', '$sub_attributes', '$split', '$sub_replacements', '$sub_macros', '$highlight_source', '$sub_callouts', '$sub_post_replacements', '$warn', '$restore_passthroughs', '$apply_subs', '$compat_mode', '$gsub', '$nil_or_empty?', '$[]=', '$size', '$unescape_brackets', '$resolve_pass_subs', '$>', '$-', '$end_with?', '$parse_attributes', '$start_with?', '$to_sym', '$attributes', '$document', '$basebackend?', '$to_i', '$convert', '$new', '$clear', '$convert_quoted_text', '$do_replacement', '$tr', '$length', '$store_attribute', '$fetch', '$attribute_undefined', '$counter', '$key?', '$downcase', '$attribute_missing', '$unescape_bracketed_text', '$inject', '$strip', '$map', '$pop', '$rstrip', '$extensions', '$inline_macros?', '$config', '$process_method', '$regexp', '$instance', '$inline_macros', '$register', '$basename', '$split_simple_csv', '$normalize_string', '$!=', '$!~', '$delete', '$chop', '$attr?', '$sub', '$chomp', '$encode_uri', '$sub_inline_xrefs', '$sub_inline_anchors', '$find', '$id', '$references', '$index', '$text', '$rootname', '$key', '$escape', '$attr', '$read_next_id', '$callouts', '$push', '$parse_quoted_text_attributes', '$shorthand_property_syntax', '$shift', '$concat', '$parse_into', '$parse', '$each_char', '$=~', '$chr', '$dup', '$&', '$resolve_subs', '$nil?', '$require_library', '$set_attr', '$sub_source', '$resolve_highlight_lines', '$highlight', '$to_a', '$uniq', '$sort', '$option?', '$resolve_block_subs']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Substitutors, self = $Substitutors = $module($base, 'Substitutors');

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_10, TMP_12, TMP_14, TMP_17, TMP_20, TMP_21, TMP_24, TMP_40, TMP_43, TMP_46, TMP_48, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_60, TMP_62, TMP_63, TMP_64, TMP_69, TMP_71, TMP_72, TMP_74;

      Opal.cdecl($scope, 'SPECIAL_CHARS', $hash2(["&", "<", ">"], {"&": "&amp;", "<": "&lt;", ">": "&gt;"}));

      Opal.cdecl($scope, 'SPECIAL_CHARS_PATTERN', (new RegExp("[" + $scope.get('SPECIAL_CHARS').$keys().$join() + "]")));

      Opal.cdecl($scope, 'SUBS', $hash2(["basic", "normal", "verbatim", "title", "header", "pass"], {"basic": ["specialcharacters"], "normal": ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"], "verbatim": ["specialcharacters", "callouts"], "title": ["specialcharacters", "quotes", "replacements", "macros", "attributes", "post_replacements"], "header": ["specialcharacters", "attributes"], "pass": []}));

      Opal.cdecl($scope, 'COMPOSITE_SUBS', $hash2(["none", "normal", "verbatim", "specialchars"], {"none": [], "normal": $scope.get('SUBS')['$[]']("normal"), "verbatim": $scope.get('SUBS')['$[]']("verbatim"), "specialchars": ["specialcharacters"]}));

      Opal.cdecl($scope, 'SUB_SYMBOLS', $hash2(["a", "m", "n", "p", "q", "r", "c", "v"], {"a": "attributes", "m": "macros", "n": "normal", "p": "post_replacements", "q": "quotes", "r": "replacements", "c": "specialcharacters", "v": "verbatim"}));

      Opal.cdecl($scope, 'SUB_OPTIONS', $hash2(["block", "inline"], {"block": $rb_plus($rb_plus($scope.get('COMPOSITE_SUBS').$keys(), $scope.get('SUBS')['$[]']("normal")), ["callouts"]), "inline": $rb_plus($scope.get('COMPOSITE_SUBS').$keys(), $scope.get('SUBS')['$[]']("normal"))}));

      Opal.cdecl($scope, 'SUB_HIGHLIGHT', ["coderay", "pygments"]);

      Opal.cdecl($scope, 'PASS_START', "\u0096");

      Opal.cdecl($scope, 'PASS_END', "\u0097");

      Opal.cdecl($scope, 'PASS_MATCH', /\u0096(\d+)\u0097/);

      Opal.cdecl($scope, 'PASS_MATCH_HI', /<span[^>]*>\u0096<\/span>[^\d]*(\d+)[^\d]*<span[^>]*>\u0097<\/span>/);

      self.$attr_reader("passthroughs");

      Opal.defn(self, '$apply_subs', TMP_3 = function ːapply_subs(source, subs, expand) {
        var $a, $b, TMP_1, $c, TMP_2, self = this, effective_subs = nil, text = nil, multiline = nil, has_passthroughs = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (subs == null) {
          subs = "normal";
        }
        if (expand == null) {
          expand = false;
        }
        if ((($a = subs['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return source
        } else if (subs['$==']("normal")) {
          subs = $scope.get('SUBS')['$[]']("normal")
        } else if (expand !== false && expand !== nil && expand != null) {
          if ((($a = Opal.get('Symbol')['$==='](subs)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            subs = ((($a = $scope.get('COMPOSITE_SUBS')['$[]'](subs)) !== false && $a !== nil && $a != null) ? $a : [subs])
            } else {
            effective_subs = [];
            ($a = ($b = subs).$each, $a.$$p = (TMP_1 = function(key){var self = TMP_1.$$s || this, $c;
if (key == null) key = nil;
            if ((($c = $scope.get('COMPOSITE_SUBS')['$has_key?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return effective_subs = $rb_plus(effective_subs, $scope.get('COMPOSITE_SUBS')['$[]'](key))
                } else {
                return effective_subs['$<<'](key)
              }}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
            subs = effective_subs;
          }};
        if ((($a = subs['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return source};
        text = (function() {if ((($a = (multiline = Opal.get('Array')['$==='](source))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $rb_times(source, $scope.get('EOL'))
          } else {
          return source
        }; return nil; })();
        if ((($a = (has_passthroughs = subs['$include?']("macros"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = self.$extract_passthroughs(text);
          if ((($a = self.passthroughs['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            has_passthroughs = false};};
        ($a = ($c = subs).$each, $a.$$p = (TMP_2 = function(type){var self = TMP_2.$$s || this, $d, $case = nil;
if (type == null) type = nil;
        return (function() {$case = type;if ("specialcharacters"['$===']($case)) {return text = self.$sub_specialchars(text)}else if ("quotes"['$===']($case)) {return text = self.$sub_quotes(text)}else if ("attributes"['$===']($case)) {return text = $rb_times(self.$sub_attributes(text.$split($scope.get('EOL'))), $scope.get('EOL'))}else if ("replacements"['$===']($case)) {return text = self.$sub_replacements(text)}else if ("macros"['$===']($case)) {return text = self.$sub_macros(text)}else if ("highlight"['$===']($case)) {return text = self.$highlight_source(text, (subs['$include?']("callouts")))}else if ("callouts"['$===']($case)) {if ((($d = subs['$include?']("highlight")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil
            } else {
            return text = self.$sub_callouts(text)
          }}else if ("post_replacements"['$===']($case)) {return text = self.$sub_post_replacements(text)}else {return self.$warn("asciidoctor: WARNING: unknown substitution type " + (type))}})()}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c);
        if (has_passthroughs !== false && has_passthroughs !== nil && has_passthroughs != null) {
          text = self.$restore_passthroughs(text)};
        if (multiline !== false && multiline !== nil && multiline != null) {
          return (text.$split($scope.get('EOL')))
          } else {
          return text
        };
      }, TMP_3.$$arity = -2);

      Opal.defn(self, '$apply_normal_subs', TMP_4 = function ːapply_normal_subs(lines) {
        var $a, self = this;

        return self.$apply_subs((function() {if ((($a = Opal.get('Array')['$==='](lines)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $rb_times(lines, $scope.get('EOL'))
          } else {
          return lines
        }; return nil; })());
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$apply_title_subs', TMP_5 = function ːapply_title_subs(title) {
        var self = this;

        return self.$apply_subs(title, $scope.get('SUBS')['$[]']("title"));
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$apply_header_subs', TMP_6 = function ːapply_header_subs(text) {
        var self = this;

        return self.$apply_subs(text, $scope.get('SUBS')['$[]']("header"));
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$extract_passthroughs', TMP_10 = function ːextract_passthroughs(text) {
        var $a, $b, $c, TMP_7, $d, TMP_8, $e, TMP_9, self = this, compat_mode = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;
        if (self.document == null) self.document = nil;

        compat_mode = self.document.$compat_mode();
        if ((($a = ((($b = ((($c = (text['$include?']("++"))) !== false && $c !== nil && $c != null) ? $c : (text['$include?']("$$")))) !== false && $b !== nil && $b != null) ? $b : (text['$include?']("ss:")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = ($a = ($b = text).$gsub, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $d, $e, m = nil, preceding = nil, boundary = nil, pass_key = nil, attributes = nil, escape_count = nil, content = nil, old_behavior = nil, subs = nil;
            if (self.passthroughs == null) self.passthroughs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            preceding = nil;
            if ((($d = ((boundary = m['$[]'](4)))['$nil_or_empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              if (m['$[]'](6)['$==']("\\")) {
                return m['$[]'](0)['$[]']($range(1, -1, false));};
              self.passthroughs['$[]='](pass_key = self.passthroughs.$size(), $hash2(["text", "subs"], {"text": (self.$unescape_brackets(m['$[]'](8))), "subs": ((function() {if ((($d = m['$[]'](7)['$nil_or_empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return []
                } else {
                return (self.$resolve_pass_subs(m['$[]'](7)))
              }; return nil; })())}));
              } else {
              if ((($d = (($e = compat_mode !== false && compat_mode !== nil && compat_mode != null) ? boundary['$==']("++") : compat_mode)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return (function() {if ((($d = m['$[]'](2)['$nil_or_empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return "" + (m['$[]'](1)) + (m['$[]'](3)) + "++" + (self.$extract_passthroughs(m['$[]'](5))) + "++"
                  } else {
                  return "" + (m['$[]'](1)) + "[" + (m['$[]'](2)) + "]" + (m['$[]'](3)) + "++" + (self.$extract_passthroughs(m['$[]'](5))) + "++"
                }; return nil; })();};
              attributes = m['$[]'](2);
              if ((($d = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                if (attributes['$==']("")) {
                  attributes = nil}};
              escape_count = m['$[]'](3).$size();
              content = m['$[]'](5);
              old_behavior = false;
              if (attributes !== false && attributes !== nil && attributes != null) {
                if ((($d = $rb_gt(escape_count, 0)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return "" + (m['$[]'](1)) + "[" + (attributes) + "]" + ($rb_times("\\", ($rb_minus(escape_count, 1)))) + (boundary) + (m['$[]'](5)) + (boundary) + ")";
                } else if (m['$[]'](1)['$==']("\\")) {
                  preceding = "[" + (attributes) + "]";
                  attributes = nil;
                  } else {
                  if ((($d = (($e = boundary['$==']("++")) ? (attributes['$end_with?']("x-")) : boundary['$==']("++"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                    old_behavior = true;
                    attributes = attributes['$[]']($range(0, -2, true));};
                  attributes = self.$parse_attributes(attributes);
                }
              } else if ((($d = $rb_gt(escape_count, 0)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return "" + (m['$[]'](1)) + "[" + (attributes) + "]" + ($rb_times("\\", ($rb_minus(escape_count, 1)))) + (boundary) + (m['$[]'](5)) + (boundary);};
              subs = ((function() {if (boundary['$==']("+++")) {
                return []
                } else {
                return ["specialcharacters"]
              }; return nil; })());
              pass_key = self.passthroughs.$size();
              if (attributes !== false && attributes !== nil && attributes != null) {
                if (old_behavior !== false && old_behavior !== nil && old_behavior != null) {
                  self.passthroughs['$[]='](pass_key, $hash2(["text", "subs", "type", "attributes"], {"text": content, "subs": $scope.get('SUBS')['$[]']("normal"), "type": "monospaced", "attributes": attributes}))
                  } else {
                  self.passthroughs['$[]='](pass_key, $hash2(["text", "subs", "type", "attributes"], {"text": content, "subs": subs, "type": "unquoted", "attributes": attributes}))
                }
                } else {
                self.passthroughs['$[]='](pass_key, $hash2(["text", "subs"], {"text": content, "subs": subs}))
              };
            };
            return "" + (preceding) + ($scope.get('PASS_START')) + (pass_key) + ($scope.get('PASS_END'));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b, $scope.get('PassInlineMacroRx'))};
        $c = $scope.get('PassInlineRx')['$[]'](compat_mode), $a = Opal.to_ary($c), pass_inline_char1 = ($a[0] == null ? nil : $a[0]), pass_inline_char2 = ($a[1] == null ? nil : $a[1]), pass_inline_rx = ($a[2] == null ? nil : $a[2]), $c;
        if ((($a = ((($c = (text['$include?'](pass_inline_char1))) !== false && $c !== nil && $c != null) ? $c : ((($d = pass_inline_char2 !== false && pass_inline_char2 !== nil && pass_inline_char2 != null) ? (text['$include?'](pass_inline_char2)) : pass_inline_char2)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = ($a = ($c = text).$gsub, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e, $f, m = nil, preceding = nil, attributes = nil, escape_mark = nil, format_mark = nil, content = nil, old_behavior = nil, pass_key = nil, subs = nil;
            if (self.passthroughs == null) self.passthroughs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            preceding = m['$[]'](1);
            attributes = m['$[]'](2);
            escape_mark = (function() {if ((($e = (m['$[]'](3)['$start_with?']("\\"))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return "\\"
              } else {
              return nil
            }; return nil; })();
            format_mark = m['$[]'](4);
            content = m['$[]'](5);
            if ((($e = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              if (attributes['$==']("")) {
                attributes = nil}};
            if (compat_mode !== false && compat_mode !== nil && compat_mode != null) {
              old_behavior = true
            } else if ((($e = (old_behavior = ((($f = attributes !== false && attributes !== nil && attributes != null) ? (attributes['$end_with?']("x-")) : attributes)))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              attributes = attributes['$[]']($range(0, -2, true))};
            if (attributes !== false && attributes !== nil && attributes != null) {
              if ((($e = (($f = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`"))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return "" + (preceding) + "[" + (attributes) + "]" + (escape_mark) + "`" + (self.$extract_passthroughs(content)) + "`";};
              if (escape_mark !== false && escape_mark !== nil && escape_mark != null) {
                return "" + (preceding) + "[" + (attributes) + "]" + (m['$[]'](3)['$[]']($range(1, -1, false)));
              } else if (preceding['$==']("\\")) {
                preceding = "[" + (attributes) + "]";
                attributes = nil;
                } else {
                attributes = self.$parse_attributes(attributes)
              };
            } else if ((($e = (($f = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`"))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return "" + (preceding) + (escape_mark) + "`" + (self.$extract_passthroughs(content)) + "`";
            } else if (escape_mark !== false && escape_mark !== nil && escape_mark != null) {
              return "" + (preceding) + (m['$[]'](3)['$[]']($range(1, -1, false)));};
            pass_key = self.passthroughs.$size();
            if (compat_mode !== false && compat_mode !== nil && compat_mode != null) {
              self.passthroughs['$[]='](pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": ["specialcharacters"], "attributes": attributes, "type": "monospaced"}))
            } else if (attributes !== false && attributes !== nil && attributes != null) {
              if (old_behavior !== false && old_behavior !== nil && old_behavior != null) {
                subs = ((function() {if (format_mark['$==']("`")) {
                  return ["specialcharacters"]
                  } else {
                  return $scope.get('SUBS')['$[]']("normal")
                }; return nil; })());
                self.passthroughs['$[]='](pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": subs, "attributes": attributes, "type": "monospaced"}));
                } else {
                self.passthroughs['$[]='](pass_key, $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": ["specialcharacters"], "attributes": attributes, "type": "unquoted"}))
              }
              } else {
              self.passthroughs['$[]='](pass_key, $hash2(["text", "subs"], {"text": content, "subs": ["specialcharacters"]}))
            };
            return "" + (preceding) + ($scope.get('PASS_START')) + (pass_key) + ($scope.get('PASS_END'));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c, pass_inline_rx)};
        if ((($a = ($d = (text['$include?'](":")), $d !== false && $d !== nil && $d != null ?(((($e = (text['$include?']("stem:"))) !== false && $e !== nil && $e != null) ? $e : (text['$include?']("math:")))) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = ($a = ($d = text).$gsub, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $f, m = nil, type = nil, default_stem_type = nil, content = nil, subs = nil, pass_key = nil;
            if (self.document == null) self.document = nil;
            if (self.passthroughs == null) self.passthroughs = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($f = m['$[]'](0)['$start_with?']("\\")) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if (((type = m['$[]'](1).$to_sym()))['$==']("stem")) {
              type = ((function() {if ((($f = ((default_stem_type = self.$document().$attributes()['$[]']("stem")))['$nil_or_empty?']()) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return "asciimath"
                } else {
                return default_stem_type
              }; return nil; })()).$to_sym()};
            content = self.$unescape_brackets(m['$[]'](3));
            if ((($f = m['$[]'](2)['$nil_or_empty?']()) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              subs = (function() {if ((($f = (self.document['$basebackend?']("html"))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ["specialcharacters"]
                } else {
                return []
              }; return nil; })()
              } else {
              subs = self.$resolve_pass_subs(m['$[]'](2))
            };
            self.passthroughs['$[]='](pass_key = self.passthroughs.$size(), $hash2(["text", "subs", "type"], {"text": content, "subs": subs, "type": type}));
            return "" + ($scope.get('PASS_START')) + (pass_key) + ($scope.get('PASS_END'));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($d, $scope.get('StemInlineMacroRx'))};
        return text;
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$restore_passthroughs', TMP_12 = function ːrestore_passthroughs(text, outer) {
        var $a, $b, $c, TMP_11, self = this;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (outer == null) {
          outer = true;
        }
        try {
        if ((($a = (($b = outer !== false && outer !== nil && outer != null) ? (((($c = self.passthroughs['$empty?']()) !== false && $c !== nil && $c != null) ? $c : text['$include?']($scope.get('PASS_START'))['$!']())) : outer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return text};
        return ($a = ($b = text).$gsub, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $d, pass = nil, subbed_text = nil, subs = nil, type = nil;
          if (self.passthroughs == null) self.passthroughs = nil;
          if ($gvars["~"] == null) $gvars["~"] = nil;

        pass = self.passthroughs['$[]']($gvars["~"]['$[]'](1).$to_i());
          subbed_text = (function() {if ((($d = (subs = pass['$[]']("subs"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.$apply_subs(pass['$[]']("text"), subs)
            } else {
            return pass['$[]']("text")
          }; return nil; })();
          if ((($d = (type = pass['$[]']("type"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            subbed_text = $scope.get('Inline').$new(self, "quoted", subbed_text, $hash2(["type", "attributes"], {"type": type, "attributes": pass['$[]']("attributes")})).$convert()};
          if ((($d = subbed_text['$include?']($scope.get('PASS_START'))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return self.$restore_passthroughs(subbed_text, false)
            } else {
            return subbed_text
          };}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, $scope.get('PASS_MATCH'));
        } finally {
          if (outer !== false && outer !== nil && outer != null) {
            self.passthroughs.$clear()}
        };
      }, TMP_12.$$arity = -2);

      Opal.defn(self, '$sub_specialchars', TMP_14 = function ːsub_specialchars(text) {
        var $a, $b, TMP_13, self = this;

        if ((($a = $scope.get('SUPPORTS_GSUB_RESULT_HASH')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return text.$gsub($scope.get('SPECIAL_CHARS_PATTERN'), $scope.get('SPECIAL_CHARS'))
          } else {
          return ($a = ($b = text).$gsub, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $c;

          return $scope.get('SPECIAL_CHARS')['$[]']((($c = $gvars['~']) === nil ? nil : $c['$[]'](0)))}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, $scope.get('SPECIAL_CHARS_PATTERN'))
        };
      }, TMP_14.$$arity = 1);

      Opal.alias(self, 'sub_specialcharacters', 'sub_specialchars');

      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        Opal.defn(self, '$sub_quotes', TMP_17 = function ːsub_quotes(text) {
          var $a, $b, TMP_15, self = this;
          if (self.document == null) self.document = nil;

          ($a = ($b = $scope.get('QUOTE_SUBS')['$[]'](self.document.$compat_mode())).$each, $a.$$p = (TMP_15 = function(type, scope, pattern){var self = TMP_15.$$s || this, $c, $d, TMP_16;
if (type == null) type = nil;if (scope == null) scope = nil;if (pattern == null) pattern = nil;
          return text = ($c = ($d = text).$gsub, $c.$$p = (TMP_16 = function(){var self = TMP_16.$$s || this;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            return self.$convert_quoted_text($gvars["~"], type, scope)}, TMP_16.$$s = self, TMP_16.$$arity = 0, TMP_16), $c).call($d, pattern)}, TMP_15.$$s = self, TMP_15.$$arity = 3, TMP_15), $a).call($b);
          return text;
        }, TMP_17.$$arity = 1);

        Opal.defn(self, '$sub_replacements', TMP_20 = function ːsub_replacements(text) {
          var $a, $b, TMP_18, self = this;

          ($a = ($b = $scope.get('REPLACEMENTS')).$each, $a.$$p = (TMP_18 = function(pattern, replacement, restore){var self = TMP_18.$$s || this, $c, $d, TMP_19;
if (pattern == null) pattern = nil;if (replacement == null) replacement = nil;if (restore == null) restore = nil;
          return text = ($c = ($d = text).$gsub, $c.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            return self.$do_replacement($gvars["~"], replacement, restore)}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $c).call($d, pattern)}, TMP_18.$$s = self, TMP_18.$$arity = 3, TMP_18), $a).call($b);
          return text;
        }, TMP_20.$$arity = 1);};

      Opal.defn(self, '$do_replacement', TMP_21 = function ːdo_replacement(m, replacement, restore) {
        var $a, self = this, matched = nil, $case = nil;

        if ((($a = ((matched = m['$[]'](0)))['$include?']("\\")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return matched.$tr("\\", "")
          } else {
          return (function() {$case = restore;if ("none"['$===']($case)) {return replacement}else if ("leading"['$===']($case)) {return "" + (m['$[]'](1)) + (replacement)}else if ("bounding"['$===']($case)) {return "" + (m['$[]'](1)) + (replacement) + (m['$[]'](2))}else { return nil }})()
        };
      }, TMP_21.$$arity = 3);

      Opal.defn(self, '$sub_attributes', TMP_24 = function ːsub_attributes(data, opts) {
        var $a, $b, TMP_22, self = this, string_data = nil, doc_attrs = nil, attribute_missing = nil, result = nil;
        if (self.document == null) self.document = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = data['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return data};
        if ((($a = (string_data = Opal.get('String')['$==='](data))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          data = [data]};
        doc_attrs = self.document.$attributes();
        attribute_missing = nil;
        result = [];
        ($a = ($b = data).$each, $a.$$p = (TMP_22 = function(line){var self = TMP_22.$$s || this, $c, $d, TMP_23, $e, $f, reject = nil, reject_if_empty = nil;
if (line == null) line = nil;
        reject = false;
          reject_if_empty = false;
          if ((($c = line['$include?']("{")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            line = (function(){var $brk = Opal.new_brk(); try {return ($c = ($d = line).$gsub, $c.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this, $e, $f, $g, m = nil, offset = nil, directive = nil, expr = nil, $case = nil, args = nil, _ = nil, value = nil, val = nil, key = nil;
              if (self.document == null) self.document = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            m = $gvars["~"];
              if ((($e = ((($f = m['$[]'](1)['$==']("\\")) !== false && $f !== nil && $f != null) ? $f : m['$[]'](4)['$==']("\\"))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return "{" + (m['$[]'](2)) + "}"
              } else if ((($e = m['$[]'](3)['$nil_or_empty?']()['$!']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                offset = $rb_plus(((directive = m['$[]'](3))).$length(), 1);
                expr = m['$[]'](2)['$[]']($range(offset, -1, false));
                return (function() {$case = directive;if ("set"['$===']($case)) {args = expr.$split(":");
                $f = $scope.get('Parser').$store_attribute(args['$[]'](0), ((($g = args['$[]'](1)) !== false && $g !== nil && $g != null) ? $g : ""), self.document), $e = Opal.to_ary($f), _ = ($e[0] == null ? nil : $e[0]), value = ($e[1] == null ? nil : $e[1]), $f;
                if (value !== false && value !== nil && value != null) {
                } else if (doc_attrs.$fetch("attribute-undefined", $scope.get('Compliance').$attribute_undefined())['$==']("drop-line")) {
                  reject = true;
                  
                  Opal.brk("", $brk);};
                reject_if_empty = true;
                return "";}else if ("counter"['$===']($case) || "counter2"['$===']($case)) {args = expr.$split(":");
                val = self.document.$counter(args['$[]'](0), args['$[]'](1));
                if (directive['$==']("counter2")) {
                  reject_if_empty = true;
                  return "";
                  } else {
                  return val
                };}else {self.$warn("asciidoctor: WARNING: illegal attribute directive: " + (m['$[]'](3)));
                return m['$[]'](0);}})();
              } else if ((($e = doc_attrs['$key?'](key = m['$[]'](2).$downcase())) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return doc_attrs['$[]'](key)
              } else if ((($e = $scope.get('INTRINSIC_ATTRIBUTES')['$key?'](key)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return $scope.get('INTRINSIC_ATTRIBUTES')['$[]'](key)
                } else {
                return (function() {$case = (((($e = attribute_missing) !== false && $e !== nil && $e != null) ? $e : attribute_missing = (((($f = opts['$[]']("attribute_missing")) !== false && $f !== nil && $f != null) ? $f : doc_attrs.$fetch("attribute-missing", $scope.get('Compliance').$attribute_missing())))));if ("skip"['$===']($case)) {return m['$[]'](0)}else if ("drop-line"['$===']($case)) {self.$warn("asciidoctor: WARNING: dropping line containing reference to missing attribute: " + (key));
                reject = true;
                
                Opal.brk("", $brk);}else if ("warn"['$===']($case)) {self.$warn("asciidoctor: WARNING: skipping reference to missing attribute: " + (key));
                return m['$[]'](0);}else {reject_if_empty = true;
                return "";}})()
              };}, TMP_23.$$s = self, TMP_23.$$brk = $brk, TMP_23.$$arity = 0, TMP_23), $c).call($d, $scope.get('AttributeReferenceRx'))
            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()};
          if ((($c = ((($e = reject) !== false && $e !== nil && $e != null) ? $e : ((($f = reject_if_empty !== false && reject_if_empty !== nil && reject_if_empty != null) ? line['$empty?']() : reject_if_empty)))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            return result['$<<'](line)
          };}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $a).call($b);
        if (string_data !== false && string_data !== nil && string_data != null) {
          return $rb_times(result, $scope.get('EOL'))
          } else {
          return result
        };
      }, TMP_24.$$arity = -2);

      Opal.defn(self, '$sub_macros', TMP_40 = function ːsub_macros(source) {
        var $a, $b, $c, TMP_25, TMP_27, $d, TMP_29, $e, TMP_31, $f, $g, TMP_33, TMP_34, $h, TMP_35, $i, $j, TMP_36, TMP_37, $k, TMP_38, self = this, found = nil, found_colon = nil, use_link_attrs = nil, experimental = nil, result = nil, extensions = nil;
        if (self.document == null) self.document = nil;

        if ((($a = source['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return source};
        found = $hash2([], {});
        found['$[]=']("square_bracket", source['$include?']("["));
        found['$[]=']("round_bracket", source['$include?']("("));
        found['$[]=']("colon", found_colon = source['$include?'](":"));
        found['$[]=']("macroish", (($a = found['$[]']("square_bracket"), $a !== false && $a !== nil && $a != null ?found_colon : $a)));
        found['$[]=']("macroish_short_form", (($a = ($b = found['$[]']("square_bracket"), $b !== false && $b !== nil && $b != null ?found_colon : $b), $a !== false && $a !== nil && $a != null ?source['$include?'](":[") : $a)));
        use_link_attrs = self.document.$attributes()['$has_key?']("linkattrs");
        experimental = self.document.$attributes()['$has_key?']("experimental");
        result = "" + (source);
        if (experimental !== false && experimental !== nil && experimental != null) {
          if ((($a = ($b = found['$[]']("macroish_short_form"), $b !== false && $b !== nil && $b != null ?(((($c = result['$include?']("kbd:")) !== false && $c !== nil && $c != null) ? $c : result['$include?']("btn:"))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = ($a = ($b = result).$gsub, $a.$$p = (TMP_25 = function(){var self = TMP_25.$$s || this, $d, $e, TMP_26, m = nil, captured = nil, keys = nil, label = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            m = $gvars["~"];
              if ((($d = ((captured = m['$[]'](0)))['$start_with?']("\\")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return captured['$[]']($range(1, -1, false));};
              if ((($d = captured['$start_with?']("kbd")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                keys = self.$unescape_bracketed_text(m['$[]'](1));
                if (keys['$==']("+")) {
                  keys = ["+"]
                  } else {
                  keys = ($d = ($e = keys.$split($scope.get('KbdDelimiterRx'))).$inject, $d.$$p = (TMP_26 = function(c, key){var self = TMP_26.$$s || this, $f;
if (c == null) c = nil;if (key == null) key = nil;
                  if ((($f = key['$end_with?']("++")) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                      c['$<<'](key['$[]']($range(0, -3, false)).$strip());
                      c['$<<']("+");
                      } else {
                      c['$<<'](key.$strip())
                    };
                    return c;}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26), $d).call($e, [])
                };
                return $scope.get('Inline').$new(self, "kbd", nil, $hash2(["attributes"], {"attributes": $hash2(["keys"], {"keys": keys})})).$convert();
              } else if ((($d = captured['$start_with?']("btn")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                label = self.$unescape_bracketed_text(m['$[]'](1));
                return $scope.get('Inline').$new(self, "button", label).$convert();
                } else {
                return nil
              };}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25), $a).call($b, $scope.get('KbdBtnInlineMacroRx'))};
          if ((($a = ($c = found['$[]']("macroish"), $c !== false && $c !== nil && $c != null ?result['$include?']("menu:") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = ($a = ($c = result).$gsub, $a.$$p = (TMP_27 = function(){var self = TMP_27.$$s || this, $d, $e, TMP_28, m = nil, captured = nil, menu = nil, items = nil, submenus = nil, menuitem = nil, delim = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            m = $gvars["~"];
              if ((($d = ((captured = m['$[]'](0)))['$start_with?']("\\")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return captured['$[]']($range(1, -1, false));};
              menu = m['$[]'](1);
              items = m['$[]'](2);
              if ((($d = items['$!']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                submenus = [];
                menuitem = nil;
              } else if ((($d = (delim = (function() {if ((($e = items['$include?']("&gt;")) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return "&gt;"
                } else {
                return ((function() {if ((($e = items['$include?'](",")) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  return ","
                  } else {
                  return nil
                }; return nil; })())
              }; return nil; })())) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                submenus = ($d = ($e = items.$split(delim)).$map, $d.$$p = (TMP_28 = function(it){var self = TMP_28.$$s || this;
if (it == null) it = nil;
                return it.$strip()}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $d).call($e);
                menuitem = submenus.$pop();
                } else {
                submenus = [];
                menuitem = items.$rstrip();
              };
              return $scope.get('Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27), $a).call($c, $scope.get('MenuInlineMacroRx'))};
          if ((($a = ($d = result['$include?']("\""), $d !== false && $d !== nil && $d != null ?result['$include?']("&gt;") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = ($a = ($d = result).$gsub, $a.$$p = (TMP_29 = function(){var self = TMP_29.$$s || this, $e, $f, $g, $h, TMP_30, m = nil, captured = nil, input = nil, menu = nil, submenus = nil, menuitem = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            m = $gvars["~"];
              if ((($e = ((captured = m['$[]'](0)))['$start_with?']("\\")) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return captured['$[]']($range(1, -1, false));};
              input = m['$[]'](1);
              $f = ($g = ($h = input.$split("&gt;")).$map, $g.$$p = (TMP_30 = function(it){var self = TMP_30.$$s || this;
if (it == null) it = nil;
              return it.$strip()}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $g).call($h), $e = Opal.to_ary($f), menu = ($e[0] == null ? nil : $e[0]), submenus = $slice.call($e, 1), $f;
              menuitem = submenus.$pop();
              return $scope.get('Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29), $a).call($d, $scope.get('MenuInlineRx'))};};
        if ((($a = ($e = (extensions = self.document.$extensions()), $e !== false && $e !== nil && $e != null ?extensions['$inline_macros?']() : $e)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($e = extensions.$inline_macros()).$each, $a.$$p = (TMP_31 = function(extension){var self = TMP_31.$$s || this, $f, $g, TMP_32;
if (extension == null) extension = nil;
          return result = ($f = ($g = result).$gsub, $f.$$p = (TMP_32 = function(){var self = TMP_32.$$s || this, $h, m = nil, target = nil, attributes = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            m = $gvars["~"];
              if ((($h = m['$[]'](0)['$start_with?']("\\")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                return m['$[]'](0)['$[]']($range(1, -1, false));};
              target = m['$[]'](1);
              attributes = (function() {if (extension.$config()['$[]']("format")['$==']("short")) {
                return $hash2([], {})
              } else if (extension.$config()['$[]']("content_model")['$==']("attributes")) {
                return self.$parse_attributes(m['$[]'](2), (((($h = extension.$config()['$[]']("pos_attrs")) !== false && $h !== nil && $h != null) ? $h : [])), $hash2(["sub_input", "unescape_input"], {"sub_input": true, "unescape_input": true}))
                } else {
                return $hash2(["text"], {"text": (self.$unescape_bracketed_text(m['$[]'](2)))})
              }; return nil; })();
              return extension.$process_method()['$[]'](self, target, attributes);}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32), $f).call($g, extension.$instance().$regexp())}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($e)};
        if ((($a = ($f = found['$[]']("macroish"), $f !== false && $f !== nil && $f != null ?(((($g = result['$include?']("image:")) !== false && $g !== nil && $g != null) ? $g : result['$include?']("icon:"))) : $f)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = ($a = ($f = result).$gsub, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this, $h, $i, $j, m = nil, raw_attrs = nil, type = nil, posattrs = nil, target = nil, attrs = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($h = m['$[]'](0)['$start_with?']("\\")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            raw_attrs = self.$unescape_bracketed_text(m['$[]'](2));
            if ((($h = m['$[]'](0)['$start_with?']("icon:")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              type = "icon";
              posattrs = ["size"];
              } else {
              type = "image";
              posattrs = ["alt", "width", "height"];
            };
            target = self.$sub_attributes(m['$[]'](1));
            if (type['$==']("icon")) {
              } else {
              self.document.$register("images", target)
            };
            attrs = self.$parse_attributes(raw_attrs, posattrs);
            ($h = "alt", $i = attrs, ((($j = $i['$[]']($h)) !== false && $j !== nil && $j != null) ? $j : $i['$[]=']($h, $scope.get('Helpers').$basename(target, true).$tr("_-", " "))));
            return $scope.get('Inline').$new(self, "image", nil, $hash2(["type", "target", "attributes"], {"type": type, "target": target, "attributes": attrs})).$convert();}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $a).call($f, $scope.get('ImageInlineMacroRx'))};
        if ((($a = ((($g = found['$[]']("macroish_short_form")) !== false && $g !== nil && $g != null) ? $g : found['$[]']("round_bracket"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = ($a = ($g = result).$gsub, $a.$$p = (TMP_34 = function(){var self = TMP_34.$$s || this, $h, $i, m = nil, num_brackets = nil, text_in_brackets = nil, macro_name = nil, terms = nil, text = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($h = m['$[]'](0)['$start_with?']("\\")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ((($h = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              if (m['$[]'](1)['$==']("")) {
                m['$[]='](1, nil)}};
            num_brackets = 0;
            text_in_brackets = nil;
            if ((($h = (macro_name = m['$[]'](1))) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              } else {
              text_in_brackets = m['$[]'](3);
              if ((($h = ($i = (text_in_brackets['$start_with?']("(")), $i !== false && $i !== nil && $i != null ?(text_in_brackets['$end_with?'](")")) : $i)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                text_in_brackets = text_in_brackets['$[]']($range(1, -1, true));
                num_brackets = 3;
                } else {
                num_brackets = 2
              };
            };
            if ((($h = ((($i = macro_name['$==']("indexterm")) !== false && $i !== nil && $i != null) ? $i : num_brackets['$=='](3))) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              if ((($h = macro_name['$!']()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                terms = self.$split_simple_csv(self.$normalize_string(text_in_brackets))
                } else {
                terms = self.$split_simple_csv(self.$normalize_string(m['$[]'](2), true))
              };
              self.document.$register("indexterms", [].concat(Opal.to_a(terms)));
              return $scope.get('Inline').$new(self, "indexterm", nil, $hash2(["attributes"], {"attributes": $hash2(["terms"], {"terms": terms})})).$convert();
              } else {
              if ((($h = macro_name['$!']()) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                text = self.$normalize_string(text_in_brackets)
                } else {
                text = self.$normalize_string(m['$[]'](2), true)
              };
              self.document.$register("indexterms", [text]);
              return $scope.get('Inline').$new(self, "indexterm", text, $hash2(["type"], {"type": "visible"})).$convert();
            };}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34), $a).call($g, $scope.get('IndextermInlineMacroRx'))};
        if ((($a = (($h = found_colon !== false && found_colon !== nil && found_colon != null) ? (result['$include?']("://")) : found_colon)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = ($a = ($h = result).$gsub, $a.$$p = (TMP_35 = function(){var self = TMP_35.$$s || this, $i, $j, $k, $l, m = nil, prefix = nil, target = nil, suffix = nil, $case = nil, link_opts = nil, attrs = nil, text = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($i = m['$[]'](2)['$start_with?']("\\")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              return "" + (m['$[]'](1)) + (m['$[]'](2)['$[]']($range(1, -1, false))) + (m['$[]'](3));};
            if ((($i = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              if (m['$[]'](3)['$==']("")) {
                m['$[]='](3, nil)}};
            if ((($i = (($j = m['$[]'](1)['$==']("link:")) ? m['$[]'](3)['$!']() : m['$[]'](1)['$==']("link:"))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              return m['$[]'](0);};
            prefix = ((function() {if ((($i = m['$[]'](1)['$!=']("link:")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              return m['$[]'](1)
              } else {
              return ""
            }; return nil; })());
            target = m['$[]'](2);
            suffix = "";
            if ((($i = ((($j = m['$[]'](3)) !== false && $j !== nil && $j != null) ? $j : target['$!~']($scope.get('UriTerminator')))) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              } else {
              $case = $gvars["~"]['$[]'](0);if (")"['$===']($case)) {target = target['$[]']($range(0, -2, false));
              suffix = ")";}else if (";"['$===']($case)) {if ((($i = ($j = prefix['$start_with?']("&lt;"), $j !== false && $j !== nil && $j != null ?target['$end_with?']("&gt;") : $j)) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                prefix = prefix['$[]']($range(4, -1, false));
                target = target['$[]']($range(0, -5, false));
              } else if ((($i = target['$end_with?'](");")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                target = target['$[]']($range(0, -3, false));
                suffix = ");";
                } else {
                target = target['$[]']($range(0, -2, false));
                suffix = ";";
              }}else if (":"['$===']($case)) {if ((($i = target['$end_with?']("):")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                target = target['$[]']($range(0, -3, false));
                suffix = "):";
                } else {
                target = target['$[]']($range(0, -2, false));
                suffix = ":";
              }}
            };
            self.document.$register("links", target);
            link_opts = $hash2(["type", "target"], {"type": "link", "target": target});
            attrs = nil;
            if ((($i = m['$[]'](3)['$nil_or_empty?']()) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              text = ""
              } else {
              if ((($i = (($j = use_link_attrs !== false && use_link_attrs !== nil && use_link_attrs != null) ? (((($k = m['$[]'](3)['$start_with?']("\"")) !== false && $k !== nil && $k != null) ? $k : (($l = m['$[]'](3)['$include?'](","), $l !== false && $l !== nil && $l != null ?m['$[]'](3)['$include?']("=") : $l)))) : use_link_attrs)) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                attrs = self.$parse_attributes(self.$sub_attributes(m['$[]'](3).$gsub("\\]", "]")), []);
                if ((($i = attrs['$has_key?']("id")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                  link_opts['$[]=']("id", (attrs.$delete("id")))};
                text = ((($i = attrs['$[]'](1)) !== false && $i !== nil && $i != null) ? $i : "");
                } else {
                text = self.$sub_attributes(m['$[]'](3).$gsub("\\]", "]"))
              };
              if ((($i = text['$end_with?']("^")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                text = text.$chop();
                if (attrs !== false && attrs !== nil && attrs != null) {
                  ($i = "window", $j = attrs, ((($k = $j['$[]']($i)) !== false && $k !== nil && $k != null) ? $k : $j['$[]=']($i, "_blank")))
                  } else {
                  attrs = $hash2(["window"], {"window": "_blank"})
                };};
            };
            if ((($i = text['$empty?']()) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
              if ((($i = self.document['$attr?']("hide-uri-scheme")) !== nil && $i != null && (!$i.$$is_boolean || $i == true))) {
                text = target.$sub($scope.get('UriSniffRx'), "")
                } else {
                text = target
              };
              if (attrs !== false && attrs !== nil && attrs != null) {
                attrs['$[]=']("role", (("bare ") + (attrs['$[]']("role"))).$chomp(" "))
                } else {
                attrs = $hash2(["role"], {"role": "bare"})
              };};
            if (attrs !== false && attrs !== nil && attrs != null) {
              link_opts['$[]=']("attributes", attrs)};
            return "" + (prefix) + ($scope.get('Inline').$new(self, "anchor", text, link_opts).$convert()) + (suffix);}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35), $a).call($h, $scope.get('LinkInlineRx'))};
        if ((($a = ((($i = ($j = found['$[]']("macroish"), $j !== false && $j !== nil && $j != null ?(result['$include?']("link:")) : $j)) !== false && $i !== nil && $i != null) ? $i : (result['$include?']("mailto:")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = ($a = ($i = result).$gsub, $a.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $k, $l, $m, m = nil, raw_target = nil, mailto = nil, target = nil, link_opts = nil, attrs = nil, text = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($k = m['$[]'](0)['$start_with?']("\\")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            raw_target = m['$[]'](1);
            mailto = m['$[]'](0)['$start_with?']("mailto:");
            target = (function() {if (mailto !== false && mailto !== nil && mailto != null) {
              return "mailto:" + (raw_target)
              } else {
              return raw_target
            }; return nil; })();
            link_opts = $hash2(["type", "target"], {"type": "link", "target": target});
            attrs = nil;
            text = (function() {if ((($k = (($l = use_link_attrs !== false && use_link_attrs !== nil && use_link_attrs != null) ? (((($m = m['$[]'](2)['$start_with?']("\"")) !== false && $m !== nil && $m != null) ? $m : m['$[]'](2)['$include?'](","))) : use_link_attrs)) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
              attrs = self.$parse_attributes(self.$sub_attributes(m['$[]'](2).$gsub("\\]", "]")), []);
              if ((($k = attrs['$key?']("id")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                link_opts['$[]=']("id", (attrs.$delete("id")))};
              if (mailto !== false && mailto !== nil && mailto != null) {
                if ((($k = attrs['$key?'](2)) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                  target = link_opts['$[]=']("target", "" + (target) + "?subject=" + ($scope.get('Helpers').$encode_uri(attrs['$[]'](2))));
                  if ((($k = attrs['$key?'](3)) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                    target = link_opts['$[]=']("target", "" + (target) + "&amp;body=" + ($scope.get('Helpers').$encode_uri(attrs['$[]'](3))))};}};
              return attrs['$[]'](1);
              } else {
              return self.$sub_attributes(m['$[]'](2).$gsub("\\]", "]"))
            }; return nil; })();
            self.document.$register("links", target);
            if ((($k = text['$end_with?']("^")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
              text = text.$chop();
              if (attrs !== false && attrs !== nil && attrs != null) {
                ($k = "window", $l = attrs, ((($m = $l['$[]']($k)) !== false && $m !== nil && $m != null) ? $m : $l['$[]=']($k, "_blank")))
                } else {
                attrs = $hash2(["window"], {"window": "_blank"})
              };};
            if ((($k = text['$empty?']()) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
              if (mailto !== false && mailto !== nil && mailto != null) {
                text = raw_target
                } else {
                if ((($k = self.document['$attr?']("hide-uri-scheme")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                  text = raw_target.$sub($scope.get('UriSniffRx'), "")
                  } else {
                  text = raw_target
                };
                if (attrs !== false && attrs !== nil && attrs != null) {
                  attrs['$[]=']("role", (("bare ") + (attrs['$[]']("role"))).$chomp(" "))
                  } else {
                  attrs = $hash2(["role"], {"role": "bare"})
                };
              }};
            if (attrs !== false && attrs !== nil && attrs != null) {
              link_opts['$[]=']("attributes", attrs)};
            return $scope.get('Inline').$new(self, "anchor", text, link_opts).$convert();}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $a).call($i, $scope.get('LinkInlineMacroRx'))};
        if ((($a = result['$include?']("@")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = ($a = ($j = result).$gsub, $a.$$p = (TMP_37 = function(){var self = TMP_37.$$s || this, $k, m = nil, address = nil, lead = nil, $case = nil, target = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            address = m['$[]'](0);
            if ((($k = (lead = m['$[]'](1))) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
              $case = lead;if ("\\"['$===']($case)) {return address['$[]']($range(1, -1, false));}else {return address;}};
            target = "mailto:" + (address);
            self.document.$register("links", target);
            return $scope.get('Inline').$new(self, "anchor", address, $hash2(["type", "target"], {"type": "link", "target": target})).$convert();}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37), $a).call($j, $scope.get('EmailInlineMacroRx'))};
        if ((($a = ($k = found['$[]']("macroish_short_form"), $k !== false && $k !== nil && $k != null ?result['$include?']("footnote") : $k)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result = ($a = ($k = result).$gsub, $a.$$p = (TMP_38 = function(){var self = TMP_38.$$s || this, $l, $m, $n, TMP_39, m = nil, id = nil, text = nil, index = nil, type = nil, target = nil, footnote = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($l = m['$[]'](0)['$start_with?']("\\")) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if (m['$[]'](1)['$==']("footnote")) {
              id = nil;
              text = self.$restore_passthroughs(self.$sub_inline_xrefs(self.$sub_inline_anchors(self.$normalize_string(m['$[]'](2), true))), false);
              index = self.document.$counter("footnote-number");
              self.document.$register("footnotes", (($scope.get('Document')).$$scope.get('Footnote')).$new(index, id, text));
              type = nil;
              target = nil;
              } else {
              $m = m['$[]'](2).$split(",", 2), $l = Opal.to_ary($m), id = ($l[0] == null ? nil : $l[0]), text = ($l[1] == null ? nil : $l[1]), $m;
              id = id.$strip();
              if ((($l = text['$nil_or_empty?']()) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                if ((($l = (footnote = ($m = ($n = self.document.$references()['$[]']("footnotes")).$find, $m.$$p = (TMP_39 = function(fn){var self = TMP_39.$$s || this;
if (fn == null) fn = nil;
                return fn.$id()['$=='](id)}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $m).call($n))) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                  index = footnote.$index();
                  text = footnote.$text();
                  } else {
                  index = nil;
                  text = id;
                };
                target = id;
                id = nil;
                type = "xref";
                } else {
                text = self.$restore_passthroughs(self.$sub_inline_xrefs(self.$sub_inline_anchors(self.$normalize_string(text, true))), false);
                index = self.document.$counter("footnote-number");
                self.document.$register("footnotes", (($scope.get('Document')).$$scope.get('Footnote')).$new(index, id, text));
                type = "ref";
                target = nil;
              };
            };
            return $scope.get('Inline').$new(self, "footnote", text, $hash2(["attributes", "id", "target", "type"], {"attributes": $hash2(["index"], {"index": index}), "id": id, "target": target, "type": type})).$convert();}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38), $a).call($k, $scope.get('FootnoteInlineMacroRx'))};
        return self.$sub_inline_xrefs(self.$sub_inline_anchors(result, found), found);
      }, TMP_40.$$arity = 1);

      Opal.defn(self, '$sub_inline_anchors', TMP_43 = function ːsub_inline_anchors(text, found) {
        var $a, $b, $c, TMP_41, $d, $e, TMP_42, self = this;

        if (found == null) {
          found = nil;
        }
        if ((($a = ($b = (((($c = found['$!']()) !== false && $c !== nil && $c != null) ? $c : found['$[]']("square_bracket"))), $b !== false && $b !== nil && $b != null ?text['$include?']("[[[") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = ($a = ($b = text).$gsub, $a.$$p = (TMP_41 = function(){var self = TMP_41.$$s || this, $d, m = nil, id = nil, reftext = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($d = m['$[]'](0)['$start_with?']("\\")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            id = reftext = m['$[]'](1);
            return $scope.get('Inline').$new(self, "anchor", reftext, $hash2(["type", "target"], {"type": "bibref", "target": id})).$convert();}, TMP_41.$$s = self, TMP_41.$$arity = 0, TMP_41), $a).call($b, $scope.get('InlineBiblioAnchorRx'))};
        if ((($a = ((($c = (($d = (((($e = found['$!']()) !== false && $e !== nil && $e != null) ? $e : found['$[]']("square_bracket"))), $d !== false && $d !== nil && $d != null ?text['$include?']("[[") : $d))) !== false && $c !== nil && $c != null) ? $c : (($d = (((($e = found['$!']()) !== false && $e !== nil && $e != null) ? $e : found['$[]']("macroish"))), $d !== false && $d !== nil && $d != null ?text['$include?']("anchor:") : $d)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = ($a = ($c = text).$gsub, $a.$$p = (TMP_42 = function(){var self = TMP_42.$$s || this, $f, $g, m = nil, id = nil, reftext = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($f = m['$[]'](0)['$start_with?']("\\")) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ((($f = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              if (m['$[]'](1)['$==']("")) {
                m['$[]='](1, nil)};
              if (m['$[]'](2)['$==']("")) {
                m['$[]='](2, nil)};
              if (m['$[]'](4)['$==']("")) {
                m['$[]='](4, nil)};};
            id = ((($f = m['$[]'](1)) !== false && $f !== nil && $f != null) ? $f : m['$[]'](3));
            reftext = ((($f = ((($g = m['$[]'](2)) !== false && $g !== nil && $g != null) ? $g : m['$[]'](4))) !== false && $f !== nil && $f != null) ? $f : "[" + (id) + "]");
            return $scope.get('Inline').$new(self, "anchor", reftext, $hash2(["type", "target"], {"type": "ref", "target": id})).$convert();}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42), $a).call($c, $scope.get('InlineAnchorRx'))};
        return text;
      }, TMP_43.$$arity = -2);

      Opal.defn(self, '$sub_inline_xrefs', TMP_46 = function ːsub_inline_xrefs(text, found) {
        var $a, $b, $c, TMP_44, self = this;

        if (found == null) {
          found = nil;
        }
        if ((($a = ((($b = (((($c = found['$!']()) !== false && $c !== nil && $c != null) ? $c : found['$[]']("macroish")))) !== false && $b !== nil && $b != null) ? $b : text['$include?']("&lt;&lt;"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          text = ($a = ($b = text).$gsub, $a.$$p = (TMP_44 = function(){var self = TMP_44.$$s || this, $d, $e, $f, $g, TMP_45, $h, m = nil, id = nil, reftext = nil, path = nil, fragment = nil, refid = nil, target = nil, resolved_id = nil;
            if (self.document == null) self.document = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($d = m['$[]'](0)['$start_with?']("\\")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return m['$[]'](0)['$[]']($range(1, -1, false));};
            if ((($d = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              if (m['$[]'](1)['$==']("")) {
                m['$[]='](1, nil)}};
            if ((($d = m['$[]'](1)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              $e = ($f = ($g = m['$[]'](1).$split(",", 2)).$map, $f.$$p = (TMP_45 = function(it){var self = TMP_45.$$s || this;
if (it == null) it = nil;
              return it.$strip()}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45), $f).call($g), $d = Opal.to_ary($e), id = ($d[0] == null ? nil : $d[0]), reftext = ($d[1] == null ? nil : $d[1]), $e;
              id = id.$sub($scope.get('DoubleQuotedRx'), "\\2");
              reftext = (function() {if ((($d = reftext['$nil_or_empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return nil
                } else {
                return reftext.$sub($scope.get('DoubleQuotedMultiRx'), "\\2")
              }; return nil; })();
              } else {
              id = m['$[]'](2);
              if ((($d = m['$[]'](3)['$nil_or_empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                } else {
                reftext = m['$[]'](3)
              };
            };
            if ((($d = id['$include?']("#")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              $e = id.$split("#"), $d = Opal.to_ary($e), path = ($d[0] == null ? nil : $d[0]), fragment = ($d[1] == null ? nil : $d[1]), $e
              } else {
              path = nil;
              fragment = id;
            };
            if (path !== false && path !== nil && path != null) {
              path = $scope.get('Helpers').$rootname(path);
              if ((($d = ((($e = self.document.$attributes()['$[]']("docname")['$=='](path)) !== false && $e !== nil && $e != null) ? $e : self.document.$references()['$[]']("includes")['$include?'](path))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                refid = fragment;
                path = nil;
                target = "#" + (fragment);
                } else {
                refid = (function() {if (fragment !== false && fragment !== nil && fragment != null) {
                  return "" + (path) + "#" + (fragment)
                  } else {
                  return path
                }; return nil; })();
                path = "" + (self.document.$attributes()['$[]']("relfileprefix")) + (path) + (self.document.$attributes().$fetch("outfilesuffix", ".html"));
                target = (function() {if (fragment !== false && fragment !== nil && fragment != null) {
                  return "" + (path) + "#" + (fragment)
                  } else {
                  return path
                }; return nil; })();
              };
              } else {
              if ((($d = ($e = ($f = (self.document.$references()['$[]']("ids")['$has_key?'](fragment))['$!'](), $f !== false && $f !== nil && $f != null ?(((($h = (fragment['$include?'](" "))) !== false && $h !== nil && $h != null) ? $h : fragment.$downcase()['$!='](fragment))) : $f), $e !== false && $e !== nil && $e != null ?(resolved_id = (function() {if ((($f = $scope.get('RUBY_MIN_VERSION_1_9')) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return (self.document.$references()['$[]']("ids").$key(fragment))
                } else {
                return (self.document.$references()['$[]']("ids").$index(fragment))
              }; return nil; })()) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                fragment = resolved_id};
              refid = fragment;
              target = "#" + (fragment);
            };
            return $scope.get('Inline').$new(self, "anchor", reftext, $hash2(["type", "target", "attributes"], {"type": "xref", "target": target, "attributes": $hash2(["path", "fragment", "refid"], {"path": path, "fragment": fragment, "refid": refid})})).$convert();}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44), $a).call($b, $scope.get('XrefInlineMacroRx'))};
        return text;
      }, TMP_46.$$arity = -2);

      Opal.defn(self, '$sub_callouts', TMP_48 = function ːsub_callouts(text) {
        var $a, $b, TMP_47, self = this, callout_rx = nil;

        callout_rx = (function() {if ((($a = (self['$attr?']("line-comment"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (new RegExp("(?:" + Opal.get('Regexp').$escape(self.$attr("line-comment")) + " )?" + $scope.get('CalloutSourceRxt')))
          } else {
          return $scope.get('CalloutSourceRx')
        }; return nil; })();
        return ($a = ($b = text).$gsub, $a.$$p = (TMP_47 = function(){var self = TMP_47.$$s || this, m = nil;
          if (self.document == null) self.document = nil;
          if ($gvars["~"] == null) $gvars["~"] = nil;

        m = $gvars["~"];
          if (m['$[]'](1)['$==']("\\")) {
            return m['$[]'](0).$sub("\\", "");};
          return $scope.get('Inline').$new(self, "callout", m['$[]'](3), $hash2(["id"], {"id": self.document.$callouts().$read_next_id()})).$convert();}, TMP_47.$$s = self, TMP_47.$$arity = 0, TMP_47), $a).call($b, callout_rx);
      }, TMP_48.$$arity = 1);

      Opal.defn(self, '$sub_post_replacements', TMP_51 = function ːsub_post_replacements(text) {
        var $a, $b, TMP_49, $c, TMP_50, self = this, lines = nil, last = nil;
        if (self.document == null) self.document = nil;
        if (self.attributes == null) self.attributes = nil;

        if ((($a = ((($b = (self.document.$attributes()['$has_key?']("hardbreaks"))) !== false && $b !== nil && $b != null) ? $b : (self.attributes['$has_key?']("hardbreaks-option")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          lines = (text.$split($scope.get('EOL')));
          if (lines.$size()['$=='](1)) {
            return text};
          last = lines.$pop();
          return $rb_times(($a = ($b = lines).$map, $a.$$p = (TMP_49 = function(line){var self = TMP_49.$$s || this;
if (line == null) line = nil;
          return $scope.get('Inline').$new(self, "break", line.$rstrip().$chomp($scope.get('LINE_BREAK')), $hash2(["type"], {"type": "line"})).$convert()}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49), $a).call($b).$push(last), $scope.get('EOL'));
        } else if ((($a = text['$include?']("+")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = text).$gsub, $a.$$p = (TMP_50 = function(){var self = TMP_50.$$s || this;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          return $scope.get('Inline').$new(self, "break", $gvars["~"]['$[]'](1), $hash2(["type"], {"type": "line"})).$convert()}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50), $a).call($c, $scope.get('LineBreakRx'))
          } else {
          return text
        };
      }, TMP_51.$$arity = 1);

      Opal.defn(self, '$convert_quoted_text', TMP_52 = function ːconvert_quoted_text(match, type, scope) {
        var $a, $b, self = this, unescaped_attrs = nil, attrs = nil, attributes = nil, id = nil;

        unescaped_attrs = nil;
        if ((($a = match['$[]'](0)['$start_with?']("\\")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (($b = scope['$==']("constrained")) ? ((attrs = match['$[]'](2)))['$nil_or_empty?']()['$!']() : scope['$==']("constrained"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            unescaped_attrs = "[" + (attrs) + "]"
            } else {
            return match['$[]'](0)['$[]']($range(1, -1, false))
          }};
        if (scope['$==']("constrained")) {
          if (unescaped_attrs !== false && unescaped_attrs !== nil && unescaped_attrs != null) {
            return "" + (unescaped_attrs) + ($scope.get('Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type"], {"type": type})).$convert())
            } else {
            if ((($a = (attributes = self.$parse_quoted_text_attributes(match['$[]'](2)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              id = attributes.$delete("id");
              if (type['$==']("mark")) {
                type = "unquoted"};
              } else {
              id = nil
            };
            return "" + (match['$[]'](1)) + ($scope.get('Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert());
          }
          } else {
          if ((($a = (attributes = self.$parse_quoted_text_attributes(match['$[]'](1)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            id = attributes.$delete("id");
            if (type['$==']("mark")) {
              type = "unquoted"};
            } else {
            id = nil
          };
          return $scope.get('Inline').$new(self, "quoted", match['$[]'](2), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert();
        };
      }, TMP_52.$$arity = 3);

      Opal.defn(self, '$parse_quoted_text_attributes', TMP_53 = function ːparse_quoted_text_attributes(str) {
        var $a, $b, $c, self = this, _ = nil, segments = nil, id = nil, more_roles = nil, roles = nil, attrs = nil;

        if (str !== false && str !== nil && str != null) {
          } else {
          return nil
        };
        if ((($a = str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $hash2([], {})};
        if ((($a = str['$include?']("{")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          str = self.$sub_attributes(str)};
        str = str.$strip();
        if ((($a = str['$include?'](",")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = str.$split(",", 2), $a = Opal.to_ary($b), str = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b};
        if ((($a = str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $hash2([], {})
        } else if ((($a = ($b = (((($c = str['$start_with?'](".")) !== false && $c !== nil && $c != null) ? $c : str['$start_with?']("#"))), $b !== false && $b !== nil && $b != null ?$scope.get('Compliance').$shorthand_property_syntax() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          segments = str.$split("#", 2);
          if ((($a = $rb_gt(segments.$length(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            $b = segments['$[]'](1).$split("."), $a = Opal.to_ary($b), id = ($a[0] == null ? nil : $a[0]), more_roles = $slice.call($a, 1), $b
            } else {
            id = nil;
            more_roles = [];
          };
          roles = (function() {if ((($a = segments['$[]'](0)['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return []
            } else {
            return segments['$[]'](0).$split(".")
          }; return nil; })();
          if ((($a = $rb_gt(roles.$length(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            roles.$shift()};
          if ((($a = $rb_gt(more_roles.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            roles.$concat(more_roles)};
          attrs = $hash2([], {});
          if (id !== false && id !== nil && id != null) {
            attrs['$[]=']("id", id)};
          if ((($a = roles['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            attrs['$[]=']("role", $rb_times(roles, " "))
          };
          return attrs;
          } else {
          return $hash2(["role"], {"role": str})
        };
      }, TMP_53.$$arity = 1);

      Opal.defn(self, '$parse_attributes', TMP_54 = function ːparse_attributes(attrline, posattrs, opts) {
        var $a, self = this, block = nil, into = nil;
        if (self.document == null) self.document = nil;

        if (posattrs == null) {
          posattrs = ["role"];
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        if (attrline !== false && attrline !== nil && attrline != null) {
          } else {
          return nil
        };
        if ((($a = attrline['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $hash2([], {})};
        if ((($a = opts['$[]']("sub_input")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrline = self.document.$sub_attributes(attrline)};
        if ((($a = opts['$[]']("unescape_input")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrline = self.$unescape_bracketed_text(attrline)};
        block = nil;
        if ((($a = opts.$fetch("sub_result", true)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          block = self};
        if ((($a = (into = opts['$[]']("into"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('AttributeList').$new(attrline, block).$parse_into(into, posattrs)
          } else {
          return $scope.get('AttributeList').$new(attrline, block).$parse(posattrs)
        };
      }, TMP_54.$$arity = -2);

      Opal.defn(self, '$unescape_bracketed_text', TMP_55 = function ːunescape_bracketed_text(text) {
        var $a, self = this;

        if ((($a = text['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""};
        return text.$strip().$tr($scope.get('EOL'), " ").$gsub("\\]", "]");
      }, TMP_55.$$arity = 1);

      Opal.defn(self, '$normalize_string', TMP_56 = function ːnormalize_string(str, unescape_brackets) {
        var $a, self = this;

        if (unescape_brackets == null) {
          unescape_brackets = false;
        }
        if ((($a = str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
        } else if (unescape_brackets !== false && unescape_brackets !== nil && unescape_brackets != null) {
          return self.$unescape_brackets(str.$strip().$tr($scope.get('EOL'), " "))
          } else {
          return str.$strip().$tr($scope.get('EOL'), " ")
        };
      }, TMP_56.$$arity = -2);

      Opal.defn(self, '$unescape_brackets', TMP_57 = function ːunescape_brackets(str) {
        var $a, self = this;

        if ((($a = str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          return str.$gsub("\\]", "]")
        };
      }, TMP_57.$$arity = 1);

      Opal.defn(self, '$split_simple_csv', TMP_60 = function ːsplit_simple_csv(str) {
        var $a, $b, TMP_58, $c, TMP_59, self = this, values = nil, current = nil, quote_open = nil;

        if ((($a = str['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          values = []
        } else if ((($a = str['$include?']("\"")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          values = [];
          current = [];
          quote_open = false;
          ($a = ($b = str).$each_char, $a.$$p = (TMP_58 = function(c){var self = TMP_58.$$s || this, $case = nil;
if (c == null) c = nil;
          return (function() {$case = c;if (","['$===']($case)) {if (quote_open !== false && quote_open !== nil && quote_open != null) {
              return current.$push(c)
              } else {
              values['$<<'](current.$join().$strip());
              return current = [];
            }}else if ("\""['$===']($case)) {return quote_open = quote_open['$!']()}else {return current.$push(c)}})()}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58), $a).call($b);
          values['$<<'](current.$join().$strip());
          } else {
          values = ($a = ($c = str.$split(",")).$map, $a.$$p = (TMP_59 = function(it){var self = TMP_59.$$s || this;
if (it == null) it = nil;
          return it.$strip()}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59), $a).call($c)
        };
        return values;
      }, TMP_60.$$arity = 1);

      Opal.defn(self, '$resolve_subs', TMP_62 = function ːresolve_subs(subs, type, defaults, subject) {
        var $a, $b, TMP_61, self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;

        if (type == null) {
          type = "block";
        }
        if (defaults == null) {
          defaults = nil;
        }
        if (subject == null) {
          subject = nil;
        }
        if ((($a = subs['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        candidates = nil;
        modifiers_present = $scope.get('SubModifierSniffRx')['$=~'](subs);
        ($a = ($b = subs.$tr(" ", "").$split(",")).$each, $a.$$p = (TMP_61 = function(key){var self = TMP_61.$$s || this, $c, $d, $e, modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $case = nil;
if (key == null) key = nil;
        modifier_operation = nil;
          if (modifiers_present !== false && modifiers_present !== nil && modifiers_present != null) {
            if (((first = key.$chr()))['$==']("+")) {
              modifier_operation = "append";
              key = key['$[]']($range(1, -1, false));
            } else if (first['$==']("-")) {
              modifier_operation = "remove";
              key = key['$[]']($range(1, -1, false));
            } else if ((($c = key['$end_with?']("+")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              modifier_operation = "prepend";
              key = key.$chop();}};
          key = key.$to_sym();
          if ((($c = (($d = type['$==']("inline")) ? (((($e = key['$==']("verbatim")) !== false && $e !== nil && $e != null) ? $e : key['$==']("v"))) : type['$==']("inline"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            resolved_keys = ["specialcharacters"]
          } else if ((($c = $scope.get('COMPOSITE_SUBS')['$key?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            resolved_keys = $scope.get('COMPOSITE_SUBS')['$[]'](key)
          } else if ((($c = ($d = (($e = type['$==']("inline")) ? key.$length()['$=='](1) : type['$==']("inline")), $d !== false && $d !== nil && $d != null ?($scope.get('SUB_SYMBOLS')['$key?'](key)) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            resolved_key = $scope.get('SUB_SYMBOLS')['$[]'](key);
            if ((($c = (candidate = $scope.get('COMPOSITE_SUBS')['$[]'](resolved_key))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              resolved_keys = candidate
              } else {
              resolved_keys = [resolved_key]
            };
            } else {
            resolved_keys = [key]
          };
          if (modifier_operation !== false && modifier_operation !== nil && modifier_operation != null) {
            ((($c = candidates) !== false && $c !== nil && $c != null) ? $c : candidates = ((function() {if (defaults !== false && defaults !== nil && defaults != null) {
              return defaults.$dup()
              } else {
              return []
            }; return nil; })()));
            return (function() {$case = modifier_operation;if ("append"['$===']($case)) {return candidates = $rb_plus(candidates, resolved_keys)}else if ("prepend"['$===']($case)) {return candidates = $rb_plus(resolved_keys, candidates)}else if ("remove"['$===']($case)) {return candidates = $rb_minus(candidates, resolved_keys)}else { return nil }})();
            } else {
            ((($c = candidates) !== false && $c !== nil && $c != null) ? $c : candidates = []);
            return candidates = $rb_plus(candidates, resolved_keys);
          };}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($b);
        resolved = candidates['$&']($scope.get('SUB_OPTIONS')['$[]'](type));
        if ((($a = ($rb_minus(candidates, resolved))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          invalid = $rb_minus(candidates, resolved);
          self.$warn("asciidoctor: WARNING: invalid substitution type" + ((function() {if ((($a = $rb_gt(invalid.$size(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "s"
            } else {
            return ""
          }; return nil; })()) + ((function() {if (subject !== false && subject !== nil && subject != null) {
            return " for "
            } else {
            return nil
          }; return nil; })()) + (subject) + ": " + ($rb_times(invalid, ", ")));
        };
        return resolved;
      }, TMP_62.$$arity = -2);

      Opal.defn(self, '$resolve_block_subs', TMP_63 = function ːresolve_block_subs(subs, defaults, subject) {
        var self = this;

        return self.$resolve_subs(subs, "block", defaults, subject);
      }, TMP_63.$$arity = 3);

      Opal.defn(self, '$resolve_pass_subs', TMP_64 = function ːresolve_pass_subs(subs) {
        var self = this;

        return self.$resolve_subs(subs, "inline", nil, "passthrough macro");
      }, TMP_64.$$arity = 1);

      Opal.defn(self, '$highlight_source', TMP_69 = function ːhighlight_source(source, process_callouts, highlighter) {
        var $a, $b, TMP_65, $c, TMP_67, self = this, $case = nil, highlighter_loaded = nil, lineno = nil, callout_on_last = nil, callout_marks = nil, last = nil, callout_rx = nil, linenums_mode = nil, highlight_lines = nil, result = nil, lexer = nil, opts = nil, reached_code = nil;
        if (self.document == null) self.document = nil;
        if (self.passthroughs == null) self.passthroughs = nil;

        if (highlighter == null) {
          highlighter = nil;
        }
        $case = (((($a = highlighter) !== false && $a !== nil && $a != null) ? $a : highlighter = self.document.$attributes()['$[]']("source-highlighter")));if ("coderay"['$===']($case)) {if ((($a = ((($b = (highlighter_loaded = (Opal.Object.$$scope.CodeRay == null ? nil : 'constant'))) !== false && $b !== nil && $b != null) ? $b : self.document.$attributes()['$[]']("coderay-unavailable"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else if ((($a = ($scope.get('Helpers').$require_library("coderay", true, "warn"))['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.document.$set_attr("coderay-unavailable", "")
          } else {
          highlighter_loaded = true
        }}else if ("pygments"['$===']($case)) {if ((($a = ((($b = (highlighter_loaded = (Opal.Object.$$scope.Pygments == null ? nil : 'constant'))) !== false && $b !== nil && $b != null) ? $b : self.document.$attributes()['$[]']("pygments-unavailable"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else if ((($a = ($scope.get('Helpers').$require_library("pygments", "pygments.rb", "warn"))['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.document.$set_attr("pygments-unavailable", "")
          } else {
          highlighter_loaded = true
        }}else {highlighter_loaded = false};
        if (highlighter_loaded !== false && highlighter_loaded !== nil && highlighter_loaded != null) {
          } else {
          return self.$sub_source(source, process_callouts)
        };
        lineno = 0;
        callout_on_last = false;
        if (process_callouts !== false && process_callouts !== nil && process_callouts != null) {
          callout_marks = $hash2([], {});
          last = -1;
          callout_rx = (function() {if ((($a = (self['$attr?']("line-comment"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (new RegExp("(?:" + Opal.get('Regexp').$escape(self.$attr("line-comment")) + " )?" + $scope.get('CalloutExtractRxt')))
            } else {
            return $scope.get('CalloutExtractRx')
          }; return nil; })();
          source = $rb_times(($a = ($b = source.$split($scope.get('EOL'))).$map, $a.$$p = (TMP_65 = function(line){var self = TMP_65.$$s || this, $c, $d, TMP_66;
if (line == null) line = nil;
          lineno = $rb_plus(lineno, 1);
            return ($c = ($d = line).$gsub, $c.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this, $e, $f, $g, m = nil;
              if ($gvars["~"] == null) $gvars["~"] = nil;

            m = $gvars["~"];
              if (m['$[]'](1)['$==']("\\")) {
                return m['$[]'](0).$sub("\\", "")
                } else {
                (($e = lineno, $f = callout_marks, ((($g = $f['$[]']($e)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($e, []))))['$<<'](m['$[]'](3));
                last = lineno;
                return nil;
              };}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66), $c).call($d, callout_rx);}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65), $a).call($b), $scope.get('EOL'));
          callout_on_last = (last['$=='](lineno));
          if ((($a = callout_marks['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            callout_marks = nil};
          } else {
          callout_marks = nil
        };
        linenums_mode = nil;
        highlight_lines = nil;
        $case = highlighter;if ("coderay"['$===']($case)) {if ((($a = (linenums_mode = (function() {if ((($c = (self['$attr?']("linenums"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return (((($c = self.document.$attributes()['$[]']("coderay-linenums-mode")) !== false && $c !== nil && $c != null) ? $c : "table")).$to_sym()
          } else {
          return nil
        }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$attr?']("highlight", nil, false)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            highlight_lines = self.$resolve_highlight_lines(self.$attr("highlight", nil, false))}};
        result = ((Opal.get('CodeRay')).$$scope.get('Duo'))['$[]'](self.$attr("language", "text", false).$to_sym(), "html", $hash2(["css", "line_numbers", "line_number_anchors", "highlight_lines", "bold_every"], {"css": (((($a = self.document.$attributes()['$[]']("coderay-css")) !== false && $a !== nil && $a != null) ? $a : "class")).$to_sym(), "line_numbers": linenums_mode, "line_number_anchors": false, "highlight_lines": highlight_lines, "bold_every": false})).$highlight(source);}else if ("pygments"['$===']($case)) {lexer = ((($a = ((Opal.get('Pygments')).$$scope.get('Lexer'))['$[]'](self.$attr("language", nil, false))) !== false && $a !== nil && $a != null) ? $a : ((Opal.get('Pygments')).$$scope.get('Lexer'))['$[]']("text"));
        opts = $hash2(["cssclass", "classprefix", "nobackground"], {"cssclass": "pyhl", "classprefix": "tok-", "nobackground": true});
        if ((((($a = self.document.$attributes()['$[]']("pygments-css")) !== false && $a !== nil && $a != null) ? $a : "class"))['$==']("class")) {
          } else {
          opts['$[]=']("noclasses", true);
          opts['$[]=']("style", (((($a = self.document.$attributes()['$[]']("pygments-style")) !== false && $a !== nil && $a != null) ? $a : (($scope.get('Stylesheets')).$$scope.get('DEFAULT_PYGMENTS_STYLE')))));
        };
        if ((($a = self['$attr?']("highlight", nil, false)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((highlight_lines = self.$resolve_highlight_lines(self.$attr("highlight", nil, false))))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            opts['$[]=']("hl_lines", $rb_times(highlight_lines, " "))
          }};
        if ((($a = self['$attr?']("linenums")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((opts['$[]=']("linenos", ((($a = self.document.$attributes()['$[]']("pygments-linenums-mode")) !== false && $a !== nil && $a != null) ? $a : "table")))['$==']("table")) {
            linenums_mode = "table";
            result = lexer.$highlight(source, $hash2(["options"], {"options": opts})).$sub(/<div class="pyhl">(.*)<\/div>/m, "\\1").$gsub(/<pre[^>]*>(.*?)<\/pre>\s*/m, "\\1");
            } else {
            result = lexer.$highlight(source, $hash2(["options"], {"options": opts})).$sub(/<div class="pyhl"><pre[^>]*>(.*?)<\/pre><\/div>/m, "\\1")
          }
          } else {
          opts['$[]=']("nowrap", true);
          result = lexer.$highlight(source, $hash2(["options"], {"options": opts}));
        };};
        if ((($a = self.passthroughs['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          result = result.$gsub($scope.get('PASS_MATCH_HI'), "" + ($scope.get('PASS_START')) + "\\1" + ($scope.get('PASS_END')))
        };
        if ((($a = (($c = process_callouts !== false && process_callouts !== nil && process_callouts != null) ? callout_marks : process_callouts)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          lineno = 0;
          reached_code = linenums_mode['$!=']("table");
          return $rb_times(($a = ($c = result.$split($scope.get('EOL'))).$map, $a.$$p = (TMP_67 = function(line){var self = TMP_67.$$s || this, $d, $e, TMP_68, conums = nil, tail = nil, pos = nil, conums_markup = nil;
            if (self.document == null) self.document = nil;
if (line == null) line = nil;
          if (reached_code !== false && reached_code !== nil && reached_code != null) {
              } else {
              if ((($d = line['$include?']("<td class=\"code\">")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                } else {
                return line;
              };
              reached_code = true;
            };
            lineno = $rb_plus(lineno, 1);
            if ((($d = (conums = callout_marks.$delete(lineno))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              tail = nil;
              if ((($d = (($e = callout_on_last !== false && callout_on_last !== nil && callout_on_last != null) ? callout_marks['$empty?']() : callout_on_last)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                if ((($d = (pos = line.$index("</pre>"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  tail = line['$[]']($range(pos, -1, false));
                  line = "" + (line['$[]']($range(0, pos, true)).$chomp(" ")) + " ";
                  } else {
                  line = "" + (line.$chomp(" ")) + " "
                }};
              if (conums.$size()['$=='](1)) {
                return "" + (line) + ($scope.get('Inline').$new(self, "callout", conums['$[]'](0), $hash2(["id"], {"id": self.document.$callouts().$read_next_id()})).$convert()) + (tail)
                } else {
                conums_markup = $rb_times(($d = ($e = conums).$map, $d.$$p = (TMP_68 = function(conum){var self = TMP_68.$$s || this;
                  if (self.document == null) self.document = nil;
if (conum == null) conum = nil;
                return $scope.get('Inline').$new(self, "callout", conum, $hash2(["id"], {"id": self.document.$callouts().$read_next_id()})).$convert()}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68), $d).call($e), " ");
                return "" + (line) + (conums_markup) + (tail);
              };
              } else {
              return line
            };}, TMP_67.$$s = self, TMP_67.$$arity = 1, TMP_67), $a).call($c), $scope.get('EOL'));
          } else {
          return result
        };
      }, TMP_69.$$arity = -3);

      Opal.defn(self, '$resolve_highlight_lines', TMP_71 = function ːresolve_highlight_lines(spec) {
        var $a, $b, TMP_70, self = this, lines = nil;

        lines = [];
        ($a = ($b = spec.$delete(" ").$split($scope.get('DataDelimiterRx'))).$map, $a.$$p = (TMP_70 = function(entry){var self = TMP_70.$$s || this, $c, $d, negate = nil, s = nil, e = nil, line_nums = nil;
if (entry == null) entry = nil;
        negate = false;
          if ((($c = entry['$start_with?']("!")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            entry = entry['$[]']($range(1, -1, false));
            negate = true;};
          if ((($c = entry['$include?']("-")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            $d = entry.$split("-", 2), $c = Opal.to_ary($d), s = ($c[0] == null ? nil : $c[0]), e = ($c[1] == null ? nil : $c[1]), $d;
            line_nums = ($range(s.$to_i(), e.$to_i(), false)).$to_a();
            if (negate !== false && negate !== nil && negate != null) {
              return lines = $rb_minus(lines, line_nums)
              } else {
              return lines.$concat(line_nums)
            };
          } else if (negate !== false && negate !== nil && negate != null) {
            return lines.$delete(entry.$to_i())
            } else {
            return lines['$<<'](entry.$to_i())
          };}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70), $a).call($b);
        return lines.$sort().$uniq();
      }, TMP_71.$$arity = 1);

      Opal.defn(self, '$sub_source', TMP_72 = function ːsub_source(source, process_callouts) {
        var self = this;

        return (function() {if (process_callouts !== false && process_callouts !== nil && process_callouts != null) {
          return self.$sub_callouts(self.$sub_specialchars(source))
          } else {
          return self.$sub_specialchars(source)
        }; return nil; })();
      }, TMP_72.$$arity = 2);

      Opal.defn(self, '$lock_in_subs', TMP_74 = function ːlock_in_subs() {
        var $a, $b, $c, $d, $e, TMP_73, self = this, default_subs = nil, $case = nil, custom_subs = nil;
        if (self.default_subs == null) self.default_subs = nil;
        if (self.content_model == null) self.content_model = nil;
        if (self.context == null) self.context = nil;
        if (self.attributes == null) self.attributes = nil;
        if (self.style == null) self.style = nil;
        if (self.document == null) self.document = nil;
        if (self.subs == null) self.subs = nil;

        if ((($a = self.default_subs) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          default_subs = self.default_subs
          } else {
          $case = self.content_model;if ("simple"['$===']($case)) {default_subs = $scope.get('SUBS')['$[]']("normal")}else if ("verbatim"['$===']($case)) {if ((($a = ((($b = self.context['$==']("listing")) !== false && $b !== nil && $b != null) ? $b : ((($c = self.context['$==']("literal")) ? (self['$option?']("listparagraph"))['$!']() : self.context['$==']("literal"))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            default_subs = $scope.get('SUBS')['$[]']("verbatim")
          } else if (self.context['$==']("verse")) {
            default_subs = $scope.get('SUBS')['$[]']("normal")
            } else {
            default_subs = $scope.get('SUBS')['$[]']("basic")
          }}else if ("raw"['$===']($case)) {if (self.context['$==']("stem")) {
            default_subs = $scope.get('SUBS')['$[]']("basic")
            } else {
            default_subs = $scope.get('SUBS')['$[]']("pass")
          }}else {return nil}
        };
        if ((($a = (custom_subs = self.attributes['$[]']("subs"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.subs = self.$resolve_block_subs(custom_subs, default_subs, self.context)
          } else {
          self.subs = default_subs.$dup()
        };
        if ((($a = ($b = ($c = ($d = (($e = self.context['$==']("listing")) ? self.style['$==']("source") : self.context['$==']("listing")), $d !== false && $d !== nil && $d != null ?self.attributes['$[]']("language") : $d), $c !== false && $c !== nil && $c != null ?self.document['$basebackend?']("html") : $c), $b !== false && $b !== nil && $b != null ?$scope.get('SUB_HIGHLIGHT')['$include?'](self.document.$attributes()['$[]']("source-highlighter")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.subs = ($a = ($b = self.subs).$map, $a.$$p = (TMP_73 = function(sub){var self = TMP_73.$$s || this;
if (sub == null) sub = nil;
          if (sub['$==']("specialcharacters")) {
              return "highlight"
              } else {
              return sub
            }}, TMP_73.$$s = self, TMP_73.$$arity = 1, TMP_73), $a).call($b)
          } else {
          return nil
        };
      }, TMP_74.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/abstract_node"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$include', '$attr_reader', '$attr_accessor', '$==', '$document', '$to_s', '$key?', '$dup', '$[]', '$raise', '$===', '$attributes', '$nil?', '$has_key?', '$[]=', '$update', '$converter', '$include?', '$split', '$*', '$push', '$delete', '$attr?', '$empty?', '$extname', '$image_uri', '$attr', '$normalize_web_path', '$<', '$safe', '$uriish?', '$generate_data_uri_from_uri', '$generate_data_uri', '$normalize_system_path', '$readable?', '$warn', '$respond_to?', '$binread', '$open', '$read', '$encode64', '$require_library', '$!', '$content_type', '$web_path', '$new', '$open_uri', '$normalize_lines_from_string', '$fetch', '$read_asset', '$!=', '$is_root?', '$join', '$base_dir', '$system_path']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AbstractNode(){};
      var self = $AbstractNode = $klass($base, $super, 'AbstractNode', $AbstractNode);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33;

      def.document = def.attributes = def.path_resolver = nil;
      self.$include($scope.get('Substitutors'));

      self.$attr_reader("parent");

      self.$attr_reader("document");

      self.$attr_reader("context");

      self.$attr_reader("node_name");

      self.$attr_accessor("id");

      self.$attr_reader("attributes");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(parent, context, opts) {
        var $a, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if (context['$==']("document")) {
          self.document = parent
        } else if (parent !== false && parent !== nil && parent != null) {
          self.parent = parent;
          self.document = parent.$document();
          } else {
          self.parent = nil;
          self.document = nil;
        };
        self.context = context;
        self.node_name = context.$to_s();
        self.attributes = (function() {if ((($a = (opts['$key?']("attributes"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return opts['$[]']("attributes").$dup()
          } else {
          return $hash2([], {})
        }; return nil; })();
        return self.passthroughs = $hash2([], {});
      }, TMP_1.$$arity = -3);

      Opal.defn(self, '$parent=', TMP_2 = function(parent) {
        var self = this;

        self.parent = parent;
        self.document = parent.$document();
        return nil;
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$inline?', TMP_3 = function() {
        var self = this;

        return self.$raise(Opal.get('NotImplementedError'));
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$block?', TMP_4 = function() {
        var self = this;

        return self.$raise(Opal.get('NotImplementedError'));
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$attr', TMP_5 = function ːattr(name, default_value, inherit) {
        var $a, $b, self = this;

        if (default_value == null) {
          default_value = nil;
        }
        if (inherit == null) {
          inherit = true;
        }
        if ((($a = Opal.get('Symbol')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          name = name.$to_s()};
        if (self['$=='](self.document)) {
          inherit = false};
        if (inherit !== false && inherit !== nil && inherit != null) {
          return ((($a = ((($b = self.attributes['$[]'](name)) !== false && $b !== nil && $b != null) ? $b : self.document.$attributes()['$[]'](name))) !== false && $a !== nil && $a != null) ? $a : default_value)
          } else {
          return ((($a = self.attributes['$[]'](name)) !== false && $a !== nil && $a != null) ? $a : default_value)
        };
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$attr?', TMP_6 = function(name, expect, inherit) {
        var $a, $b, self = this;

        if (expect == null) {
          expect = nil;
        }
        if (inherit == null) {
          inherit = true;
        }
        if ((($a = Opal.get('Symbol')['$==='](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          name = name.$to_s()};
        if (self['$=='](self.document)) {
          inherit = false};
        if ((($a = expect['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ((($a = self.attributes['$has_key?'](name)) !== false && $a !== nil && $a != null) ? $a : ((($b = inherit !== false && inherit !== nil && inherit != null) ? self.document.$attributes()['$has_key?'](name) : inherit)))
        } else if (inherit !== false && inherit !== nil && inherit != null) {
          return expect['$==']((((($a = self.attributes['$[]'](name)) !== false && $a !== nil && $a != null) ? $a : self.document.$attributes()['$[]'](name))))
          } else {
          return expect['$=='](self.attributes['$[]'](name))
        };
      }, TMP_6.$$arity = -2);

      Opal.defn(self, '$set_attr', TMP_7 = function ːset_attr(name, value, overwrite) {
        var $a, $b, self = this;

        if (overwrite == null) {
          overwrite = true;
        }
        if ((($a = (($b = overwrite['$=='](false)) ? (self.attributes['$key?'](name)) : overwrite['$=='](false))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false
          } else {
          self.attributes['$[]='](name, value);
          return true;
        };
      }, TMP_7.$$arity = -3);

      Opal.defn(self, '$set_option', TMP_8 = function ːset_option(name) {
        var $a, self = this;

        if ((($a = self.attributes['$has_key?']("options")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.attributes['$[]=']("options", "" + (self.attributes['$[]']("options")) + "," + (name))
          } else {
          self.attributes['$[]=']("options", name)
        };
        return self.attributes['$[]=']("" + (name) + "-option", "");
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$option?', TMP_9 = function(name) {
        var self = this;

        return self.attributes['$has_key?']("" + (name) + "-option");
      }, TMP_9.$$arity = 1);

      Opal.defn(self, '$update_attributes', TMP_10 = function ːupdate_attributes(attributes) {
        var self = this;

        self.attributes.$update(attributes);
        return nil;
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$converter', TMP_11 = function ːconverter() {
        var self = this;

        return self.document.$converter();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$role?', TMP_12 = function(expect) {
        var $a, self = this;

        if (expect == null) {
          expect = nil;
        }
        if (expect !== false && expect !== nil && expect != null) {
          return expect['$==']((((($a = self.attributes['$[]']("role")) !== false && $a !== nil && $a != null) ? $a : self.document.$attributes()['$[]']("role"))))
          } else {
          return ((($a = self.attributes['$has_key?']("role")) !== false && $a !== nil && $a != null) ? $a : self.document.$attributes()['$has_key?']("role"))
        };
      }, TMP_12.$$arity = -1);

      Opal.defn(self, '$role', TMP_13 = function ːrole() {
        var $a, self = this;

        return ((($a = self.attributes['$[]']("role")) !== false && $a !== nil && $a != null) ? $a : self.document.$attributes()['$[]']("role"));
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$has_role?', TMP_14 = function(name) {
        var $a, $b, self = this, val = nil;

        if ((($a = (val = (((($b = self.attributes['$[]']("role")) !== false && $b !== nil && $b != null) ? $b : self.document.$attributes()['$[]']("role"))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val.$split(" ")['$include?'](name)
          } else {
          return false
        };
      }, TMP_14.$$arity = 1);

      Opal.defn(self, '$roles', TMP_15 = function ːroles() {
        var $a, $b, self = this, val = nil;

        if ((($a = (val = (((($b = self.attributes['$[]']("role")) !== false && $b !== nil && $b != null) ? $b : self.document.$attributes()['$[]']("role"))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val.$split(" ")
          } else {
          return []
        };
      }, TMP_15.$$arity = 0);

      Opal.defn(self, '$add_role', TMP_16 = function ːadd_role(name) {
        var $a, $b, self = this, roles = nil;

        if ((($a = ((roles = (((($b = self.attributes['$[]']("role")) !== false && $b !== nil && $b != null) ? $b : "")).$split(" ")))['$include?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.attributes['$[]=']("role", $rb_times(roles.$push(name), " "))
        };
      }, TMP_16.$$arity = 1);

      Opal.defn(self, '$remove_role', TMP_17 = function ːremove_role(name) {
        var $a, $b, self = this, roles = nil;

        if ((($a = ((roles = (((($b = self.attributes['$[]']("role")) !== false && $b !== nil && $b != null) ? $b : "")).$split(" ")))['$include?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          roles.$delete(name);
          return self.attributes['$[]=']("role", $rb_times(roles, " "));
          } else {
          return nil
        };
      }, TMP_17.$$arity = 1);

      Opal.defn(self, '$reftext?', TMP_18 = function() {
        var $a, self = this;

        return ((($a = self.attributes['$has_key?']("reftext")) !== false && $a !== nil && $a != null) ? $a : self.document.$attributes()['$has_key?']("reftext"));
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$reftext', TMP_19 = function ːreftext() {
        var $a, self = this;

        return ((($a = self.attributes['$[]']("reftext")) !== false && $a !== nil && $a != null) ? $a : self.document.$attributes()['$[]']("reftext"));
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$icon_uri', TMP_20 = function ːicon_uri(name) {
        var $a, self = this, uri = nil;

        if ((($a = self['$attr?']("icon")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = Opal.get('File').$extname(uri = (self.$image_uri(self.$attr("icon"), "iconsdir")))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + (uri) + "." + (self.document.$attr("icontype", "png"))
            } else {
            return uri
          }
          } else {
          return self.$image_uri("" + (name) + "." + (self.document.$attr("icontype", "png")), "iconsdir")
        };
      }, TMP_20.$$arity = 1);

      Opal.defn(self, '$media_uri', TMP_21 = function ːmedia_uri(target, asset_dir_key) {
        var self = this;

        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir";
        }
        return self.$normalize_web_path(target, ((function() {if (asset_dir_key !== false && asset_dir_key !== nil && asset_dir_key != null) {
          return self.document.$attr(asset_dir_key)
          } else {
          return nil
        }; return nil; })()));
      }, TMP_21.$$arity = -2);

      Opal.defn(self, '$image_uri', TMP_22 = function ːimage_uri(target_image, asset_dir_key) {
        var $a, $b, $c, $d, $e, self = this, doc = nil, images_base = nil;

        if (asset_dir_key == null) {
          asset_dir_key = "imagesdir";
        }
        if ((($a = ($b = $rb_lt(((doc = self.document)).$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE'))), $b !== false && $b !== nil && $b != null ?doc['$attr?']("data-uri") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((($b = ($scope.get('Helpers')['$uriish?'](target_image))) !== false && $b !== nil && $b != null) ? $b : (($c = ($d = (($e = asset_dir_key !== false && asset_dir_key !== nil && asset_dir_key != null) ? (images_base = doc.$attr(asset_dir_key)) : asset_dir_key), $d !== false && $d !== nil && $d != null ?($scope.get('Helpers')['$uriish?'](images_base)) : $d), $c !== false && $c !== nil && $c != null ?(target_image = self.$normalize_web_path(target_image, images_base, false)) : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = doc['$attr?']("allow-uri-read")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return self.$generate_data_uri_from_uri(target_image, doc['$attr?']("cache-uri"))
              } else {
              return target_image
            }
            } else {
            return self.$generate_data_uri(target_image, asset_dir_key)
          }
          } else {
          return self.$normalize_web_path(target_image, ((function() {if (asset_dir_key !== false && asset_dir_key !== nil && asset_dir_key != null) {
            return doc.$attr(asset_dir_key)
            } else {
            return nil
          }; return nil; })()))
        };
      }, TMP_22.$$arity = -2);

      Opal.defn(self, '$generate_data_uri', TMP_24 = function ːgenerate_data_uri(target_image, asset_dir_key) {
        var $a, $b, TMP_23, self = this, ext = nil, mimetype = nil, image_path = nil, bindata = nil;

        if (asset_dir_key == null) {
          asset_dir_key = nil;
        }
        ext = Opal.get('File').$extname(target_image);
        mimetype = ((function() {if (ext['$=='](".svg")) {
          return "image/svg+xml"
          } else {
          return "image/" + (ext['$[]']($range(1, -1, false)))
        }; return nil; })());
        if (asset_dir_key !== false && asset_dir_key !== nil && asset_dir_key != null) {
          image_path = self.$normalize_system_path(target_image, self.document.$attr(asset_dir_key), nil, $hash2(["target_name"], {"target_name": "image"}))
          } else {
          image_path = self.$normalize_system_path(target_image)
        };
        if ((($a = Opal.get('File')['$readable?'](image_path)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$warn("asciidoctor: WARNING: image to embed not found or not readable: " + (image_path));
          return "data:" + (mimetype) + ":base64,";
        };
        bindata = nil;
        if ((($a = Opal.get('IO')['$respond_to?']("binread")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          bindata = Opal.get('IO').$binread(image_path)
          } else {
          bindata = ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_23 = function(file){var self = TMP_23.$$s || this;
if (file == null) file = nil;
          return file.$read()}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b, image_path, "rb")
        };
        return "data:" + (mimetype) + ";base64," + (Opal.get('Base64').$encode64(bindata).$delete($scope.get('EOL')));
      }, TMP_24.$$arity = -2);

      Opal.defn(self, '$generate_data_uri_from_uri', TMP_26 = function ːgenerate_data_uri_from_uri(image_uri, cache_uri) {
        var $a, $b, TMP_25, self = this, mimetype = nil, bindata = nil;

        if (cache_uri == null) {
          cache_uri = false;
        }
        if (cache_uri !== false && cache_uri !== nil && cache_uri != null) {
          $scope.get('Helpers').$require_library("open-uri/cached", "open-uri-cached")
        } else if ((($a = Opal.get('RUBY_ENGINE_OPAL')['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          Opal.get('OpenURI')};
        try {
          mimetype = nil;
          bindata = ($a = ($b = self).$open, $a.$$p = (TMP_25 = function(file){var self = TMP_25.$$s || this;
if (file == null) file = nil;
          mimetype = file.$content_type();
            return file.$read();}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b, image_uri, "rb");
          return "data:" + (mimetype) + ";base64," + (Opal.get('Base64').$encode64(bindata).$delete($scope.get('EOL')));
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
            try {
              self.$warn("asciidoctor: WARNING: could not retrieve image data from URI: " + (image_uri));
              return image_uri;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_26.$$arity = -2);

      Opal.defn(self, '$read_contents', TMP_28 = function ːread_contents(target, opts) {
        var $a, $b, $c, $d, TMP_27, self = this, doc = nil, start = nil, data = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        doc = self.document;
        if ((($a = ((($b = ($scope.get('Helpers')['$uriish?'](target))) !== false && $b !== nil && $b != null) ? $b : (($c = ($d = (start = opts['$[]']("start")), $d !== false && $d !== nil && $d != null ?($scope.get('Helpers')['$uriish?'](start)) : $d), $c !== false && $c !== nil && $c != null ?(target = (((($d = self.path_resolver) !== false && $d !== nil && $d != null) ? $d : self.path_resolver = $scope.get('PathResolver').$new())).$web_path(target, start)) : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = doc['$attr?']("allow-uri-read")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = doc['$attr?']("cache-uri")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              $scope.get('Helpers').$require_library("open-uri/cached", "open-uri-cached")};
            try {
              data = ($a = ($b = Opal.get('OpenURI')).$open_uri, $a.$$p = (TMP_27 = function(fd){var self = TMP_27.$$s || this;
if (fd == null) fd = nil;
              return fd.$read()}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b, target);
              if ((($a = opts['$[]']("normalize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                data = $rb_times(($scope.get('Helpers').$normalize_lines_from_string(data)), $scope.get('EOL'))};
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  if ((($a = opts.$fetch("warn_on_failure", true)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                    self.$warn("asciidoctor: WARNING: could not retrieve contents of " + (((($a = opts['$[]']("label")) !== false && $a !== nil && $a != null) ? $a : "asset")) + " at URI: " + (target))};
                  data = nil;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
            } else {
            if ((($a = opts.$fetch("warn_on_failure", true)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$warn("asciidoctor: WARNING: cannot retrieve contents of " + (((($a = opts['$[]']("label")) !== false && $a !== nil && $a != null) ? $a : "asset")) + " at URI: " + (target) + " (allow-uri-read attribute not enabled)")};
            data = nil;
          }
          } else {
          target = self.$normalize_system_path(target, opts['$[]']("start"), nil, $hash2(["target_name"], {"target_name": (((($a = opts['$[]']("label")) !== false && $a !== nil && $a != null) ? $a : "asset"))}));
          data = self.$read_asset(target, $hash2(["normalize", "warn_on_failure"], {"normalize": opts['$[]']("normalize"), "warn_on_failure": (opts.$fetch("warn_on_failure", true))}));
        };
        return data;
      }, TMP_28.$$arity = -2);

      Opal.defn(self, '$read_asset', TMP_29 = function ːread_asset(path, opts) {
        var $a, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = Opal.get('Hash')['$==='](opts)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          opts = $hash2(["warn_on_failure"], {"warn_on_failure": (opts['$!='](false))})
        };
        if ((($a = Opal.get('File')['$readable?'](path)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = opts['$[]']("normalize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $rb_times($scope.get('Helpers').$normalize_lines_from_string(Opal.get('IO').$read(path)), $scope.get('EOL'))
            } else {
            return Opal.get('IO').$read(path)
          }
          } else {
          if ((($a = opts['$[]']("warn_on_failure")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$warn("asciidoctor: WARNING: file does not exist or cannot be read: " + (path))};
          return nil;
        };
      }, TMP_29.$$arity = -2);

      Opal.defn(self, '$normalize_web_path', TMP_30 = function ːnormalize_web_path(target, start, preserve_uri_target) {
        var $a, $b, self = this;

        if (start == null) {
          start = nil;
        }
        if (preserve_uri_target == null) {
          preserve_uri_target = true;
        }
        if ((($a = (($b = preserve_uri_target !== false && preserve_uri_target !== nil && preserve_uri_target != null) ? ($scope.get('Helpers')['$uriish?'](target)) : preserve_uri_target)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return target
          } else {
          return (((($a = self.path_resolver) !== false && $a !== nil && $a != null) ? $a : self.path_resolver = $scope.get('PathResolver').$new())).$web_path(target, start)
        };
      }, TMP_30.$$arity = -2);

      Opal.defn(self, '$normalize_system_path', TMP_31 = function ːnormalize_system_path(target, start, jail, opts) {
        var $a, self = this, path_resolver = nil, doc = nil;

        if (start == null) {
          start = nil;
        }
        if (jail == null) {
          jail = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        path_resolver = (((($a = self.path_resolver) !== false && $a !== nil && $a != null) ? $a : self.path_resolver = $scope.get('PathResolver').$new()));
        if ((($a = $rb_lt(((doc = self.document)).$safe(), (($scope.get('SafeMode')).$$scope.get('SAFE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (start !== false && start !== nil && start != null) {
            if ((($a = path_resolver['$is_root?'](start)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              start = Opal.get('File').$join(doc.$base_dir(), start)
            }
            } else {
            start = doc.$base_dir()
          }
          } else {
          if (start !== false && start !== nil && start != null) {
            } else {
            start = doc.$base_dir()
          };
          if (jail !== false && jail !== nil && jail != null) {
            } else {
            jail = doc.$base_dir()
          };
        };
        return path_resolver.$system_path(target, start, jail, opts);
      }, TMP_31.$$arity = -2);

      Opal.defn(self, '$normalize_asset_path', TMP_32 = function ːnormalize_asset_path(asset_ref, asset_name, autocorrect) {
        var self = this;

        if (asset_name == null) {
          asset_name = "path";
        }
        if (autocorrect == null) {
          autocorrect = true;
        }
        return self.$normalize_system_path(asset_ref, self.document.$base_dir(), nil, $hash2(["target_name", "recover"], {"target_name": asset_name, "recover": autocorrect}));
      }, TMP_32.$$arity = -2);

      return (Opal.defn(self, '$is_uri?', TMP_33 = function(str) {
        var self = this;

        return $scope.get('Helpers')['$uriish?'](str);
      }, TMP_33.$$arity = 1), nil) && 'is_uri?';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/abstract_block"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$attr_writer', '$==', '$!=', '$level', '$to_s', '$playback_attributes', '$convert', '$converter', '$*', '$map', '$file', '$lineno', '$include?', '$!', '$nil_or_empty?', '$apply_title_subs', '$title', '$empty?', '$<<', '$select', '$context', '$>', '$[]', '$has_role?', '$header?', '$concat', '$find_by', '$to_proc', '$each', '$flatten', '$delete', '$title?', '$attributes', '$counter_increment', '$index=', '$+', '$sectname', '$counter', '$numbered', '$number=', '$attr', '$caption=', '$special', '$doctype', '$assign_index', '$reindex_sections']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AbstractBlock(){};
      var self = $AbstractBlock = $klass($base, $super, 'AbstractBlock', $AbstractBlock);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19, TMP_22, TMP_23, TMP_24, TMP_25, TMP_27;

      def.document = def.attributes = def.blocks = def.source_location = def.subs = def.title = def.subbed_title = def.caption = def.next_section_index = def.context = def.style = def.id = def.header = def.next_section_number = nil;
      self.$attr_accessor("content_model");

      self.$attr_reader("subs");

      self.$attr_reader("blocks");

      self.$attr_accessor("level");

      self.$attr_writer("title");

      self.$attr_accessor("style");

      self.$attr_accessor("caption");

      self.$attr_accessor("source_location");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(parent, context, opts) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        self.content_model = "compound";
        self.subs = [];
        self.default_subs = nil;
        self.blocks = [];
        self.id = nil;
        self.title = nil;
        self.caption = nil;
        self.style = nil;
        self.level = (function() {if (context['$==']("document")) {
          return 0
        } else if ((($a = (($c = parent !== false && parent !== nil && parent != null) ? context['$!=']("section") : parent)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return parent.$level()
          } else {
          return nil
        }; return nil; })();
        self.next_section_index = 0;
        self.next_section_number = 1;
        return self.source_location = nil;
      }, TMP_1.$$arity = -3);

      Opal.defn(self, '$block?', TMP_2 = function() {
        var self = this;

        return true;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$inline?', TMP_3 = function() {
        var self = this;

        return false;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$context=', TMP_4 = function(context) {
        var self = this;

        self.context = context;
        return self.node_name = context.$to_s();
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$convert', TMP_5 = function ːconvert() {
        var self = this;

        self.document.$playback_attributes(self.attributes);
        return self.$converter().$convert(self);
      }, TMP_5.$$arity = 0);

      Opal.alias(self, 'render', 'convert');

      Opal.defn(self, '$content', TMP_7 = function ːcontent() {
        var $a, $b, TMP_6, self = this;

        return $rb_times(($a = ($b = self.blocks).$map, $a.$$p = (TMP_6 = function(b){var self = TMP_6.$$s || this;
if (b == null) b = nil;
        return b.$convert()}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b), $scope.get('EOL'));
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$file', TMP_8 = function ːfile() {
        var $a, self = this;

        if ((($a = self.source_location) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.source_location.$file()
          } else {
          return nil
        };
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$lineno', TMP_9 = function ːlineno() {
        var $a, self = this;

        if ((($a = self.source_location) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.source_location.$lineno()
          } else {
          return nil
        };
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$sub?', TMP_10 = function(name) {
        var self = this;

        return self.subs['$include?'](name);
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$title?', TMP_11 = function() {
        var self = this;

        return self.title['$nil_or_empty?']()['$!']();
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$title', TMP_12 = function ːtitle() {
        var $a, $b, self = this;

        if ((($a = (($b = self['subbed_title'], $b != null && $b !== nil) ? 'instance-variable' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.subbed_title
        } else if ((($a = self.title) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.subbed_title = self.$apply_title_subs(self.title)
          } else {
          return self.title
        };
      }, TMP_12.$$arity = 0);

      Opal.defn(self, '$captioned_title', TMP_13 = function ːcaptioned_title() {
        var self = this;

        return "" + (self.caption) + (self.$title());
      }, TMP_13.$$arity = 0);

      Opal.defn(self, '$blocks?', TMP_14 = function() {
        var self = this;

        return self.blocks['$empty?']()['$!']();
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$<<', TMP_15 = function(block) {
        var self = this;

        self.blocks['$<<'](block);
        return self;
      }, TMP_15.$$arity = 1);

      Opal.alias(self, 'append', '<<');

      Opal.defn(self, '$sections', TMP_17 = function ːsections() {
        var $a, $b, TMP_16, self = this;

        return ($a = ($b = self.blocks).$select, $a.$$p = (TMP_16 = function(block){var self = TMP_16.$$s || this;
if (block == null) block = nil;
        return block.$context()['$==']("section")}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($b);
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$sections?', TMP_18 = function() {
        var self = this;

        return $rb_gt(self.next_section_index, 0);
      }, TMP_18.$$arity = 0);

      Opal.defn(self, '$find_by', TMP_19 = function ːfind_by(selector) {
        var $a, $b, $c, $d, $e, TMP_20, TMP_21, self = this, $iter = TMP_19.$$p, block = $iter || nil, result = nil, any_context = nil, context_selector = nil, style_selector = nil, role_selector = nil, id_selector = nil;

        if (selector == null) {
          selector = $hash2([], {});
        }
        TMP_19.$$p = null;
        result = [];
        if ((($a = ($b = ($c = ($d = (((($e = (any_context = ((context_selector = selector['$[]']("context")))['$!']())) !== false && $e !== nil && $e != null) ? $e : context_selector['$=='](self.context))), $d !== false && $d !== nil && $d != null ?(((($e = ((style_selector = selector['$[]']("style")))['$!']()) !== false && $e !== nil && $e != null) ? $e : style_selector['$=='](self.style))) : $d), $c !== false && $c !== nil && $c != null ?(((($d = ((role_selector = selector['$[]']("role")))['$!']()) !== false && $d !== nil && $d != null) ? $d : (self['$has_role?'](role_selector)))) : $c), $b !== false && $b !== nil && $b != null ?(((($c = ((id_selector = selector['$[]']("id")))['$!']()) !== false && $c !== nil && $c != null) ? $c : id_selector['$=='](self.id))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (id_selector !== false && id_selector !== nil && id_selector != null) {
            if ((block !== nil)) {
              return (function() {if ((($a = (Opal.yield1(block, self))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return [self]
                } else {
                return result
              }; return nil; })()
              } else {
              return [self]
            }
          } else if ((block !== nil)) {
            if ((($a = (Opal.yield1(block, self))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              result['$<<'](self)}
            } else {
            result['$<<'](self)
          }};
        if ((($a = ($b = (($c = self.context['$==']("document")) ? (((($d = any_context) !== false && $d !== nil && $d != null) ? $d : context_selector['$==']("section"))) : self.context['$==']("document")), $b !== false && $b !== nil && $b != null ?self['$header?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          result.$concat(($a = ($b = self.header).$find_by, $a.$$p = block.$to_proc(), $a).call($b, selector))};
        if (context_selector['$==']("document")) {
        } else if (self.context['$==']("dlist")) {
          if ((($a = ((($c = any_context) !== false && $c !== nil && $c != null) ? $c : context_selector['$!=']("section"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($c = self.blocks.$flatten()).$each, $a.$$p = (TMP_20 = function(li){var self = TMP_20.$$s || this, $f, $g;
if (li == null) li = nil;
            if (li !== false && li !== nil && li != null) {
                return result.$concat(($f = ($g = li).$find_by, $f.$$p = block.$to_proc(), $f).call($g, selector))
                } else {
                return nil
              }}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $a).call($c)}
        } else if ((($a = ($d = ($e = self.blocks).$each, $d.$$p = (TMP_21 = function(b){var self = TMP_21.$$s || this, $f, $g;
if (b == null) b = nil;
        if ((($f = ((($g = context_selector['$==']("section")) ? b.$context()['$!=']("section") : context_selector['$==']("section")))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
            return nil;};
          return result.$concat(($f = ($g = b).$find_by, $f.$$p = block.$to_proc(), $f).call($g, selector));}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21), $d).call($e)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
        return result;
      }, TMP_19.$$arity = -1);

      Opal.alias(self, 'query', 'find_by');

      Opal.defn(self, '$remove_sub', TMP_22 = function ːremove_sub(sub) {
        var self = this;

        self.subs.$delete(sub);
        return nil;
      }, TMP_22.$$arity = 1);

      Opal.defn(self, '$assign_caption', TMP_23 = function ːassign_caption(caption, key) {
        var $a, $b, self = this, value = nil, caption_key = nil, caption_title = nil, caption_num = nil;

        if (caption == null) {
          caption = nil;
        }
        if (key == null) {
          key = nil;
        }
        if ((($a = ((($b = self['$title?']()) !== false && $b !== nil && $b != null) ? $b : self.caption['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if (caption !== false && caption !== nil && caption != null) {
          self.caption = caption
        } else if ((($a = (value = self.document.$attributes()['$[]']("caption"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.caption = value
        } else if ((($a = self['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ((($a = key) !== false && $a !== nil && $a != null) ? $a : key = self.context.$to_s());
          caption_key = "" + (key) + "-caption";
          if ((($a = (caption_title = self.document.$attributes()['$[]'](caption_key))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            caption_num = self.document.$counter_increment("" + (key) + "-number", self);
            self.caption = "" + (caption_title) + " " + (caption_num) + ". ";};};
        return nil;
      }, TMP_23.$$arity = -1);

      Opal.defn(self, '$list_marker_keyword', TMP_24 = function ːlist_marker_keyword(list_type) {
        var $a, self = this;

        if (list_type == null) {
          list_type = nil;
        }
        return $scope.get('ORDERED_LIST_KEYWORDS')['$[]'](((($a = list_type) !== false && $a !== nil && $a != null) ? $a : self.style));
      }, TMP_24.$$arity = -1);

      Opal.defn(self, '$assign_index', TMP_25 = function ːassign_index(section) {
        var $a, $b, $c, $d, self = this, appendix_number = nil, caption = nil;

        (($a = [self.next_section_index]), $b = section, $b['$index='].apply($b, $a), $a[$a.length-1]);
        self.next_section_index = $rb_plus(self.next_section_index, 1);
        if (section.$sectname()['$==']("appendix")) {
          appendix_number = self.document.$counter("appendix-number", "A");
          if ((($a = section.$numbered()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            (($a = [appendix_number]), $b = section, $b['$number='].apply($b, $a), $a[$a.length-1])};
          if ((($a = ((caption = self.document.$attr("appendix-caption", "")))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (($a = ["" + (appendix_number) + ". "]), $b = section, $b['$caption='].apply($b, $a), $a[$a.length-1])
            } else {
            return (($a = ["" + (caption) + " " + (appendix_number) + ": "]), $b = section, $b['$caption='].apply($b, $a), $a[$a.length-1])
          };
        } else if ((($a = section.$numbered()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = (((($c = section.$level()['$=='](1)) !== false && $c !== nil && $c != null) ? $c : ((($d = section.$level()['$=='](0)) ? section.$special() : section.$level()['$=='](0))))), $b !== false && $b !== nil && $b != null ?self.document.$doctype()['$==']("book") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (($a = [self.document.$counter("chapter-number", 1)]), $b = section, $b['$number='].apply($b, $a), $a[$a.length-1])
            } else {
            (($a = [self.next_section_number]), $b = section, $b['$number='].apply($b, $a), $a[$a.length-1]);
            return self.next_section_number = $rb_plus(self.next_section_number, 1);
          }
          } else {
          return nil
        };
      }, TMP_25.$$arity = 1);

      return (Opal.defn(self, '$reindex_sections', TMP_27 = function ːreindex_sections() {
        var $a, $b, TMP_26, self = this;

        self.next_section_index = 0;
        self.next_section_number = 0;
        return ($a = ($b = self.blocks).$each, $a.$$p = (TMP_26 = function(block){var self = TMP_26.$$s || this;
if (block == null) block = nil;
        if (block.$context()['$==']("section")) {
            self.$assign_index(block);
            return block.$reindex_sections();
            } else {
            return nil
          }}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $a).call($b);
      }, TMP_27.$$arity = 0), nil) && 'reindex_sections';
    })($scope.base, $scope.get('AbstractNode'))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/attribute_list"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$new', '$[]', '$update', '$parse', '$parse_attribute', '$eos?', '$skip_delimiter', '$+', '$rekey', '$each_with_index', '$[]=', '$skip_blank', '$peek', '$parse_attribute_value', '$get_byte', '$scan_name', '$!', '$!=', '$*', '$scan_to_delimiter', '$===', '$each', '$split', '$tr', '$empty?', '$apply_normal_subs', '$scan_to_quote', '$gsub', '$skip', '$scan']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $AttributeList(){};
      var self = $AttributeList = $klass($base, $super, 'AttributeList', $AttributeList);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14;

      def.attributes = def.scanner = def.delimiter = def.block = def.delimiter_skip_pattern = def.delimiter_boundary_pattern = nil;
      if (Opal.get('RUBY_ENGINE')['$==']("opal")) {
        Opal.cdecl($scope, 'CG_BLANK', "[ \\t]");

        Opal.cdecl($scope, 'CC_WORD', "a-zA-Z0-9_");

        Opal.cdecl($scope, 'CG_WORD', "[a-zA-Z0-9_]");};

      Opal.cdecl($scope, 'BoundaryRxs', $hash2(["\"", "'", ","], {"\"": /.*?[^\\](?=")/, "'": /.*?[^\\](?=')/, ",": (new RegExp(".*?(?=" + $scope.get('CG_BLANK') + "*(,|$))"))}));

      Opal.cdecl($scope, 'EscapedQuoteRxs', $hash2(["\"", "'"], {"\"": /\\"/, "'": /\\'/}));

      Opal.cdecl($scope, 'NameRx', (new RegExp("" + $scope.get('CG_WORD') + "[" + $scope.get('CC_WORD') + "\\-.]*")));

      Opal.cdecl($scope, 'BlankRx', (new RegExp("" + $scope.get('CG_BLANK') + "+")));

      Opal.cdecl($scope, 'SkipRxs', $hash2(["blank", ","], {"blank": $scope.get('BlankRx'), ",": (new RegExp("" + $scope.get('CG_BLANK') + "*(,|$)"))}));

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(source, block, delimiter) {
        var self = this;

        if (block == null) {
          block = nil;
        }
        if (delimiter == null) {
          delimiter = ",";
        }
        self.scanner = Opal.get('StringScanner').$new(source);
        self.block = block;
        self.delimiter = delimiter;
        self.delimiter_skip_pattern = $scope.get('SkipRxs')['$[]'](delimiter);
        self.delimiter_boundary_pattern = $scope.get('BoundaryRxs')['$[]'](delimiter);
        return self.attributes = nil;
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$parse_into', TMP_2 = function ːparse_into(attributes, posattrs) {
        var self = this;

        if (posattrs == null) {
          posattrs = [];
        }
        return attributes.$update(self.$parse(posattrs));
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$parse', TMP_3 = function ːparse(posattrs) {
        var $a, $b, self = this, index = nil;

        if (posattrs == null) {
          posattrs = [];
        }
        if ((($a = self.attributes) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.attributes};
        self.attributes = $hash2([], {});
        index = 0;
        while ((($b = self.$parse_attribute(index, posattrs)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = self.scanner['$eos?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          break;};
        self.$skip_delimiter();
        index = $rb_plus(index, 1);};
        return self.attributes;
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$rekey', TMP_4 = function ːrekey(posattrs) {
        var self = this;

        return $scope.get('AttributeList').$rekey(self.attributes, posattrs);
      }, TMP_4.$$arity = 1);

      Opal.defs(self, '$rekey', TMP_6 = function ːrekey(attributes, pos_attrs) {
        var $a, $b, TMP_5, self = this;

        ($a = ($b = pos_attrs).$each_with_index, $a.$$p = (TMP_5 = function(key, index){var self = TMP_5.$$s || this, $c, pos = nil, val = nil;
if (key == null) key = nil;if (index == null) index = nil;
        if (key !== false && key !== nil && key != null) {
            } else {
            return nil;
          };
          pos = $rb_plus(index, 1);
          if ((($c = (val = attributes['$[]'](pos))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return attributes['$[]='](key, val)
            } else {
            return nil
          };}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5), $a).call($b);
        return attributes;
      }, TMP_6.$$arity = 2);

      Opal.defn(self, '$parse_attribute', TMP_8 = function ːparse_attribute(index, pos_attrs) {
        var $a, $b, TMP_7, $c, $d, self = this, single_quoted_value = nil, first = nil, name = nil, value = nil, skipped = nil, c = nil, $case = nil, resolved_name = nil, pos_name = nil;

        if (index == null) {
          index = 0;
        }
        if (pos_attrs == null) {
          pos_attrs = [];
        }
        single_quoted_value = false;
        self.$skip_blank();
        if (((first = self.scanner.$peek(1)))['$==']("\"")) {
          name = self.$parse_attribute_value(self.scanner.$get_byte());
          value = nil;
        } else if (first['$==']("'")) {
          name = self.$parse_attribute_value(self.scanner.$get_byte());
          value = nil;
          single_quoted_value = true;
          } else {
          name = self.$scan_name();
          skipped = 0;
          c = nil;
          if ((($a = self.scanner['$eos?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (name !== false && name !== nil && name != null) {
              } else {
              return false
            }
            } else {
            skipped = ((($a = self.$skip_blank()) !== false && $a !== nil && $a != null) ? $a : 0);
            c = self.scanner.$get_byte();
          };
          if ((($a = ((($b = c['$!']()) !== false && $b !== nil && $b != null) ? $b : c['$=='](self.delimiter))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            value = nil
          } else if ((($a = ((($b = c['$!=']("=")) !== false && $b !== nil && $b != null) ? $b : name['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            name = "" + (name) + ($rb_times(" ", skipped)) + (c) + (self.$scan_to_delimiter());
            value = nil;
            } else {
            self.$skip_blank();
            if ((($a = self.scanner.$peek(1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if (((c = self.scanner.$get_byte()))['$==']("\"")) {
                value = self.$parse_attribute_value(c)
              } else if (c['$==']("'")) {
                value = self.$parse_attribute_value(c);
                single_quoted_value = true;
              } else if (c['$=='](self.delimiter)) {
                value = nil
                } else {
                value = "" + (c) + (self.$scan_to_delimiter());
                if (value['$==']("None")) {
                  return true};
              }};
          };
        };
        if (value !== false && value !== nil && value != null) {
          $case = name;if ("options"['$===']($case) || "opts"['$===']($case)) {name = "options";
          ($a = ($b = value.$tr(" ", "").$split(",")).$each, $a.$$p = (TMP_7 = function(opt){var self = TMP_7.$$s || this;
            if (self.attributes == null) self.attributes = nil;
if (opt == null) opt = nil;
          return self.attributes['$[]=']("" + (opt) + "-option", "")}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b);
          self.attributes['$[]='](name, value);}else if ("title"['$===']($case)) {self.attributes['$[]='](name, value)}else {self.attributes['$[]='](name, (function() {if ((($a = ($c = (($d = single_quoted_value !== false && single_quoted_value !== nil && single_quoted_value != null) ? value['$empty?']()['$!']() : single_quoted_value), $c !== false && $c !== nil && $c != null ?self.block : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (self.block.$apply_normal_subs(value))
            } else {
            return value
          }; return nil; })())}
          } else {
          resolved_name = (function() {if ((($a = ($c = (($d = single_quoted_value !== false && single_quoted_value !== nil && single_quoted_value != null) ? name['$empty?']()['$!']() : single_quoted_value), $c !== false && $c !== nil && $c != null ?self.block : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (self.block.$apply_normal_subs(name))
            } else {
            return name
          }; return nil; })();
          if ((($a = (pos_name = pos_attrs['$[]'](index))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.attributes['$[]='](pos_name, resolved_name)};
          self.attributes['$[]=']($rb_plus(index, 1), resolved_name);
        };
        return true;
      }, TMP_8.$$arity = -1);

      Opal.defn(self, '$parse_attribute_value', TMP_9 = function ːparse_attribute_value(quote) {
        var $a, self = this, value = nil;

        if (self.scanner.$peek(1)['$=='](quote)) {
          self.scanner.$get_byte();
          return "";};
        if ((($a = (value = self.$scan_to_quote(quote))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.scanner.$get_byte();
          return value.$gsub($scope.get('EscapedQuoteRxs')['$[]'](quote), quote);
          } else {
          return "" + (quote) + (self.$scan_to_delimiter())
        };
      }, TMP_9.$$arity = 1);

      Opal.defn(self, '$skip_blank', TMP_10 = function ːskip_blank() {
        var self = this;

        return self.scanner.$skip($scope.get('BlankRx'));
      }, TMP_10.$$arity = 0);

      Opal.defn(self, '$skip_delimiter', TMP_11 = function ːskip_delimiter() {
        var self = this;

        return self.scanner.$skip(self.delimiter_skip_pattern);
      }, TMP_11.$$arity = 0);

      Opal.defn(self, '$scan_name', TMP_12 = function ːscan_name() {
        var self = this;

        return self.scanner.$scan($scope.get('NameRx'));
      }, TMP_12.$$arity = 0);

      Opal.defn(self, '$scan_to_delimiter', TMP_13 = function ːscan_to_delimiter() {
        var self = this;

        return self.scanner.$scan(self.delimiter_boundary_pattern);
      }, TMP_13.$$arity = 0);

      return (Opal.defn(self, '$scan_to_quote', TMP_14 = function ːscan_to_quote(quote) {
        var self = this;

        return self.scanner.$scan($scope.get('BoundaryRxs')['$[]'](quote));
      }, TMP_14.$$arity = 1), nil) && 'scan_to_quote';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/block"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$default=', '$attr_accessor', '$[]', '$key?', '$==', '$===', '$dup', '$delete', '$[]=', '$lock_in_subs', '$nil_or_empty?', '$normalize_lines_from_string', '$apply_subs', '$*', '$<', '$size', '$empty?', '$rstrip', '$shift', '$pop', '$warn', '$to_s', '$class', '$object_id', '$inspect']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Block(){};
      var self = $Block = $klass($base, $super, 'Block', $Block);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, TMP_3, TMP_4;

      def.attributes = def.content_model = def.lines = def.subs = def.blocks = def.context = def.style = nil;
      (($a = ["simple"]), $b = (Opal.cdecl($scope, 'DEFAULT_CONTENT_MODEL', $hash2(["audio", "image", "listing", "literal", "stem", "open", "page_break", "pass", "thematic_break", "video"], {"audio": "empty", "image": "empty", "listing": "verbatim", "literal": "verbatim", "stem": "raw", "open": "compound", "page_break": "empty", "pass": "raw", "thematic_break": "empty", "video": "empty"}))), $b['$default='].apply($b, $a), $a[$a.length-1]);

      Opal.alias(self, 'blockname', 'context');

      self.$attr_accessor("lines");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(parent, context, opts) {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, subs = nil, raw_source = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        self.content_model = ((($a = opts['$[]']("content_model")) !== false && $a !== nil && $a != null) ? $a : $scope.get('DEFAULT_CONTENT_MODEL')['$[]'](context));
        if ((($a = opts['$key?']("subs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (subs = opts['$[]']("subs"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (subs['$==']("default")) {
              self.default_subs = opts['$[]']("default_subs")
            } else if ((($a = Opal.get('Array')['$==='](subs)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.default_subs = subs.$dup();
              self.attributes.$delete("subs");
              } else {
              self.default_subs = nil;
              self.attributes['$[]=']("subs", "" + (subs));
            };
            self.$lock_in_subs();
            } else {
            self.subs = [];
            self.default_subs = [];
            self.attributes.$delete("subs");
          }
          } else {
          self.subs = [];
          self.default_subs = nil;
        };
        if ((($a = ((raw_source = opts['$[]']("source")))['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.lines = []
        } else if ((($a = Opal.get('String')['$==='](raw_source)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.lines = $scope.get('Helpers').$normalize_lines_from_string(raw_source)
          } else {
          return self.lines = raw_source.$dup()
        };
      }, TMP_1.$$arity = -3);

      Opal.defn(self, '$content', TMP_2 = function ːcontent() {
        var $a, $b, $c, $d, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, $case = nil, result = nil, first = nil, last = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_2.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return (function() {$case = self.content_model;if ("compound"['$===']($case)) {return ($a = ($b = self, Opal.find_super_dispatcher(self, 'content', TMP_2, false)), $a.$$p = $iter, $a).apply($b, $zuper)}else if ("simple"['$===']($case)) {return self.$apply_subs($rb_times(self.lines, $scope.get('EOL')), self.subs)}else if ("verbatim"['$===']($case) || "raw"['$===']($case)) {result = self.$apply_subs(self.lines, self.subs);
        if ((($a = $rb_lt(result.$size(), 2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return result['$[]'](0)
          } else {
          while ((($c = ($d = (first = result['$[]'](0)), $d !== false && $d !== nil && $d != null ?first.$rstrip()['$empty?']() : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          result.$shift()};
          while ((($c = ($d = (last = result['$[]'](-1)), $d !== false && $d !== nil && $d != null ?last.$rstrip()['$empty?']() : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          result.$pop()};
          return $rb_times(result, $scope.get('EOL'));
        };}else {if (self.content_model['$==']("empty")) {
          } else {
          self.$warn("Unknown content model '" + (self.content_model) + "' for block: " + (self.$to_s()))
        };
        return nil;}})();
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$source', TMP_3 = function ːsource() {
        var self = this;

        return $rb_times(self.lines, $scope.get('EOL'));
      }, TMP_3.$$arity = 0);

      return (Opal.defn(self, '$to_s', TMP_4 = function ːto_s() {
        var self = this, content_summary = nil;

        content_summary = (function() {if (self.content_model['$==']("compound")) {
          return "blocks: " + (self.blocks.$size())
          } else {
          return "lines: " + (self.lines.$size())
        }; return nil; })();
        return "#<" + (self.$class()) + "@" + (self.$object_id()) + " {context: " + (self.context.$inspect()) + ", content_model: " + (self.content_model.$inspect()) + ", style: " + (self.style.$inspect()) + ", " + (content_summary) + "}>";
      }, TMP_4.$$arity = 0), nil) && 'to_s';
    })($scope.base, $scope.get('AbstractBlock'))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/callouts"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$next_list', '$<<', '$current_list', '$to_i', '$generate_next_callout_id', '$+', '$<=', '$size', '$[]', '$-', '$chop', '$join', '$map', '$==', '$<', '$generate_callout_id']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Callouts(){};
      var self = $Callouts = $klass($base, $super, 'Callouts', $Callouts);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10;

      def.co_index = def.lists = def.list_index = nil;
      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize() {
        var self = this;

        self.lists = [];
        self.list_index = 0;
        return self.$next_list();
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$register', TMP_2 = function ːregister(li_ordinal) {
        var self = this, id = nil;

        self.$current_list()['$<<']($hash2(["ordinal", "id"], {"ordinal": li_ordinal.$to_i(), "id": (id = self.$generate_next_callout_id())}));
        self.co_index = $rb_plus(self.co_index, 1);
        return id;
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$read_next_id', TMP_3 = function ːread_next_id() {
        var $a, self = this, id = nil, list = nil;

        id = nil;
        list = self.$current_list();
        if ((($a = $rb_le(self.co_index, list.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          id = list['$[]']($rb_minus(self.co_index, 1))['$[]']("id")};
        self.co_index = $rb_plus(self.co_index, 1);
        return id;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$callout_ids', TMP_5 = function ːcallout_ids(li_ordinal) {
        var $a, $b, TMP_4, self = this;

        return ($a = ($b = self.$current_list()).$map, $a.$$p = (TMP_4 = function(element){var self = TMP_4.$$s || this;
if (element == null) element = nil;
        if (element['$[]']("ordinal")['$=='](li_ordinal)) {
            return "" + (element['$[]']("id")) + " "
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b).$join().$chop();
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$current_list', TMP_6 = function ːcurrent_list() {
        var self = this;

        return self.lists['$[]']($rb_minus(self.list_index, 1));
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$next_list', TMP_7 = function ːnext_list() {
        var $a, self = this;

        self.list_index = $rb_plus(self.list_index, 1);
        if ((($a = $rb_lt(self.lists.$size(), self.list_index)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.lists['$<<']([])};
        self.co_index = 1;
        return nil;
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$rewind', TMP_8 = function ːrewind() {
        var self = this;

        self.list_index = 1;
        self.co_index = 1;
        return nil;
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$generate_next_callout_id', TMP_9 = function ːgenerate_next_callout_id() {
        var self = this;

        return self.$generate_callout_id(self.list_index, self.co_index);
      }, TMP_9.$$arity = 0);

      return (Opal.defn(self, '$generate_callout_id', TMP_10 = function ːgenerate_callout_id(list_index, co_index) {
        var self = this;

        return "CO" + (list_index) + "-" + (co_index);
      }, TMP_10.$$arity = 2), nil) && 'generate_callout_id';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/document"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$new', '$attr_reader', '$nil?', '$<<', '$[]', '$[]=', '$include?', '$strip', '$tr_s', '$gsub', '$empty?', '$!', '$rpartition', '$delete', '$base_dir', '$inject', '$==', '$references', '$callouts', '$dup', '$attributes', '$each', '$safe', '$compat_mode', '$sourcemap', '$converter', '$extensions', '$start_with?', '$end_with?', '$chop', '$downcase', '$===', '$const_get', '$upcase', '$to_s', '$key?', '$freeze', '$attribute_undefined', '$attribute_missing', '$find', '$constants', '$expand_path', '$pwd', '$>=', '$+', '$length', '$fetch', '$abs', '$to_i', '$delete_if', '$parse', '$restore_attributes', '$update_backend_attributes', '$utc', '$at', '$now', '$strftime', '$join', '$build_registry', '$to_proc', '$activate', '$preprocessors?', '$process_method', '$preprocessors', '$treeprocessors?', '$!=', '$treeprocessors', '$nil_or_empty?', '$nextval', '$counter', '$save_to', '$chr', '$ord', '$source', '$source_lines', '$title=', '$title', '$first_section', '$title?', '$merge', '$has_header?', '$context', '$assign_index', '$clear_playback_attributes', '$save_attributes', '$attribute_locked?', '$doctitle', '$has_key?', '$rewind', '$name', '$negate', '$value', '$limit', '$apply_attribute_value_subs', '$delete?', '$update_doctype_attributes', '$match', '$resolve_pass_subs', '$apply_subs', '$apply_header_subs', '$create_converter', '$basebackend', '$outfilesuffix', '$filetype', '$sub', '$backend', '$default', '$create', '$fail', '$doctype', '$content_model', '$content', '$convert', '$postprocessors?', '$postprocessors', '$write', '$respond_to?', '$chomp', '$open', '$map', '$split', '$&', '$normalize_system_path', '$read_asset', '$resolve_docinfo_subs', '$sub_attributes', '$docinfo_processors?', '$*', '$compact', '$resolve_subs', '$docinfo_processors', '$class', '$object_id', '$inspect', '$size']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Document(){};
      var self = $Document = $klass($base, $super, 'Document', $Document);

      var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_39, TMP_40, TMP_41, TMP_42, TMP_44, TMP_45, TMP_46, TMP_48, TMP_49, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_57, TMP_59, TMP_60, TMP_62, TMP_63, TMP_64, TMP_65;

      def.attributes = def.safe = def.reader = def.base_dir = def.parsed = def.parent_document = def.extensions = def.options = def.counters = def.references = def.doctype = def.backend = def.header = def.blocks = def.attributes_modified = def.id = def.callouts = def.header_attributes = def.max_attribute_value_size = def.attribute_overrides = def.converter = def.outfilesuffix = def.docinfo_processor_extensions = def.document = nil;
      Opal.cdecl($scope, 'Footnote', Opal.get('Struct').$new("index", "id", "text"));

      (function($base, $super) {
        function $AttributeEntry(){};
        var self = $AttributeEntry = $klass($base, $super, 'AttributeEntry', $AttributeEntry);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$attr_reader("name", "value", "negate");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(name, value, negate) {
          var $a, self = this;

          if (negate == null) {
            negate = nil;
          }
          self.name = name;
          self.value = value;
          return self.negate = (function() {if ((($a = negate['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return value['$nil?']()
            } else {
            return negate
          }; return nil; })();
        }, TMP_1.$$arity = -3);

        return (Opal.defn(self, '$save_to', TMP_2 = function ːsave_to(block_attributes) {
          var $a, $b, $c, self = this;

          return (($a = "attribute_entries", $b = block_attributes, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, []))))['$<<'](self);
        }, TMP_2.$$arity = 1), nil) && 'save_to';
      })($scope.base, null);

      (function($base, $super) {
        function $Title(){};
        var self = $Title = $klass($base, $super, 'Title', $Title);

        var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6;

        def.sanitized = def.subtitle = def.combined = nil;
        self.$attr_reader("main");

        Opal.alias(self, 'title', 'main');

        self.$attr_reader("subtitle");

        self.$attr_reader("combined");

        Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(val, opts) {
          var $a, $b, $c, self = this, sep = nil, _ = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          if ((($a = ($b = (self.sanitized = opts['$[]']("sanitize")), $b !== false && $b !== nil && $b != null ?val['$include?']("<") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            val = val.$gsub($scope.get('XmlSanitizeRx'), "").$tr_s(" ", " ").$strip()};
          if ((($a = ((($b = ((sep = ((($c = opts['$[]']("separator")) !== false && $c !== nil && $c != null) ? $c : ":")))['$empty?']()) !== false && $b !== nil && $b != null) ? $b : val['$include?'](sep = "" + (sep) + " ")['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.main = val;
            self.subtitle = nil;
            } else {
            $b = val.$rpartition(sep), $a = Opal.to_ary($b), self.main = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), self.subtitle = ($a[2] == null ? nil : $a[2]), $b
          };
          return self.combined = val;
        }, TMP_3.$$arity = -2);

        Opal.defn(self, '$sanitized?', TMP_4 = function() {
          var self = this;

          return self.sanitized;
        }, TMP_4.$$arity = 0);

        Opal.defn(self, '$subtitle?', TMP_5 = function() {
          var self = this;

          return self.subtitle['$!']()['$!']();
        }, TMP_5.$$arity = 0);

        return (Opal.defn(self, '$to_s', TMP_6 = function ːto_s() {
          var self = this;

          return self.combined;
        }, TMP_6.$$arity = 0), nil) && 'to_s';
      })($scope.base, null);

      self.$attr_reader("safe");

      self.$attr_reader("compat_mode");

      self.$attr_reader("sourcemap");

      self.$attr_reader("references");

      self.$attr_reader("counters");

      self.$attr_reader("callouts");

      self.$attr_reader("header");

      self.$attr_reader("base_dir");

      self.$attr_reader("options");

      self.$attr_reader("outfilesuffix");

      self.$attr_reader("parent_document");

      self.$attr_reader("reader");

      self.$attr_reader("converter");

      self.$attr_reader("extensions");

      Opal.defn(self, '$initialize', TMP_7 = function ːinitialize(data, options) {
        var $a, $b, $c, $d, TMP_8, TMP_9, $e, TMP_10, $f, $g, TMP_11, $h, $i, TMP_12, self = this, $iter = TMP_7.$$p, $yield = $iter || nil, parent_doc = nil, attr_overrides = nil, initialize_extensions = nil, safe_mode = nil, header_footer = nil, attrs = nil, safe_mode_name = nil, backend_val = nil, doctype_val = nil, val = nil, now = nil, localdate = nil, localtime = nil, registry = nil, ext_block = nil;

        if (data == null) {
          data = nil;
        }
        if (options == null) {
          options = $hash2([], {});
        }
        TMP_7.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_7, false)), $a.$$p = null, $a).call($b, self, "document");
        if ((($a = (parent_doc = options.$delete("parent"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.parent_document = parent_doc;
          ($a = "base_dir", $c = options, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, parent_doc.$base_dir())));
          self.references = ($a = ($c = parent_doc.$references()).$inject, $a.$$p = (TMP_8 = function(accum, $e){var self = TMP_8.$$s || this, $e_args, key, ref;

            if ($e == null) {
              $e = nil;
            }
            $e = Opal.to_ary($e);
            $e_args = Opal.slice.call($e, 0, $e.length);
            key = $e_args.splice(0,1)[0];
            if (key == null) {
              key = nil;
            }
            ref = $e_args.splice(0,1)[0];
            if (ref == null) {
              ref = nil;
            }if (accum == null) accum = nil;
          if (key['$==']("footnotes")) {
              accum['$[]=']("footnotes", [])
              } else {
              accum['$[]='](key, ref)
            };
            return accum;}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8.$$has_top_level_mlhs_arg = true, TMP_8), $a).call($c, $hash2([], {}));
          self.callouts = parent_doc.$callouts();
          attr_overrides = parent_doc.$attributes().$dup();
          ($a = ($d = ["doctype", "compat-mode", "toc", "toc-placement", "toc-position"]).$each, $a.$$p = (TMP_9 = function(key){var self = TMP_9.$$s || this;
if (key == null) key = nil;
          return attr_overrides.$delete(key)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($d);
          self.attribute_overrides = attr_overrides;
          self.safe = parent_doc.$safe();
          self.compat_mode = parent_doc.$compat_mode();
          self.sourcemap = parent_doc.$sourcemap();
          self.converter = parent_doc.$converter();
          initialize_extensions = false;
          self.extensions = parent_doc.$extensions();
          } else {
          self.parent_document = nil;
          self.references = $hash2(["ids", "footnotes", "links", "images", "indexterms", "includes"], {"ids": $hash2([], {}), "footnotes": [], "links": [], "images": [], "indexterms": [], "includes": Opal.get('Set').$new()});
          self.callouts = $scope.get('Callouts').$new();
          attr_overrides = $hash2([], {});
          ($a = ($e = (((($f = options['$[]']("attributes")) !== false && $f !== nil && $f != null) ? $f : $hash2([], {})))).$each, $a.$$p = (TMP_10 = function(key, value){var self = TMP_10.$$s || this, $f;
if (key == null) key = nil;if (value == null) value = nil;
          if ((($f = key['$start_with?']("!")) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              key = key['$[]']($range(1, -1, false));
              value = nil;
            } else if ((($f = key['$end_with?']("!")) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
              key = key.$chop();
              value = nil;};
            return attr_overrides['$[]='](key.$downcase(), value);}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($e);
          self.attribute_overrides = attr_overrides;
          if ((($a = ((safe_mode = options['$[]']("safe")))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.safe = (($scope.get('SafeMode')).$$scope.get('SECURE'))
          } else if ((($a = Opal.get('Integer')['$==='](safe_mode)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.safe = safe_mode
            } else {
            try {
              self.safe = $scope.get('SafeMode').$const_get(safe_mode.$to_s().$upcase())
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  self.safe = (($scope.get('SafeMode')).$$scope.get('SECURE'))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          };
          self.compat_mode = attr_overrides['$key?']("compat-mode");
          self.sourcemap = options['$[]']("sourcemap");
          self.converter = nil;
          initialize_extensions = (function(){ try { return ((((Opal.get('Asciidoctor')).$$scope.get('Extensions'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })();
          self.extensions = nil;
        };
        self.parsed = false;
        self.header = nil;
        self.counters = $hash2([], {});
        self.attributes_modified = Opal.get('Set').$new();
        self.options = options;
        self.docinfo_processor_extensions = $hash2([], {});
        header_footer = (($a = "header_footer", $f = options, ((($g = $f['$[]']($a)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($a, false))));
        options.$freeze();
        attrs = self.attributes;
        attrs['$[]=']("sectids", "");
        if (header_footer !== false && header_footer !== nil && header_footer != null) {
          } else {
          attrs['$[]=']("notitle", "")
        };
        attrs['$[]=']("toc-placement", "auto");
        attrs['$[]=']("stylesheet", "");
        attrs['$[]=']("webfonts", "");
        if (header_footer !== false && header_footer !== nil && header_footer != null) {
          attrs['$[]=']("copycss", "")};
        attrs['$[]=']("prewrap", "");
        attrs['$[]=']("attribute-undefined", $scope.get('Compliance').$attribute_undefined());
        attrs['$[]=']("attribute-missing", $scope.get('Compliance').$attribute_missing());
        attrs['$[]=']("iconfont-remote", "");
        attrs['$[]=']("caution-caption", "Caution");
        attrs['$[]=']("important-caption", "Important");
        attrs['$[]=']("note-caption", "Note");
        attrs['$[]=']("tip-caption", "Tip");
        attrs['$[]=']("warning-caption", "Warning");
        attrs['$[]=']("appendix-caption", "Appendix");
        attrs['$[]=']("example-caption", "Example");
        attrs['$[]=']("figure-caption", "Figure");
        attrs['$[]=']("table-caption", "Table");
        attrs['$[]=']("toc-title", "Table of Contents");
        attrs['$[]=']("manname-title", "NAME");
        attrs['$[]=']("untitled-label", "Untitled");
        attrs['$[]=']("version-label", "Version");
        attrs['$[]=']("last-update-label", "Last updated");
        attr_overrides['$[]=']("asciidoctor", "");
        attr_overrides['$[]=']("asciidoctor-version", $scope.get('VERSION'));
        safe_mode_name = ($a = ($f = $scope.get('SafeMode').$constants()).$find, $a.$$p = (TMP_11 = function(l){var self = TMP_11.$$s || this;
          if (self.safe == null) self.safe = nil;
if (l == null) l = nil;
        return $scope.get('SafeMode').$const_get(l)['$=='](self.safe)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($f).$to_s().$downcase();
        attr_overrides['$[]=']("safe-mode-name", safe_mode_name);
        attr_overrides['$[]=']("safe-mode-" + (safe_mode_name), "");
        attr_overrides['$[]=']("safe-mode-level", self.safe);
        attr_overrides['$[]=']("embedded", (function() {if (header_footer !== false && header_footer !== nil && header_footer != null) {
          return nil
          } else {
          return ""
        }; return nil; })());
        ($a = "max-include-depth", $g = attr_overrides, ((($h = $g['$[]']($a)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($a, 64)));
        ($a = "allow-uri-read", $g = attr_overrides, ((($h = $g['$[]']($a)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($a, nil)));
        attr_overrides['$[]=']("user-home", $scope.get('USER_HOME'));
        if ((($a = attr_overrides['$key?']("numbered")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attr_overrides['$[]=']("sectnums", attr_overrides.$delete("numbered"))};
        if ((($a = options['$[]']("base_dir")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.base_dir = attr_overrides['$[]=']("docdir", Opal.get('File').$expand_path(options['$[]']("base_dir")))
        } else if ((($a = attr_overrides['$[]']("docdir")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.base_dir = attr_overrides['$[]=']("docdir", Opal.get('File').$expand_path(attr_overrides['$[]']("docdir")))
          } else {
          self.base_dir = attr_overrides['$[]=']("docdir", Opal.get('File').$expand_path(Opal.get('Dir').$pwd()))
        };
        if ((($a = (backend_val = options['$[]']("backend"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attr_overrides['$[]=']("backend", "" + (backend_val))};
        if ((($a = (doctype_val = options['$[]']("doctype"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attr_overrides['$[]=']("doctype", "" + (doctype_val))};
        if ((($a = $rb_ge(self.safe, (($scope.get('SafeMode')).$$scope.get('SERVER')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = "copycss", $g = attr_overrides, ((($h = $g['$[]']($a)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($a, nil)));
          ($a = "source-highlighter", $g = attr_overrides, ((($h = $g['$[]']($a)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($a, nil)));
          ($a = "backend", $g = attr_overrides, ((($h = $g['$[]']($a)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($a, $scope.get('DEFAULT_BACKEND'))));
          if ((($a = ($g = parent_doc['$!'](), $g !== false && $g !== nil && $g != null ?attr_overrides['$key?']("docfile") : $g)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attr_overrides['$[]=']("docfile", attr_overrides['$[]']("docfile")['$[]']($range(($rb_plus(attr_overrides['$[]']("docdir").$length(), 1)), -1, false)))};
          attr_overrides['$[]=']("docdir", "");
          attr_overrides['$[]=']("user-home", ".");
          if ((($a = $rb_ge(self.safe, (($scope.get('SafeMode')).$$scope.get('SECURE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = attr_overrides['$key?']("max-attribute-value-size")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              attr_overrides['$[]=']("max-attribute-value-size", 4096)
            };
            if ((($a = attr_overrides.$fetch("linkcss", "")['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              attr_overrides['$[]=']("linkcss", "")
            };
            ($a = "icons", $g = attr_overrides, ((($h = $g['$[]']($a)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($a, nil)));};};
        self.max_attribute_value_size = (function() {if ((($a = (val = (($g = "max-attribute-value-size", $h = attr_overrides, ((($i = $h['$[]']($g)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($g, nil)))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val.$to_i().$abs()
          } else {
          return nil
        }; return nil; })();
        ($a = ($g = attr_overrides).$delete_if, $a.$$p = (TMP_12 = function(key, val){var self = TMP_12.$$s || this, $j, $k, verdict = nil;
if (key == null) key = nil;if (val == null) val = nil;
        verdict = false;
          if ((($j = val['$nil?']()) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
            attrs.$delete(key)
            } else {
            if ((($j = ($k = Opal.get('String')['$==='](val), $k !== false && $k !== nil && $k != null ?(val['$end_with?']("@")) : $k)) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
              val = val.$chop();
              verdict = true;};
            attrs['$[]='](key, val);
          };
          return verdict;}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $a).call($g);
        if (parent_doc !== false && parent_doc !== nil && parent_doc != null) {
          ($a = "doctype", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, $scope.get('DEFAULT_DOCTYPE'))));
          self.reader = $scope.get('Reader').$new(data, options['$[]']("cursor"));
          $scope.get('Parser').$parse(self.reader, self);
          self.$restore_attributes();
          return self.parsed = true;
          } else {
          if ((($a = "backend", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, $scope.get('DEFAULT_BACKEND')))))['$==']("manpage")) {
            attrs['$[]=']("doctype", attr_overrides['$[]=']("doctype", "manpage"))
            } else {
            ($a = "doctype", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, $scope.get('DEFAULT_DOCTYPE'))))
          };
          self.$update_backend_attributes(attrs['$[]']("backend"), true);
          now = (function() {if ((($a = Opal.get('ENV')['$[]']("SOURCE_DATE_EPOCH")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (Opal.get('Time').$at(Opal.get('ENV')['$[]']("SOURCE_DATE_EPOCH").$to_i())).$utc()
            } else {
            return Opal.get('Time').$now()
          }; return nil; })();
          localdate = (($a = "localdate", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, now.$strftime("%Y-%m-%d")))));
          if ((($a = (localtime = attrs['$[]']("localtime"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            try {
              localtime = attrs['$[]=']("localtime", now.$strftime("%H:%M:%S %Z"))
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  localtime = attrs['$[]=']("localtime", now.$strftime("%H:%M:%S %z"))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          };
          ($a = "localdatetime", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, "" + (localdate) + " " + (localtime))));
          ($a = "docdate", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, localdate)));
          ($a = "doctime", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, localtime)));
          ($a = "docdatetime", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, "" + (localdate) + " " + (localtime))));
          ($a = "stylesdir", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, ".")));
          ($a = "iconsdir", $h = attrs, ((($i = $h['$[]']($a)) !== false && $i !== nil && $i != null) ? $i : $h['$[]=']($a, Opal.get('File').$join(attrs.$fetch("imagesdir", "./images"), "icons"))));
          if (initialize_extensions !== false && initialize_extensions !== nil && initialize_extensions != null) {
            if ((($a = (registry = options['$[]']("extensions_registry"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ((($h = (($scope.get('Extensions')).$$scope.get('Registry'))['$==='](registry)) !== false && $h !== nil && $h != null) ? $h : (($i = Opal.get('RUBY_ENGINE_JRUBY'), $i !== false && $i !== nil && $i != null ?((((Opal.get('AsciidoctorJ')).$$scope.get('Extensions'))).$$scope.get('ExtensionRegistry'))['$==='](registry) : $i)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                registry = (($scope.get('Extensions')).$$scope.get('Registry')).$new()
              }
            } else if ((($a = Opal.get('Proc')['$===']((ext_block = options['$[]']("extensions")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              registry = ($a = ($h = $scope.get('Extensions')).$build_registry, $a.$$p = ext_block.$to_proc(), $a).call($h)
              } else {
              registry = (($scope.get('Extensions')).$$scope.get('Registry')).$new()
            };
            self.extensions = registry.$activate(self);};
          return self.reader = $scope.get('PreprocessorReader').$new(self, data, (($scope.get('Reader')).$$scope.get('Cursor')).$new(attrs['$[]']("docfile"), self.base_dir));
        };
      }, TMP_7.$$arity = -1);

      Opal.defn(self, '$parse', TMP_15 = function ːparse(data) {
        var $a, $b, $c, TMP_13, TMP_14, self = this, doc = nil, exts = nil;

        if (data == null) {
          data = nil;
        }
        if ((($a = self.parsed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self
          } else {
          doc = self;
          if (data !== false && data !== nil && data != null) {
            self.reader = $scope.get('PreprocessorReader').$new(doc, data, (($scope.get('Reader')).$$scope.get('Cursor')).$new(self.attributes['$[]']("docfile"), self.base_dir))};
          if ((($a = ($b = (exts = (function() {if ((($c = self.parent_document) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            return self.extensions
          }; return nil; })()), $b !== false && $b !== nil && $b != null ?exts['$preprocessors?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = exts.$preprocessors()).$each, $a.$$p = (TMP_13 = function(ext){var self = TMP_13.$$s || this, $d;
              if (self.reader == null) self.reader = nil;
if (ext == null) ext = nil;
            return self.reader = ((($d = ext.$process_method()['$[]'](doc, self.reader)) !== false && $d !== nil && $d != null) ? $d : self.reader)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b)};
          $scope.get('Parser').$parse(self.reader, doc, $hash2(["header_only"], {"header_only": self.options['$[]']("parse_header_only")['$!']()['$!']()}));
          self.$restore_attributes();
          if ((($a = (($c = exts !== false && exts !== nil && exts != null) ? exts['$treeprocessors?']() : exts)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($c = exts.$treeprocessors()).$each, $a.$$p = (TMP_14 = function(ext){var self = TMP_14.$$s || this, $d, $e, $f, result = nil;
if (ext == null) ext = nil;
            if ((($d = ($e = ($f = (result = ext.$process_method()['$[]'](doc)), $f !== false && $f !== nil && $f != null ?$scope.get('Document')['$==='](result) : $f), $e !== false && $e !== nil && $e != null ?result['$!='](doc) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return doc = result
                } else {
                return nil
              }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c)};
          self.parsed = true;
          return doc;
        };
      }, TMP_15.$$arity = -1);

      Opal.defn(self, '$counter', TMP_16 = function ːcounter(name, seed) {
        var $a, $b, self = this, attr_is_seed = nil, attr_val = nil;

        if (seed == null) {
          seed = nil;
        }
        if ((($a = ($b = (attr_is_seed = ((attr_val = self.attributes['$[]'](name)))['$nil_or_empty?']()['$!']()), $b !== false && $b !== nil && $b != null ?self.counters['$key?'](name) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.counters['$[]='](name, self.$nextval(attr_val))
          } else {
          if ((($a = seed['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            seed = self.$nextval((function() {if (attr_is_seed !== false && attr_is_seed !== nil && attr_is_seed != null) {
              return attr_val
              } else {
              return 0
            }; return nil; })())
          } else if (seed.$to_i().$to_s()['$=='](seed)) {
            seed = seed.$to_i()};
          self.counters['$[]='](name, seed);
        };
        return (self.attributes['$[]='](name, self.counters['$[]'](name)));
      }, TMP_16.$$arity = -2);

      Opal.defn(self, '$counter_increment', TMP_17 = function ːcounter_increment(counter_name, block) {
        var self = this, val = nil;

        val = self.$counter(counter_name);
        $scope.get('AttributeEntry').$new(counter_name, val).$save_to(block.$attributes());
        return val;
      }, TMP_17.$$arity = 2);

      Opal.defn(self, '$nextval', TMP_18 = function ːnextval(current) {
        var $a, self = this, intval = nil;

        if ((($a = Opal.get('Integer')['$==='](current)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $rb_plus(current, 1)
          } else {
          intval = current.$to_i();
          if ((($a = intval.$to_s()['$!='](current.$to_s())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($rb_plus(current['$[]'](0).$ord(), 1)).$chr()
            } else {
            return $rb_plus(intval, 1)
          };
        };
      }, TMP_18.$$arity = 1);

      Opal.defn(self, '$register', TMP_19 = function ːregister(type, value, force) {
        var $a, $b, $c, self = this, $case = nil, id = nil, reftext = nil;

        if (force == null) {
          force = false;
        }
        return (function() {$case = type;if ("ids"['$===']($case)) {$b = [].concat(Opal.to_a(value)), $a = Opal.to_ary($b), id = ($a[0] == null ? nil : $a[0]), reftext = ($a[1] == null ? nil : $a[1]), $b;
        ((($a = reftext) !== false && $a !== nil && $a != null) ? $a : reftext = $rb_plus($rb_plus("[", id), "]"));
        if (force !== false && force !== nil && force != null) {
          return self.references['$[]']("ids")['$[]='](id, reftext)
          } else {
          return ($a = id, $b = self.references['$[]']("ids"), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, reftext)))
        };}else if ("footnotes"['$===']($case) || "indexterms"['$===']($case)) {return self.references['$[]'](type)['$<<'](value)}else {if ((($a = self.options['$[]']("catalog_assets")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.references['$[]'](type)['$<<'](value)
          } else {
          return nil
        }}})();
      }, TMP_19.$$arity = -3);

      Opal.defn(self, '$footnotes?', TMP_20 = function() {
        var self = this;

        return self.references['$[]']("footnotes")['$empty?']()['$!']();
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$footnotes', TMP_21 = function ːfootnotes() {
        var self = this;

        return self.references['$[]']("footnotes");
      }, TMP_21.$$arity = 0);

      Opal.defn(self, '$nested?', TMP_22 = function() {
        var self = this;

        return self.parent_document['$!']()['$!']();
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$embedded?', TMP_23 = function() {
        var self = this;

        return self.attributes['$key?']("embedded");
      }, TMP_23.$$arity = 0);

      Opal.defn(self, '$extensions?', TMP_24 = function() {
        var self = this;

        return self.extensions['$!']()['$!']();
      }, TMP_24.$$arity = 0);

      Opal.defn(self, '$source', TMP_25 = function ːsource() {
        var $a, self = this;

        if ((($a = self.reader) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.reader.$source()
          } else {
          return nil
        };
      }, TMP_25.$$arity = 0);

      Opal.defn(self, '$source_lines', TMP_26 = function ːsource_lines() {
        var $a, self = this;

        if ((($a = self.reader) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.reader.$source_lines()
          } else {
          return nil
        };
      }, TMP_26.$$arity = 0);

      Opal.defn(self, '$doctype', TMP_27 = function ːdoctype() {
        var $a, self = this;

        return ((($a = self.doctype) !== false && $a !== nil && $a != null) ? $a : self.doctype = self.attributes['$[]']("doctype"));
      }, TMP_27.$$arity = 0);

      Opal.defn(self, '$backend', TMP_28 = function ːbackend() {
        var $a, self = this;

        return ((($a = self.backend) !== false && $a !== nil && $a != null) ? $a : self.backend = self.attributes['$[]']("backend"));
      }, TMP_28.$$arity = 0);

      Opal.defn(self, '$basebackend?', TMP_29 = function(base) {
        var self = this;

        return self.attributes['$[]']("basebackend")['$=='](base);
      }, TMP_29.$$arity = 1);

      Opal.defn(self, '$title', TMP_30 = function ːtitle() {
        var self = this;

        return self.attributes['$[]']("title");
      }, TMP_30.$$arity = 0);

      Opal.defn(self, '$title=', TMP_31 = function(title) {
        var $a, $b, self = this;

        ((($a = self.header) !== false && $a !== nil && $a != null) ? $a : self.header = $scope.get('Section').$new(self, 0));
        return (($a = [title]), $b = self.header, $b['$title='].apply($b, $a), $a[$a.length-1]);
      }, TMP_31.$$arity = 1);

      Opal.defn(self, '$doctitle', TMP_32 = function ːdoctitle(opts) {
        var $a, $b, self = this, val = nil, sect = nil, separator = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = ((val = self.attributes['$[]']("title")['$nil_or_empty?']()))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          val = self.$title()
        } else if ((($a = ($b = (sect = self.$first_section()), $b !== false && $b !== nil && $b != null ?sect['$title?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          val = sect.$title()
        } else if ((($a = ($b = opts['$[]']("use_fallback"), $b !== false && $b !== nil && $b != null ?(val = self.attributes['$[]']("untitled-label")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = (separator = opts['$[]']("partition"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Title').$new(val, opts.$merge($hash2(["separator"], {"separator": ((function() {if (separator['$=='](true)) {
            return self.attributes['$[]']("title-separator")
            } else {
            return separator
          }; return nil; })())})))
        } else if ((($a = ($b = opts['$[]']("sanitize"), $b !== false && $b !== nil && $b != null ?val['$include?']("<") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val.$gsub($scope.get('XmlSanitizeRx'), "").$tr_s(" ", " ").$strip()
          } else {
          return val
        };
      }, TMP_32.$$arity = -1);

      Opal.alias(self, 'name', 'doctitle');

      Opal.defn(self, '$author', TMP_33 = function ːauthor() {
        var self = this;

        return self.attributes['$[]']("author");
      }, TMP_33.$$arity = 0);

      Opal.defn(self, '$revdate', TMP_34 = function ːrevdate() {
        var self = this;

        return self.attributes['$[]']("revdate");
      }, TMP_34.$$arity = 0);

      Opal.defn(self, '$notitle', TMP_35 = function ːnotitle() {
        var $a, self = this;

        return ($a = self.attributes['$key?']("showtitle")['$!'](), $a !== false && $a !== nil && $a != null ?self.attributes['$key?']("notitle") : $a);
      }, TMP_35.$$arity = 0);

      Opal.defn(self, '$noheader', TMP_36 = function ːnoheader() {
        var self = this;

        return self.attributes['$key?']("noheader");
      }, TMP_36.$$arity = 0);

      Opal.defn(self, '$nofooter', TMP_37 = function ːnofooter() {
        var self = this;

        return self.attributes['$key?']("nofooter");
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$first_section', TMP_39 = function ːfirst_section() {
        var $a, $b, TMP_38, $c, self = this;

        if ((($a = self['$has_header?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.header
          } else {
          return ($a = ($b = (((($c = self.blocks) !== false && $c !== nil && $c != null) ? $c : []))).$find, $a.$$p = (TMP_38 = function(e){var self = TMP_38.$$s || this;
if (e == null) e = nil;
          return e.$context()['$==']("section")}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b)
        };
      }, TMP_39.$$arity = 0);

      Opal.defn(self, '$has_header?', TMP_40 = function() {
        var $a, self = this;

        if ((($a = self.header) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
          } else {
          return false
        };
      }, TMP_40.$$arity = 0);

      Opal.alias(self, 'header?', 'has_header?');

      Opal.defn(self, '$<<', TMP_41 = function(block) {
        var $a, $b, self = this, $iter = TMP_41.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_41.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if (block.$context()['$==']("section")) {
          self.$assign_index(block)};
        return ($a = ($b = self, Opal.find_super_dispatcher(self, '<<', TMP_41, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      }, TMP_41.$$arity = 1);

      Opal.defn(self, '$finalize_header', TMP_42 = function ːfinalize_header(unrooted_attributes, header_valid) {
        var self = this;

        if (header_valid == null) {
          header_valid = true;
        }
        self.$clear_playback_attributes(unrooted_attributes);
        self.$save_attributes();
        if (header_valid !== false && header_valid !== nil && header_valid != null) {
          } else {
          unrooted_attributes['$[]=']("invalid-header", true)
        };
        return unrooted_attributes;
      }, TMP_42.$$arity = -2);

      Opal.defn(self, '$save_attributes', TMP_44 = function ːsave_attributes() {
        var $a, $b, $c, TMP_43, self = this, attrs = nil, val = nil, toc_position_val = nil, toc_val = nil, toc_placement = nil, default_toc_position = nil, default_toc_class = nil, position = nil, $case = nil;

        if (((attrs = self.attributes))['$[]']("basebackend")['$==']("docbook")) {
          if ((($a = ((($b = self['$attribute_locked?']("toc")) !== false && $b !== nil && $b != null) ? $b : self.attributes_modified['$include?']("toc"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            attrs['$[]=']("toc", "")
          };
          if ((($a = ((($b = self['$attribute_locked?']("sectnums")) !== false && $b !== nil && $b != null) ? $b : self.attributes_modified['$include?']("sectnums"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            attrs['$[]=']("sectnums", "")
          };};
        if ((($a = ((($b = attrs['$key?']("doctitle")) !== false && $b !== nil && $b != null) ? $b : ((val = self.$doctitle()))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          attrs['$[]=']("doctitle", val)
        };
        if ((($a = self.id) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.id = attrs['$[]']("css-signature")
        };
        toc_position_val = (function() {if ((($a = (toc_val = ((function() {if ((($b = attrs.$delete("toc2")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return "left"
          } else {
          return attrs['$[]']("toc")
        }; return nil; })()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = (toc_placement = attrs.$fetch("toc-placement", "macro")), $b !== false && $b !== nil && $b != null ?toc_placement['$!=']("auto") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return toc_placement
            } else {
            return attrs['$[]']("toc-position")
          }
          } else {
          return nil
        }; return nil; })();
        if ((($a = (($b = toc_val !== false && toc_val !== nil && toc_val != null) ? (((($c = toc_val['$empty?']()['$!']()) !== false && $c !== nil && $c != null) ? $c : toc_position_val['$nil_or_empty?']()['$!']())) : toc_val)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          default_toc_position = "left";
          default_toc_class = "toc2";
          if ((($a = toc_position_val['$nil_or_empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            position = toc_position_val
          } else if ((($a = toc_val['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            position = toc_val
            } else {
            position = default_toc_position
          };
          attrs['$[]=']("toc", "");
          attrs['$[]=']("toc-placement", "auto");
          $case = position;if ("left"['$===']($case) || "<"['$===']($case) || "&lt;"['$===']($case)) {attrs['$[]=']("toc-position", "left")}else if ("right"['$===']($case) || ">"['$===']($case) || "&gt;"['$===']($case)) {attrs['$[]=']("toc-position", "right")}else if ("top"['$===']($case) || "^"['$===']($case)) {attrs['$[]=']("toc-position", "top")}else if ("bottom"['$===']($case) || "v"['$===']($case)) {attrs['$[]=']("toc-position", "bottom")}else if ("preamble"['$===']($case) || "macro"['$===']($case)) {attrs['$[]=']("toc-position", "content");
          attrs['$[]=']("toc-placement", position);
          default_toc_class = nil;}else {attrs.$delete("toc-position");
          default_toc_class = nil;};
          if (default_toc_class !== false && default_toc_class !== nil && default_toc_class != null) {
            ($a = "toc-class", $b = attrs, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, default_toc_class)))};};
        if ((($a = attrs['$key?']("compat-mode")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = attrs['$has_key?']("language")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attrs['$[]=']("source-language", attrs['$[]']("language"))};
          self.compat_mode = true;
          } else {
          self.compat_mode = false
        };
        self.outfilesuffix = attrs['$[]']("outfilesuffix");
        self.header_attributes = attrs.$dup();
        if ((($a = self.parent_document) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return ($a = ($b = $scope.get('FLEXIBLE_ATTRIBUTES')).$each, $a.$$p = (TMP_43 = function(name){var self = TMP_43.$$s || this, $d, $e;
            if (self.attribute_overrides == null) self.attribute_overrides = nil;
if (name == null) name = nil;
          if ((($d = ($e = self.attribute_overrides['$key?'](name), $e !== false && $e !== nil && $e != null ?self.attribute_overrides['$[]'](name) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return self.attribute_overrides.$delete(name)
              } else {
              return nil
            }}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43), $a).call($b)
        };
      }, TMP_44.$$arity = 0);

      Opal.defn(self, '$restore_attributes', TMP_45 = function ːrestore_attributes() {
        var $a, self = this;

        if ((($a = self.parent_document) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.callouts.$rewind()
        };
        return self.attributes = self.header_attributes;
      }, TMP_45.$$arity = 0);

      Opal.defn(self, '$clear_playback_attributes', TMP_46 = function ːclear_playback_attributes(attributes) {
        var self = this;

        return attributes.$delete("attribute_entries");
      }, TMP_46.$$arity = 1);

      Opal.defn(self, '$playback_attributes', TMP_48 = function ːplayback_attributes(block_attributes) {
        var $a, $b, TMP_47, self = this;

        if ((($a = block_attributes['$key?']("attribute_entries")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = block_attributes['$[]']("attribute_entries")).$each, $a.$$p = (TMP_47 = function(entry){var self = TMP_47.$$s || this, $c, name = nil;
            if (self.attributes == null) self.attributes = nil;
if (entry == null) entry = nil;
          name = entry.$name();
            if ((($c = entry.$negate()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              self.attributes.$delete(name);
              if (name['$==']("compat-mode")) {
                return self.compat_mode = false
                } else {
                return nil
              };
              } else {
              self.attributes['$[]='](name, entry.$value());
              if (name['$==']("compat-mode")) {
                return self.compat_mode = true
                } else {
                return nil
              };
            };}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47), $a).call($b)
          } else {
          return nil
        };
      }, TMP_48.$$arity = 1);

      Opal.defn(self, '$set_attribute', TMP_49 = function ːset_attribute(name, value) {
        var $a, self = this, resolved_value = nil, $case = nil;

        if ((($a = self['$attribute_locked?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false
          } else {
          if ((($a = self.max_attribute_value_size) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            resolved_value = (self.$apply_attribute_value_subs(value)).$limit(self.max_attribute_value_size)
            } else {
            resolved_value = self.$apply_attribute_value_subs(value)
          };
          $case = name;if ("backend"['$===']($case)) {self.$update_backend_attributes(resolved_value, self.attributes_modified['$delete?']("htmlsyntax")['$!']()['$!']())}else if ("doctype"['$===']($case)) {self.$update_doctype_attributes(resolved_value)}else {self.attributes['$[]='](name, resolved_value)};
          self.attributes_modified['$<<'](name);
          return true;
        };
      }, TMP_49.$$arity = 2);

      Opal.defn(self, '$delete_attribute', TMP_50 = function ːdelete_attribute(name) {
        var $a, self = this;

        if ((($a = self['$attribute_locked?'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false
          } else {
          self.attributes.$delete(name);
          self.attributes_modified['$<<'](name);
          return true;
        };
      }, TMP_50.$$arity = 1);

      Opal.defn(self, '$attribute_locked?', TMP_51 = function(name) {
        var self = this;

        return self.attribute_overrides['$key?'](name);
      }, TMP_51.$$arity = 1);

      Opal.defn(self, '$apply_attribute_value_subs', TMP_52 = function ːapply_attribute_value_subs(value) {
        var $a, self = this, m = nil, subs = nil;

        if ((($a = (m = $scope.get('AttributeEntryPassMacroRx').$match(value))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = m['$[]'](1)['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            subs = self.$resolve_pass_subs(m['$[]'](1));
            if ((($a = subs['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return m['$[]'](2)
              } else {
              return (self.$apply_subs(m['$[]'](2), subs))
            };
            } else {
            return m['$[]'](2)
          }
          } else {
          return self.$apply_header_subs(value)
        };
      }, TMP_52.$$arity = 1);

      Opal.defn(self, '$update_backend_attributes', TMP_53 = function ːupdate_backend_attributes(new_backend, force) {
        var $a, $b, $c, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, resolved_name = nil, new_basebackend = nil, new_filetype = nil, new_outfilesuffix = nil, current_filetype = nil, page_width = nil;

        if (force == null) {
          force = false;
        }
        if ((($a = ((($b = force) !== false && $b !== nil && $b != null) ? $b : ((($c = new_backend !== false && new_backend !== nil && new_backend != null) ? new_backend['$!='](self.attributes['$[]']("backend")) : new_backend)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrs = self.attributes;
          current_backend = attrs['$[]']("backend");
          current_basebackend = attrs['$[]']("basebackend");
          current_doctype = attrs['$[]']("doctype");
          if ((($a = new_backend['$start_with?']("xhtml")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attrs['$[]=']("htmlsyntax", "xml");
            new_backend = new_backend['$[]']($range(1, -1, false));
          } else if ((($a = new_backend['$start_with?']("html")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (attrs['$[]']("htmlsyntax")['$==']("xml")) {
              } else {
              attrs['$[]=']("htmlsyntax", "html")
            }};
          if ((($a = (resolved_name = $scope.get('BACKEND_ALIASES')['$[]'](new_backend))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            new_backend = resolved_name};
          if (current_backend !== false && current_backend !== nil && current_backend != null) {
            attrs.$delete("backend-" + (current_backend));
            if (current_doctype !== false && current_doctype !== nil && current_doctype != null) {
              attrs.$delete("backend-" + (current_backend) + "-doctype-" + (current_doctype))};};
          if (current_doctype !== false && current_doctype !== nil && current_doctype != null) {
            attrs['$[]=']("doctype-" + (current_doctype), "");
            attrs['$[]=']("backend-" + (new_backend) + "-doctype-" + (current_doctype), "");};
          attrs['$[]=']("backend", new_backend);
          attrs['$[]=']("backend-" + (new_backend), "");
          if ((($a = (($scope.get('Converter')).$$scope.get('BackendInfo'))['$===']((self.converter = self.$create_converter()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            new_basebackend = self.converter.$basebackend();
            if ((($a = self['$attribute_locked?']("outfilesuffix")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              attrs['$[]=']("outfilesuffix", self.converter.$outfilesuffix())
            };
            new_filetype = self.converter.$filetype();
            } else {
            new_basebackend = new_backend.$sub($scope.get('TrailingDigitsRx'), "");
            new_outfilesuffix = ((($a = $scope.get('DEFAULT_EXTENSIONS')['$[]'](new_basebackend)) !== false && $a !== nil && $a != null) ? $a : ".html");
            new_filetype = new_outfilesuffix['$[]']($range(1, -1, false));
            if ((($a = self['$attribute_locked?']("outfilesuffix")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              attrs['$[]=']("outfilesuffix", new_outfilesuffix)
            };
          };
          if ((($a = (current_filetype = attrs['$[]']("filetype"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attrs.$delete("filetype-" + (current_filetype))};
          attrs['$[]=']("filetype", new_filetype);
          attrs['$[]=']("filetype-" + (new_filetype), "");
          if ((($a = (page_width = $scope.get('DEFAULT_PAGE_WIDTHS')['$[]'](new_basebackend))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attrs['$[]=']("pagewidth", page_width)
            } else {
            attrs.$delete("pagewidth")
          };
          if ((($a = new_basebackend['$!='](current_basebackend)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (current_basebackend !== false && current_basebackend !== nil && current_basebackend != null) {
              attrs.$delete("basebackend-" + (current_basebackend));
              if (current_doctype !== false && current_doctype !== nil && current_doctype != null) {
                attrs.$delete("basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype))};};
            attrs['$[]=']("basebackend", new_basebackend);
            attrs['$[]=']("basebackend-" + (new_basebackend), "");
            if (current_doctype !== false && current_doctype !== nil && current_doctype != null) {
              attrs['$[]=']("basebackend-" + (new_basebackend) + "-doctype-" + (current_doctype), "")};};
          return self.backend = nil;
          } else {
          return nil
        };
      }, TMP_53.$$arity = -2);

      Opal.defn(self, '$update_doctype_attributes', TMP_54 = function ːupdate_doctype_attributes(new_doctype) {
        var $a, $b, self = this, attrs = nil, current_doctype = nil, current_backend = nil, current_basebackend = nil;

        if ((($a = (($b = new_doctype !== false && new_doctype !== nil && new_doctype != null) ? new_doctype['$!='](self.attributes['$[]']("doctype")) : new_doctype)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attrs = self.attributes;
          current_doctype = attrs['$[]']("doctype");
          current_backend = attrs['$[]']("backend");
          current_basebackend = attrs['$[]']("basebackend");
          if (current_doctype !== false && current_doctype !== nil && current_doctype != null) {
            attrs.$delete("doctype-" + (current_doctype));
            if (current_backend !== false && current_backend !== nil && current_backend != null) {
              attrs.$delete("backend-" + (current_backend) + "-doctype-" + (current_doctype))};
            if (current_basebackend !== false && current_basebackend !== nil && current_basebackend != null) {
              attrs.$delete("basebackend-" + (current_basebackend) + "-doctype-" + (current_doctype))};};
          attrs['$[]=']("doctype", new_doctype);
          attrs['$[]=']("doctype-" + (new_doctype), "");
          if (current_backend !== false && current_backend !== nil && current_backend != null) {
            attrs['$[]=']("backend-" + (current_backend) + "-doctype-" + (new_doctype), "")};
          if (current_basebackend !== false && current_basebackend !== nil && current_basebackend != null) {
            attrs['$[]=']("basebackend-" + (current_basebackend) + "-doctype-" + (new_doctype), "")};
          return self.doctype = nil;
          } else {
          return nil
        };
      }, TMP_54.$$arity = 1);

      Opal.defn(self, '$create_converter', TMP_55 = function ːcreate_converter() {
        var $a, self = this, converter_opts = nil, template_dirs = nil, template_dir = nil, converter = nil, converter_factory = nil;

        converter_opts = $hash2([], {});
        converter_opts['$[]=']("htmlsyntax", self.attributes['$[]']("htmlsyntax"));
        template_dirs = (function() {if ((($a = (template_dir = self.options['$[]']("template_dir"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return converter_opts['$[]=']("template_dirs", [template_dir])
        } else if ((($a = (template_dirs = self.options['$[]']("template_dirs"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return converter_opts['$[]=']("template_dirs", template_dirs)
          } else {
          return nil
        }; return nil; })();
        if (template_dirs !== false && template_dirs !== nil && template_dirs != null) {
          converter_opts['$[]=']("template_cache", self.options.$fetch("template_cache", true));
          converter_opts['$[]=']("template_engine", self.options['$[]']("template_engine"));
          converter_opts['$[]=']("template_engine_options", self.options['$[]']("template_engine_options"));
          converter_opts['$[]=']("eruby", self.options['$[]']("eruby"));
          converter_opts['$[]=']("safe", self.safe);};
        if ((($a = (converter = self.options['$[]']("converter"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          converter_factory = (($scope.get('Converter')).$$scope.get('Factory')).$new(Opal.get('Hash')['$[]'](self.$backend(), converter))
          } else {
          converter_factory = (($scope.get('Converter')).$$scope.get('Factory')).$default(false)
        };
        return converter_factory.$create(self.$backend(), converter_opts);
      }, TMP_55.$$arity = 0);

      Opal.defn(self, '$convert', TMP_57 = function ːconvert(opts) {
        var $a, $b, TMP_56, self = this, block = nil, output = nil, transform = nil, exts = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = self.parsed) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$parse()
        };
        if ((($a = ((($b = $rb_ge(self.safe, (($scope.get('SafeMode')).$$scope.get('SERVER')))) !== false && $b !== nil && $b != null) ? $b : opts['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          if ((($a = (self.attributes['$[]=']("outfile", opts['$[]']("outfile")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.attributes.$delete("outfile")
          };
          if ((($a = (self.attributes['$[]=']("outdir", opts['$[]']("outdir")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.attributes.$delete("outdir")
          };
        };
        if ((($a = self.converter) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$fail("asciidoctor: FAILED: missing converter for backend '" + (self.$backend()) + "'. Processing aborted.")
        };
        if (self.$doctype()['$==']("inline")) {
          if ((($a = ($b = (block = self.blocks['$[]'](0)), $b !== false && $b !== nil && $b != null ?block.$content_model()['$!=']("compound") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            output = block.$content()
            } else {
            output = nil
          }
          } else {
          transform = (function() {if ((($a = ((function() {if ((($b = (opts['$key?']("header_footer"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return opts['$[]']("header_footer")
            } else {
            return self.options['$[]']("header_footer")
          }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "document"
            } else {
            return "embedded"
          }; return nil; })();
          output = self.converter.$convert(self, transform);
        };
        if ((($a = self.parent_document) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else if ((($a = ($b = (exts = self.extensions), $b !== false && $b !== nil && $b != null ?exts['$postprocessors?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = exts.$postprocessors()).$each, $a.$$p = (TMP_56 = function(ext){var self = TMP_56.$$s || this;
if (ext == null) ext = nil;
          return output = ext.$process_method()['$[]'](self, output)}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56), $a).call($b)};
        return output;
      }, TMP_57.$$arity = -1);

      Opal.alias(self, 'render', 'convert');

      Opal.defn(self, '$write', TMP_59 = function ːwrite(output, target) {
        var $a, $b, TMP_58, self = this;

        if ((($a = $scope.get('Writer')['$==='](self.converter)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.converter.$write(output, target)
          } else {
          if ((($a = target['$respond_to?']("write")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = output['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              target.$write(output.$chomp());
              target.$write($scope.get('EOL'));
            }
            } else {
            ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_58 = function(f){var self = TMP_58.$$s || this;
if (f == null) f = nil;
            return f.$write(output)}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58), $a).call($b, target, "w")
          };
          return nil;
        };
      }, TMP_59.$$arity = 2);

      Opal.defn(self, '$content', TMP_60 = function ːcontent() {
        var $a, $b, self = this, $iter = TMP_60.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_60.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        self.attributes.$delete("title");
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'content', TMP_60, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      }, TMP_60.$$arity = 0);

      Opal.defn(self, '$docinfo', TMP_62 = function ːdocinfo(location, suffix) {
        var $a, $b, $c, TMP_61, self = this, qualifier = nil, docinfodir = nil, content = nil, docinfo = nil, docinfo_filename = nil, docinfo_path = nil, docinfosubs = nil, content2 = nil, contentx = nil;

        if (location == null) {
          location = "head";
        }
        if (suffix == null) {
          suffix = nil;
        }
        if ((($a = $rb_ge(self.$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
          } else {
          qualifier = (function() {if (location['$==']("head")) {
            return nil
            } else {
            return "-" + (location)
          }; return nil; })();
          if (suffix !== false && suffix !== nil && suffix != null) {
            } else {
            suffix = self.outfilesuffix
          };
          docinfodir = self.attributes['$[]']("docinfodir");
          content = nil;
          if ((($a = ((docinfo = self.attributes['$[]']("docinfo")))['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.attributes['$key?']("docinfo2")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              docinfo = ["private", "shared"]
            } else if ((($a = self.attributes['$key?']("docinfo1")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              docinfo = ["shared"]
              } else {
              docinfo = (function() {if (docinfo !== false && docinfo !== nil && docinfo != null) {
                return ["private"]
                } else {
                return nil
              }; return nil; })()
            }
            } else {
            docinfo = ($a = ($b = docinfo.$split(",")).$map, $a.$$p = "strip".$to_proc(), $a).call($b)
          };
          if (docinfo !== false && docinfo !== nil && docinfo != null) {
            docinfo_filename = "docinfo" + (qualifier) + (suffix);
            if ((($a = (docinfo['$&'](["shared", "shared-" + (location)]))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              docinfo_path = self.$normalize_system_path(docinfo_filename, docinfodir);
              if ((($a = (content = self.$read_asset(docinfo_path, $hash2(["normalize"], {"normalize": true})))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                if ((($a = (((($c = docinfosubs) !== false && $c !== nil && $c != null) ? $c : docinfosubs = self.$resolve_docinfo_subs()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  content = (function() {if ((($a = (docinfosubs['$==']("attributes"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                    return self.$sub_attributes(content)
                    } else {
                    return self.$apply_subs(content, docinfosubs)
                  }; return nil; })()}};
            };
            if ((($a = ((($c = self.attributes['$[]']("docname")['$nil_or_empty?']()) !== false && $c !== nil && $c != null) ? $c : (docinfo['$&'](["private", "private-" + (location)]))['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              docinfo_path = self.$normalize_system_path("" + (self.attributes['$[]']("docname")) + "-" + (docinfo_filename), docinfodir);
              if ((($a = (content2 = self.$read_asset(docinfo_path, $hash2(["normalize"], {"normalize": true})))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                if ((($a = (((($c = docinfosubs) !== false && $c !== nil && $c != null) ? $c : docinfosubs = self.$resolve_docinfo_subs()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  content2 = (function() {if ((($a = (docinfosubs['$==']("attributes"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                    return self.$sub_attributes(content2)
                    } else {
                    return self.$apply_subs(content2, docinfosubs)
                  }; return nil; })()};
                content = (function() {if (content !== false && content !== nil && content != null) {
                  return "" + (content) + ($scope.get('EOL')) + (content2)
                  } else {
                  return content2
                }; return nil; })();};
            };};
          if ((($a = ($c = self.extensions, $c !== false && $c !== nil && $c != null ?self['$docinfo_processors?'](location) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            contentx = $rb_times(($a = ($c = self.docinfo_processor_extensions['$[]'](location)).$map, $a.$$p = (TMP_61 = function(candidate){var self = TMP_61.$$s || this;
if (candidate == null) candidate = nil;
            return candidate.$process_method()['$[]'](self)}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($c).$compact(), $scope.get('EOL'));
            content = (function() {if (content !== false && content !== nil && content != null) {
              return "" + (content) + ($scope.get('EOL')) + (contentx)
              } else {
              return contentx
            }; return nil; })();};
          return "" + (content);
        };
      }, TMP_62.$$arity = -1);

      Opal.defn(self, '$resolve_docinfo_subs', TMP_63 = function ːresolve_docinfo_subs() {
        var $a, self = this, subs = nil;

        if ((($a = self.attributes['$key?']("docinfosubs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          subs = self.$resolve_subs(self.attributes['$[]']("docinfosubs"), "block", nil, "docinfo");
          if ((($a = subs['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return subs
          };
          } else {
          return "attributes"
        };
      }, TMP_63.$$arity = 0);

      Opal.defn(self, '$docinfo_processors?', TMP_64 = function(location) {
        var $a, $b, self = this;

        if (location == null) {
          location = "head";
        }
        if ((($a = self.docinfo_processor_extensions['$key?'](location)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.docinfo_processor_extensions['$[]'](location)['$!='](false)
        } else if ((($a = ($b = self.extensions, $b !== false && $b !== nil && $b != null ?self.document.$extensions()['$docinfo_processors?'](location) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.docinfo_processor_extensions['$[]='](location, self.document.$extensions().$docinfo_processors(location)))['$!']()['$!']()
          } else {
          return self.docinfo_processor_extensions['$[]='](location, false)
        };
      }, TMP_64.$$arity = -1);

      return (Opal.defn(self, '$to_s', TMP_65 = function ːto_s() {
        var $a, self = this;

        return "#<" + (self.$class()) + "@" + (self.$object_id()) + " {doctype: " + (self.$doctype().$inspect()) + ", doctitle: " + (((function() {if ((($a = self.header['$!='](nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.header.$title()
          } else {
          return nil
        }; return nil; })()).$inspect()) + ", blocks: " + (self.blocks.$size()) + "}>";
      }, TMP_65.$$arity = 0), nil) && 'to_s';
    })($scope.base, $scope.get('AbstractBlock'))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/inline"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_reader', '$attr_accessor', '$[]', '$nil_or_empty?', '$update_attributes', '$convert', '$converter']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Inline(){};
      var self = $Inline = $klass($base, $super, 'Inline', $Inline);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      self.$attr_reader("text");

      self.$attr_reader("type");

      self.$attr_accessor("target");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(parent, context, text, opts) {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, more_attributes = nil;

        if (text == null) {
          text = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b, parent, context);
        self.node_name = "inline_" + (context);
        self.text = text;
        self.id = opts['$[]']("id");
        self.type = opts['$[]']("type");
        self.target = opts['$[]']("target");
        if ((($a = ((more_attributes = opts['$[]']("attributes")))['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return self.$update_attributes(more_attributes)
        };
      }, TMP_1.$$arity = -3);

      Opal.defn(self, '$block?', TMP_2 = function() {
        var self = this;

        return false;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$inline?', TMP_3 = function() {
        var self = this;

        return true;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$convert', TMP_4 = function ːconvert() {
        var self = this;

        return self.$converter().$convert(self);
      }, TMP_4.$$arity = 0);

      return Opal.alias(self, 'render', 'convert');
    })($scope.base, $scope.get('AbstractNode'))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/list"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$next_list', '$callouts', '$class', '$object_id', '$inspect', '$size', '$items', '$attr_accessor', '$level', '$!', '$nil_or_empty?', '$apply_subs', '$empty?', '$===', '$[]', '$outline?', '$simple?', '$context', '$option?', '$shift', '$blocks', '$unshift', '$lines', '$source', '$parent']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $List(){};
      var self = $List = $klass($base, $super, 'List', $List);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

      def.context = def.document = def.style = nil;
      Opal.alias(self, 'items', 'blocks');

      Opal.alias(self, 'content', 'blocks');

      Opal.alias(self, 'items?', 'blocks?');

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(parent, context) {
        var $a, $b, self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_1.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$outline?', TMP_2 = function() {
        var $a, self = this;

        return ((($a = self.context['$==']("ulist")) !== false && $a !== nil && $a != null) ? $a : self.context['$==']("olist"));
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$convert', TMP_3 = function ːconvert() {
        var $a, $b, $c, self = this, $iter = TMP_3.$$p, $yield = $iter || nil, result = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_3.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if (self.context['$==']("colist")) {
          result = ($a = ($b = self, Opal.find_super_dispatcher(self, 'convert', TMP_3, false)), $a.$$p = $iter, $a).apply($b, $zuper);
          self.document.$callouts().$next_list();
          return result;
          } else {
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'convert', TMP_3, false)), $a.$$p = $iter, $a).apply($c, $zuper)
        };
      }, TMP_3.$$arity = 0);

      Opal.alias(self, 'render', 'convert');

      return (Opal.defn(self, '$to_s', TMP_4 = function ːto_s() {
        var self = this;

        return "#<" + (self.$class()) + "@" + (self.$object_id()) + " {context: " + (self.context.$inspect()) + ", style: " + (self.style.$inspect()) + ", items: " + (self.$items().$size()) + "}>";
      }, TMP_4.$$arity = 0), nil) && 'to_s';
    })($scope.base, $scope.get('AbstractBlock'));

    (function($base, $super) {
      function $ListItem(){};
      var self = $ListItem = $klass($base, $super, 'ListItem', $ListItem);

      var def = self.$$proto, $scope = self.$$scope, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

      def.text = def.blocks = nil;
      Opal.alias(self, 'list', 'parent');

      self.$attr_accessor("marker");

      Opal.defn(self, '$initialize', TMP_5 = function ːinitialize(parent, text) {
        var $a, $b, self = this, $iter = TMP_5.$$p, $yield = $iter || nil;

        if (text == null) {
          text = nil;
        }
        TMP_5.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_5, false)), $a.$$p = null, $a).call($b, parent, "list_item");
        self.text = text;
        return self.level = parent.$level();
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$text?', TMP_6 = function() {
        var self = this;

        return self.text['$nil_or_empty?']()['$!']();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$text', TMP_7 = function ːtext() {
        var self = this;

        return self.$apply_subs(self.text);
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$simple?', TMP_8 = function() {
        var $a, $b, $c, self = this, blk = nil;

        return ((($a = self.blocks['$empty?']()) !== false && $a !== nil && $a != null) ? $a : (($b = (($c = self.blocks.$size()['$=='](1)) ? $scope.get('List')['$===']((blk = self.blocks['$[]'](0))) : self.blocks.$size()['$=='](1)), $b !== false && $b !== nil && $b != null ?blk['$outline?']() : $b)));
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$compound?', TMP_9 = function() {
        var self = this;

        return self['$simple?']()['$!']();
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$fold_first', TMP_10 = function ːfold_first(continuation_connects_first_block, content_adjacent) {
        var $a, $b, $c, $d, $e, $f, self = this, first_block = nil, block = nil;

        if (continuation_connects_first_block == null) {
          continuation_connects_first_block = false;
        }
        if (content_adjacent == null) {
          content_adjacent = false;
        }
        if ((($a = ($b = ($c = (first_block = self.blocks['$[]'](0)), $c !== false && $c !== nil && $c != null ?$scope.get('Block')['$==='](first_block) : $c), $b !== false && $b !== nil && $b != null ?(((($c = ((($d = first_block.$context()['$==']("paragraph")) ? continuation_connects_first_block['$!']() : first_block.$context()['$==']("paragraph")))) !== false && $c !== nil && $c != null) ? $c : (($d = ($e = (((($f = content_adjacent) !== false && $f !== nil && $f != null) ? $f : continuation_connects_first_block['$!']())), $e !== false && $e !== nil && $e != null ?first_block.$context()['$==']("literal") : $e), $d !== false && $d !== nil && $d != null ?first_block['$option?']("listparagraph") : $d)))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          block = self.$blocks().$shift();
          if ((($a = self.text['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            block.$lines().$unshift(self.text)
          };
          self.text = block.$source();};
        return nil;
      }, TMP_10.$$arity = -1);

      return (Opal.defn(self, '$to_s', TMP_11 = function ːto_s() {
        var $a, self = this;

        return "#<" + (self.$class()) + "@" + (self.$object_id()) + " {list_context: " + (self.$parent().$context().$inspect()) + ", text: " + (self.text.$inspect()) + ", blocks: " + ((((($a = self.blocks) !== false && $a !== nil && $a != null) ? $a : [])).$size()) + "}>";
      }, TMP_11.$$arity = 0), nil) && 'to_s';
    })($scope.base, $scope.get('AbstractBlock'));
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/parser"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$new', '$lambda', '$start_with?', '$=~', '$is_delimited_block?', '$raise', '$parse_document_header', '$[]', '$has_more_lines?', '$next_section', '$<<', '$parse_block_metadata_lines', '$is_next_line_document_title?', '$has_key?', '$finalize_header', '$nil_or_empty?', '$attributes', '$title=', '$sourcemap', '$cursor', '$parse_section_title', '$id=', '$set_attribute', '$delete', '$source_location=', '$header', '$[]=', '$id', '$parse_style_attribute', '$key?', '$parse_header_metadata', '$==', '$doctype', '$parse_manpage_header', '$match', '$sub_attributes', '$downcase', '$rstrip', '$strip', '$warn', '$prev_line_info', '$skip_blank_lines', '$is_next_line_section?', '$initialize_section', '$level', '$tr_s', '$join', '$read_lines_until', '$backend', '$context', '$empty?', '$blocks', '$has_header?', '$!', '$!=', '$attr?', '$attr', '$document', '$special', '$include?', '$sectname', '$+', '$to_i', '$>', '$line_info', '$size', '$*', '$next_block', '$blocks?', '$style', '$context=', '$style=', '$parent=', '$content_model', '$shift', '$unwrap_standalone_preamble', '$dup', '$fetch', '$extensions', '$block_macros?', '$===', '$parse_block_metadata_line', '$advance', '$read_line', '$terminator', '$to_s', '$masq', '$to_sym', '$registered_for_block?', '$strict_verbatim_paragraphs', '$unshift_line', '$markdown_syntax', '$chr', '$lstrip', '$>=', '$length', '$end_with?', '$parse_attributes', '$attribute_missing', '$clear', '$registered_for_block_macro?', '$config', '$each', '$process_method', '$replace', '$peek_line', '$path', '$-', '$lineno', '$next_list_item', '$callout_ids', '$callouts', '$items', '$next_list', '$next_outline_list', '$marker', '$find', '$next_labeled_list', '$is_section_title?', '$underline_style_section_titles', '$generate_id', '$level=', '$read_paragraph_lines', '$adjust_indentation!', '$set_option', '$catalog_inline_anchors', '$post_match', '$map!', '$split', '$pop', '$build_block', '$blockquote?', '$chop', '$tr', '$rekey', '$next_table', '$concat', '$title?', '$register', '$basename', '$sub_specialchars', '$assign_caption', '$ord', '$caption', '$caption=', '$title', '$update', '$lock_in_subs', '$sub?', '$catalog_callouts', '$source', '$remove_sub', '$block_terminates_paragraph', '$to_proc', '$<=', '$<', '$nil?', '$lines', '$parse_blocks', '$resolve_list_marker', '$items?', '$parent', '$scan', '$marker=', '$read_lines_for_list_item', '$skip_line_comments', '$unshift_lines', '$fold_first', '$text?', '$is_sibling_list_item?', '$delete_at', '$sectname=', '$special=', '$update_attributes', '$peek_lines', '$is_single_line_section_title?', '$is_two_line_section_title?', '$single_line_section_level', '$abs', '$line_length', '$section_level', '$process_attribute_entries', '$next_line_empty?', '$process_authors', '$apply_header_subs', '$map', '$each_with_index', '$push', '$to_a', '$process_attribute_entry', '$skip_comment_lines', '$store_attribute', '$sanitize_attribute_name', '$delete_attribute', '$save_to', '$resolve_ordered_list_marker', '$chomp', '$roman_numeral_to_int', '$parse_colspecs', '$create_columns', '$has_header_option=', '$format', '$starts_with_delimiter?', '$close_open_cell', '$parse_cellspec', '$delimiter', '$match_delimiter', '$buffer_has_unclosed_quotes?', '$pre_match', '$skip_matched_delimiter', '$buffer=', '$buffer', '$keep_cell_open', '$push_cellspec', '$close_cell', '$cell_open?', '$columns', '$assign_column_widths', '$partition_header_footer', '$upto', '$shorthand_property_syntax', '$each_char', '$call', '$sub!', '$gsub!', '$%', '$begin', '$gsub']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Parser(){};
      var self = $Parser = $klass($base, $super, 'Parser', $Parser);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_21, TMP_23, TMP_24, TMP_25, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41, TMP_44, TMP_50, TMP_51, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_58, TMP_59, TMP_60, TMP_64, TMP_65, TMP_69, TMP_77, TMP_78, TMP_80;

      Opal.cdecl($scope, 'BlockMatchData', $scope.get('Struct').$new("context", "masq", "tip", "terminator"));

      Opal.cdecl($scope, 'TabRx', /\t/);

      Opal.cdecl($scope, 'TabIndentRx', /^\t+/);

      Opal.cdecl($scope, 'StartOfBlockProc', ($a = ($b = self).$lambda, $a.$$p = (TMP_1 = function(l){var self = TMP_1.$$s || this, $c, $d;
if (l == null) l = nil;
      return ((($c = (($d = (l['$start_with?']("[")), $d !== false && $d !== nil && $d != null ?$scope.get('BlockAttributeLineRx')['$=~'](l) : $d))) !== false && $c !== nil && $c != null) ? $c : (self['$is_delimited_block?'](l)))}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b));

      Opal.cdecl($scope, 'StartOfListProc', ($a = ($c = self).$lambda, $a.$$p = (TMP_2 = function(l){var self = TMP_2.$$s || this;
if (l == null) l = nil;
      return $scope.get('AnyListRx')['$=~'](l)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($c));

      Opal.cdecl($scope, 'StartOfBlockOrListProc', ($a = ($d = self).$lambda, $a.$$p = (TMP_3 = function(l){var self = TMP_3.$$s || this, $e, $f, $g;
if (l == null) l = nil;
      return ((($e = ((($f = (self['$is_delimited_block?'](l))) !== false && $f !== nil && $f != null) ? $f : (($g = (l['$start_with?']("[")), $g !== false && $g !== nil && $g != null ?$scope.get('BlockAttributeLineRx')['$=~'](l) : $g)))) !== false && $e !== nil && $e != null) ? $e : $scope.get('AnyListRx')['$=~'](l))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($d));

      Opal.cdecl($scope, 'NoOp', nil);

      Opal.defn(self, '$initialize', TMP_4 = function ːinitialize() {
        var self = this;

        return self.$raise("Au contraire, mon frere. No lexer instances will be running around.");
      }, TMP_4.$$arity = 0);

      Opal.defs(self, '$parse', TMP_5 = function ːparse(reader, document, options) {
        var $a, $b, $c, self = this, block_attributes = nil, new_section = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        block_attributes = self.$parse_document_header(reader, document);
        if ((($a = options['$[]']("header_only")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          while ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          $c = self.$next_section(reader, document, block_attributes), $b = Opal.to_ary($c), new_section = ($b[0] == null ? nil : $b[0]), block_attributes = ($b[1] == null ? nil : $b[1]), $c;
          if (new_section !== false && new_section !== nil && new_section != null) {
            document['$<<'](new_section)};}
        };
        return document;
      }, TMP_5.$$arity = -3);

      Opal.defs(self, '$parse_document_header', TMP_6 = function ːparse_document_header(reader, document) {
        var $a, $b, self = this, block_attributes = nil, has_doctitle_line = nil, assigned_doctitle = nil, val = nil, section_title = nil, source_location = nil, _ = nil, doctitle = nil, single_line = nil, separator = nil, style = nil, style_attrs = nil;

        block_attributes = self.$parse_block_metadata_lines(reader, document);
        if ((($a = ($b = (has_doctitle_line = self['$is_next_line_document_title?'](reader, block_attributes)), $b !== false && $b !== nil && $b != null ?block_attributes['$has_key?']("title") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return document.$finalize_header(block_attributes, false)};
        assigned_doctitle = nil;
        if ((($a = ((val = document.$attributes()['$[]']("doctitle")))['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          (($a = [assigned_doctitle = val]), $b = document, $b['$title='].apply($b, $a), $a[$a.length-1])
        };
        section_title = nil;
        if (has_doctitle_line !== false && has_doctitle_line !== nil && has_doctitle_line != null) {
          if ((($a = document.$sourcemap()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            source_location = reader.$cursor()};
          $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), document['$id='](($a[0] == null ? nil : $a[0])), _ = ($a[1] == null ? nil : $a[1]), doctitle = ($a[2] == null ? nil : $a[2]), _ = ($a[3] == null ? nil : $a[3]), single_line = ($a[4] == null ? nil : $a[4]), $b;
          if (assigned_doctitle !== false && assigned_doctitle !== nil && assigned_doctitle != null) {
            } else {
            (($a = [assigned_doctitle = doctitle]), $b = document, $b['$title='].apply($b, $a), $a[$a.length-1])
          };
          if (single_line !== false && single_line !== nil && single_line != null) {
            } else {
            document.$set_attribute("compat-mode", "")
          };
          if ((($a = (separator = block_attributes.$delete("separator"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            document.$set_attribute("title-separator", separator)};
          if (source_location !== false && source_location !== nil && source_location != null) {
            (($a = [source_location]), $b = document.$header(), $b['$source_location='].apply($b, $a), $a[$a.length-1])};
          document.$attributes()['$[]=']("doctitle", section_title = doctitle);
          if ((($a = document.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            block_attributes.$delete(1);
            block_attributes.$delete("id");
            } else {
            if ((($a = (style = block_attributes.$delete(1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              style_attrs = $hash(1, style);
              self.$parse_style_attribute(style_attrs, reader);
              if ((($a = style_attrs['$key?']("id")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                block_attributes['$[]=']("id", style_attrs['$[]']("id"))};};
            (($a = [block_attributes.$delete("id")]), $b = document, $b['$id='].apply($b, $a), $a[$a.length-1]);
          };
          self.$parse_header_metadata(reader, document);};
        if ((($a = ((($b = ((val = document.$attributes()['$[]']("doctitle")))['$nil_or_empty?']()) !== false && $b !== nil && $b != null) ? $b : val['$=='](section_title))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          (($a = [assigned_doctitle = val]), $b = document, $b['$title='].apply($b, $a), $a[$a.length-1])
        };
        if (assigned_doctitle !== false && assigned_doctitle !== nil && assigned_doctitle != null) {
          document.$attributes()['$[]=']("doctitle", assigned_doctitle)};
        if (document.$doctype()['$==']("manpage")) {
          self.$parse_manpage_header(reader, document)};
        return document.$finalize_header(block_attributes);
      }, TMP_6.$$arity = 2);

      Opal.defs(self, '$parse_manpage_header', TMP_7 = function ːparse_manpage_header(reader, document) {
        var $a, self = this, m = nil, name_section = nil, name_section_buffer = nil;

        if ((($a = (m = $scope.get('ManpageTitleVolnumRx').$match(document.$attributes()['$[]']("doctitle")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          document.$attributes()['$[]=']("mantitle", document.$sub_attributes(m['$[]'](1).$rstrip().$downcase()));
          document.$attributes()['$[]=']("manvolnum", m['$[]'](2).$strip());
          } else {
          self.$warn("asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": malformed manpage title");
          document.$attributes()['$[]=']("mantitle", document.$attributes()['$[]']("doctitle"));
          document.$attributes()['$[]=']("manvolnum", "1");
        };
        reader.$skip_blank_lines();
        if ((($a = self['$is_next_line_section?'](reader, $hash2([], {}))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          name_section = self.$initialize_section(reader, document, $hash2([], {}));
          if (name_section.$level()['$=='](1)) {
            name_section_buffer = reader.$read_lines_until($hash2(["break_on_blank_lines"], {"break_on_blank_lines": true})).$join(" ").$tr_s(" ", " ");
            if ((($a = (m = $scope.get('ManpageNamePurposeRx').$match(name_section_buffer))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              document.$attributes()['$[]=']("manname", document.$sub_attributes(m['$[]'](1)));
              document.$attributes()['$[]=']("manpurpose", m['$[]'](2));
              if (document.$backend()['$==']("manpage")) {
                document.$attributes()['$[]=']("docname", document.$attributes()['$[]']("manname"));
                return document.$attributes()['$[]=']("outfilesuffix", "." + (document.$attributes()['$[]']("manvolnum")));
                } else {
                return nil
              };
              } else {
              return self.$warn("asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": malformed name section body")
            };
            } else {
            return self.$warn("asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": name section title must be at level 1")
          };
          } else {
          return self.$warn("asciidoctor: ERROR: " + (reader.$prev_line_info()) + ": name section expected")
        };
      }, TMP_7.$$arity = 2);

      Opal.defs(self, '$next_section', TMP_8 = function ːnext_section(reader, parent, attributes) {
        var $a, $b, $c, $d, self = this, preamble = nil, part = nil, intro = nil, has_header = nil, doctype = nil, section = nil, current_level = nil, expected_next_levels = nil, title = nil, next_level = nil, new_section = nil, block_line_info = nil, new_block = nil, first_block = nil, document = nil, child_block = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        preamble = false;
        part = false;
        intro = false;
        if ((($a = ($b = (($c = parent.$context()['$==']("document")) ? parent.$blocks()['$empty?']() : parent.$context()['$==']("document")), $b !== false && $b !== nil && $b != null ?(((($c = ((($d = (has_header = parent['$has_header?']())) !== false && $d !== nil && $d != null) ? $d : attributes.$delete("invalid-header"))) !== false && $c !== nil && $c != null) ? $c : self['$is_next_line_section?'](reader, attributes)['$!']())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          doctype = parent.$doctype();
          if ((($a = ((($b = has_header) !== false && $b !== nil && $b != null) ? $b : ((($c = doctype['$==']("book")) ? attributes['$[]'](1)['$!=']("abstract") : doctype['$==']("book"))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            preamble = intro = $scope.get('Block').$new(parent, "preamble", $hash2(["content_model"], {"content_model": "compound"}));
            if ((($a = (($b = doctype['$==']("book")) ? (parent['$attr?']("preface-title")) : doctype['$==']("book"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              (($a = [parent.$attr("preface-title")]), $b = preamble, $b['$title='].apply($b, $a), $a[$a.length-1])};
            parent['$<<'](preamble);};
          section = parent;
          current_level = 0;
          if ((($a = parent.$attributes()['$has_key?']("fragment")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            expected_next_levels = nil
          } else if (doctype['$==']("book")) {
            expected_next_levels = [0, 1]
            } else {
            expected_next_levels = [1]
          };
          } else {
          doctype = parent.$document().$doctype();
          section = self.$initialize_section(reader, parent, attributes);
          attributes = (function() {if ((($a = (title = attributes['$[]']("title"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $hash2(["title"], {"title": title})
            } else {
            return $hash2([], {})
          }; return nil; })();
          current_level = section.$level();
          if ((($a = (($b = current_level['$=='](0)) ? doctype['$==']("book") : current_level['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            part = section.$special()['$!']();
            if ((($a = ($b = section.$special(), $b !== false && $b !== nil && $b != null ?(["preface", "appendix"]['$include?'](section.$sectname())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              expected_next_levels = [$rb_plus(current_level, 2)]
              } else {
              expected_next_levels = [$rb_plus(current_level, 1)]
            };
            } else {
            expected_next_levels = [$rb_plus(current_level, 1)]
          };
        };
        reader.$skip_blank_lines();
        while ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        self.$parse_block_metadata_lines(reader, section, attributes);
        if ((($b = (next_level = self['$is_next_line_section?'](reader, attributes))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          next_level = $rb_plus(next_level, section.$document().$attr("leveloffset", 0).$to_i());
          if ((($b = ((($c = $rb_gt(next_level, current_level)) !== false && $c !== nil && $c != null) ? $c : ((($d = section.$context()['$==']("document")) ? next_level['$=='](0) : section.$context()['$==']("document"))))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = (($c = next_level['$=='](0)) ? doctype['$!=']("book") : next_level['$=='](0))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.$warn("asciidoctor: ERROR: " + (reader.$line_info()) + ": only book doctypes can contain level 0 sections")
            } else if ((($b = (($c = expected_next_levels !== false && expected_next_levels !== nil && expected_next_levels != null) ? expected_next_levels['$include?'](next_level)['$!']() : expected_next_levels)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.$warn($rb_plus($rb_plus("asciidoctor: WARNING: " + (reader.$line_info()) + ": section title out of sequence: ", "expected " + ((function() {if ((($b = $rb_gt(expected_next_levels.$size(), 1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                return "levels"
                } else {
                return "level"
              }; return nil; })()) + " " + ($rb_times(expected_next_levels, " or ")) + ", "), "got level " + (next_level)))};
            $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), new_section = ($b[0] == null ? nil : $b[0]), attributes = ($b[1] == null ? nil : $b[1]), $c;
            section['$<<'](new_section);
            } else {
            if ((($b = (($c = next_level['$=='](0)) ? doctype['$!=']("book") : next_level['$=='](0))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              self.$warn("asciidoctor: ERROR: " + (reader.$line_info()) + ": only book doctypes can contain level 0 sections")};
            break;;
          };
          } else {
          block_line_info = reader.$line_info();
          if ((($b = (new_block = self.$next_block(reader, (((($c = intro) !== false && $c !== nil && $c != null) ? $c : section)), attributes, $hash2(["parse_metadata"], {"parse_metadata": false})))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if (part !== false && part !== nil && part != null) {
              if ((($b = section['$blocks?']()['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                if ((($b = new_block.$style()['$!=']("partintro")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                  if (new_block.$context()['$==']("paragraph")) {
                    (($b = ["open"]), $c = new_block, $c['$context='].apply($c, $b), $b[$b.length-1]);
                    (($b = ["partintro"]), $c = new_block, $c['$style='].apply($c, $b), $b[$b.length-1]);
                    } else {
                    intro = $scope.get('Block').$new(section, "open", $hash2(["content_model"], {"content_model": "compound"}));
                    (($b = ["partintro"]), $c = intro, $c['$style='].apply($c, $b), $b[$b.length-1]);
                    (($b = [intro]), $c = new_block, $c['$parent='].apply($c, $b), $b[$b.length-1]);
                    section['$<<'](intro);
                  }}
              } else if (section.$blocks().$size()['$=='](1)) {
                first_block = section.$blocks()['$[]'](0);
                if ((($b = ($c = intro['$!'](), $c !== false && $c !== nil && $c != null ?first_block.$content_model()['$==']("compound") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                  self.$warn("asciidoctor: ERROR: " + (block_line_info) + ": illegal block content outside of partintro block")
                } else if ((($b = first_block.$content_model()['$!=']("compound")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                  intro = $scope.get('Block').$new(section, "open", $hash2(["content_model"], {"content_model": "compound"}));
                  (($b = ["partintro"]), $c = intro, $c['$style='].apply($c, $b), $b[$b.length-1]);
                  section.$blocks().$shift();
                  if (first_block.$style()['$==']("partintro")) {
                    (($b = ["paragraph"]), $c = first_block, $c['$context='].apply($c, $b), $b[$b.length-1]);
                    (($b = [nil]), $c = first_block, $c['$style='].apply($c, $b), $b[$b.length-1]);};
                  (($b = [intro]), $c = first_block, $c['$parent='].apply($c, $b), $b[$b.length-1]);
                  intro['$<<'](first_block);
                  (($b = [intro]), $c = new_block, $c['$parent='].apply($c, $b), $b[$b.length-1]);
                  section['$<<'](intro);};}};
            (((($b = intro) !== false && $b !== nil && $b != null) ? $b : section))['$<<'](new_block);
            attributes = $hash2([], {});};
        };
        reader.$skip_blank_lines();};
        if (part !== false && part !== nil && part != null) {
          if ((($a = ($b = section['$blocks?'](), $b !== false && $b !== nil && $b != null ?section.$blocks()['$[]'](-1).$context()['$==']("section") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$warn("asciidoctor: ERROR: " + (reader.$line_info()) + ": invalid part, must have at least one section (e.g., chapter, appendix, etc.)")
          }
        } else if (preamble !== false && preamble !== nil && preamble != null) {
          document = parent;
          if ((($a = preamble['$blocks?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = ($b = ($c = $scope.get('Compliance').$unwrap_standalone_preamble(), $c !== false && $c !== nil && $c != null ?document.$blocks().$size()['$=='](1) : $c), $b !== false && $b !== nil && $b != null ?doctype['$!=']("book") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              document.$blocks().$shift();
              while ((($b = (child_block = preamble.$blocks().$shift())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              (($b = [document]), $c = child_block, $c['$parent='].apply($c, $b), $b[$b.length-1]);
              document['$<<'](child_block);};}
            } else {
            document.$blocks().$shift()
          };};
        return [(function() {if ((($a = section['$!='](parent)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return section
          } else {
          return nil
        }; return nil; })(), attributes.$dup()];
      }, TMP_8.$$arity = -3);

      Opal.defs(self, '$next_block', TMP_13 = function ːnext_block(reader, parent, attributes, options) {
        var $a, $b, $c, $d, $e, TMP_9, $f, $g, TMP_10, TMP_11, TMP_12, self = this, skipped = nil, text_only = nil, parse_metadata = nil, document = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, in_list = nil, block = nil, style = nil, explicit_style = nil, sourcemap = nil, source_location = nil, this_line = nil, delimited_block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_blk_match = nil, first_char = nil, match = nil, blk_ctx = nil, posattrs = nil, target = nil, extension = nil, raw_attributes = nil, default_attrs = nil, expected_index = nil, list_item = nil, coids = nil, marker = nil, float_id = nil, float_reftext = nil, float_title = nil, float_level = nil, _ = nil, tmp_sect = nil, break_at_list = nil, lines = nil, first_line = nil, admonition_match = nil, admonition_name = nil, attribution = nil, citetitle = nil, $case = nil, language = nil, linenums = nil, default_language = nil, explicit_stem_syntax = nil, default_stem_syntax = nil, cursor = nil, block_reader = nil, content_model = nil, pos_attrs = nil, resolved_target = nil, scaledwidth = nil, block_id = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if (options == null) {
          options = $hash2([], {});
        }
        skipped = reader.$skip_blank_lines();
        if ((($a = reader['$has_more_lines?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = ($b = (text_only = options['$[]']("text")), $b !== false && $b !== nil && $b != null ?$rb_gt(skipped, 0) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          options.$delete("text");
          text_only = false;};
        parse_metadata = options.$fetch("parse_metadata", true);
        document = parent.$document();
        if ((($a = (extensions = document.$extensions())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          block_extensions = extensions['$blocks?']();
          block_macro_extensions = extensions['$block_macros?']();
          } else {
          block_extensions = block_macro_extensions = false
        };
        in_list = $scope.get('ListItem')['$==='](parent);
        block = nil;
        style = nil;
        explicit_style = nil;
        sourcemap = document.$sourcemap();
        source_location = nil;
        while ((($b = ($c = block['$!'](), $c !== false && $c !== nil && $c != null ?reader['$has_more_lines?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = (($c = parse_metadata !== false && parse_metadata !== nil && parse_metadata != null) ? self.$parse_block_metadata_line(reader, document, attributes, options) : parse_metadata)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          reader.$advance();
          continue;;};
        if (sourcemap !== false && sourcemap !== nil && sourcemap != null) {
          source_location = reader.$cursor()};
        this_line = reader.$read_line();
        delimited_block = false;
        block_context = nil;
        cloaked_context = nil;
        terminator = nil;
        if ((($b = attributes['$[]'](1)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          $c = self.$parse_style_attribute(attributes, reader), $b = Opal.to_ary($c), style = ($b[0] == null ? nil : $b[0]), explicit_style = ($b[1] == null ? nil : $b[1]), $c};
        if ((($b = (delimited_blk_match = self['$is_delimited_block?'](this_line, true))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          delimited_block = true;
          block_context = cloaked_context = delimited_blk_match.$context();
          terminator = delimited_blk_match.$terminator();
          if ((($b = style['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            style = attributes['$[]=']("style", block_context.$to_s())
          } else if ((($b = style['$!='](block_context.$to_s())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = delimited_blk_match.$masq()['$include?'](style)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              block_context = style.$to_sym()
            } else if ((($b = ($c = delimited_blk_match.$masq()['$include?']("admonition"), $c !== false && $c !== nil && $c != null ?$scope.get('ADMONITION_STYLES')['$include?'](style) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              block_context = "admonition"
            } else if ((($b = (($c = block_extensions !== false && block_extensions !== nil && block_extensions != null) ? extensions['$registered_for_block?'](style, block_context) : block_extensions)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              block_context = style.$to_sym()
              } else {
              self.$warn("asciidoctor: WARNING: " + (reader.$prev_line_info()) + ": invalid style for " + (block_context) + " block: " + (style));
              style = block_context.$to_s();
            }};};
        if (delimited_block !== false && delimited_block !== nil && delimited_block != null) {
          } else {
          while ((($c = true) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if ((($c = ($d = (($e = style !== false && style !== nil && style != null) ? $scope.get('Compliance').$strict_verbatim_paragraphs() : style), $d !== false && $d !== nil && $d != null ?$scope.get('VERBATIM_STYLES')['$include?'](style) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            block_context = style.$to_sym();
            reader.$unshift_line(this_line);
            break;;};
          if (text_only !== false && text_only !== nil && text_only != null) {
            } else {
            first_char = (function() {if ((($c = $scope.get('Compliance').$markdown_syntax()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return this_line.$lstrip().$chr()
              } else {
              return this_line.$chr()
            }; return nil; })();
            if ((($c = ($d = ($e = ($scope.get('LAYOUT_BREAK_LINES')['$has_key?'](first_char)), $e !== false && $e !== nil && $e != null ?$rb_ge(this_line.$length(), 3) : $e), $d !== false && $d !== nil && $d != null ?((function() {if ((($e = $scope.get('Compliance').$markdown_syntax()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return $scope.get('LayoutBreakLinePlusRx')
              } else {
              return $scope.get('LayoutBreakLineRx')
            }; return nil; })())['$=~'](this_line) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              block = $scope.get('Block').$new(parent, $scope.get('LAYOUT_BREAK_LINES')['$[]'](first_char), $hash2(["content_model"], {"content_model": "empty"}));
              break;;
            } else if ((($c = ($d = this_line['$end_with?']("]"), $d !== false && $d !== nil && $d != null ?(match = $scope.get('MediaBlockMacroRx').$match(this_line)) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              blk_ctx = match['$[]'](1).$to_sym();
              block = $scope.get('Block').$new(parent, blk_ctx, $hash2(["content_model"], {"content_model": "empty"}));
              if (blk_ctx['$==']("image")) {
                posattrs = ["alt", "width", "height"]
              } else if (blk_ctx['$==']("video")) {
                posattrs = ["poster", "width", "height"]
                } else {
                posattrs = []
              };
              if (style !== false && style !== nil && style != null) {
                if (blk_ctx['$==']("image")) {
                  attributes['$[]=']("alt", style)};
                attributes.$delete("style");
                style = nil;};
              block.$parse_attributes(match['$[]'](3), posattrs, $hash2(["unescape_input", "sub_input", "sub_result", "into"], {"unescape_input": (blk_ctx['$==']("image")), "sub_input": true, "sub_result": false, "into": attributes}));
              target = block.$sub_attributes(match['$[]'](2), $hash2(["attribute_missing"], {"attribute_missing": "drop-line"}));
              if ((($c = target['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                if (document.$attributes().$fetch("attribute-missing", $scope.get('Compliance').$attribute_missing())['$==']("skip")) {
                  return $scope.get('Block').$new(parent, "paragraph", $hash2(["content_model", "source"], {"content_model": "simple", "source": [this_line]}))
                  } else {
                  attributes.$clear();
                  return nil;
                }};
              attributes['$[]=']("target", target);
              break;;
            } else if ((($c = (($d = first_char['$==']("t")) ? (match = $scope.get('TocBlockMacroRx').$match(this_line)) : first_char['$==']("t"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              block = $scope.get('Block').$new(parent, "toc", $hash2(["content_model"], {"content_model": "empty"}));
              block.$parse_attributes(match['$[]'](1), [], $hash2(["sub_result", "into"], {"sub_result": false, "into": attributes}));
              break;;
            } else if ((($c = ($d = (($e = block_macro_extensions !== false && block_macro_extensions !== nil && block_macro_extensions != null) ? (match = $scope.get('GenericBlockMacroRx').$match(this_line)) : block_macro_extensions), $d !== false && $d !== nil && $d != null ?(extension = extensions['$registered_for_block_macro?'](match['$[]'](1))) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              target = match['$[]'](2);
              raw_attributes = match['$[]'](3);
              if (extension.$config()['$[]']("content_model")['$==']("attributes")) {
                if ((($c = raw_attributes['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  } else {
                  document.$parse_attributes(raw_attributes, (((($c = extension.$config()['$[]']("pos_attrs")) !== false && $c !== nil && $c != null) ? $c : [])), $hash2(["sub_input", "sub_result", "into"], {"sub_input": true, "sub_result": false, "into": attributes}))
                }
                } else {
                attributes['$[]=']("text", raw_attributes)
              };
              if ((($c = (default_attrs = extension.$config()['$[]']("default_attrs"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                ($c = ($d = default_attrs).$each, $c.$$p = (TMP_9 = function(k, v){var self = TMP_9.$$s || this, $f, $g, $h;
if (k == null) k = nil;if (v == null) v = nil;
                return ($f = k, $g = attributes, ((($h = $g['$[]']($f)) !== false && $h !== nil && $h != null) ? $h : $g['$[]=']($f, v)))}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $c).call($d)};
              if ((($c = (block = extension.$process_method()['$[]'](parent, target, attributes.$dup()))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                attributes.$replace(block.$attributes())
                } else {
                attributes.$clear();
                return nil;
              };
              break;;};
          };
          if ((($c = (match = $scope.get('CalloutListRx').$match(this_line))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            block = $scope.get('List').$new(parent, "colist");
            attributes['$[]=']("style", "arabic");
            reader.$unshift_line(this_line);
            expected_index = 1;
            while ((($e = ((($f = match) !== false && $f !== nil && $f != null) ? $f : (($g = reader['$has_more_lines?'](), $g !== false && $g !== nil && $g != null ?(match = $scope.get('CalloutListRx').$match(reader.$peek_line())) : $g)))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
            if ((($e = match['$[]'](1).$to_i()['$!='](expected_index)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              self.$warn("asciidoctor: WARNING: " + (reader.$path()) + ": line " + ($rb_minus(reader.$lineno(), 2)) + ": callout list item index: expected " + (expected_index) + " got " + (match['$[]'](1)))};
            list_item = self.$next_list_item(reader, block, match);
            expected_index = $rb_plus(expected_index, 1);
            if (list_item !== false && list_item !== nil && list_item != null) {
              block['$<<'](list_item);
              coids = document.$callouts().$callout_ids(block.$items().$size());
              if ((($e = coids['$empty?']()['$!']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                list_item.$attributes()['$[]=']("coids", coids)
                } else {
                self.$warn("asciidoctor: WARNING: " + (reader.$path()) + ": line " + ($rb_minus(reader.$lineno(), 2)) + ": no callouts refer to list item " + (block.$items().$size()))
              };};
            match = nil;};
            document.$callouts().$next_list();
            break;;
          } else if ((($c = $scope.get('UnorderedListRx')['$=~'](this_line)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            reader.$unshift_line(this_line);
            block = self.$next_outline_list(reader, "ulist", parent);
            break;;
          } else if ((($c = (match = $scope.get('OrderedListRx').$match(this_line))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            reader.$unshift_line(this_line);
            block = self.$next_outline_list(reader, "olist", parent);
            if ((($c = ($e = attributes['$[]']("style")['$!'](), $e !== false && $e !== nil && $e != null ?block.$attributes()['$[]']("style")['$!']() : $e)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              marker = block.$items()['$[]'](0).$marker();
              if ((($c = marker['$start_with?'](".")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                attributes['$[]=']("style", (((($c = $scope.get('ORDERED_LIST_STYLES')['$[]']($rb_minus(marker.$length(), 1))) !== false && $c !== nil && $c != null) ? $c : $scope.get('ORDERED_LIST_STYLES')['$[]'](0))).$to_s())
                } else {
                style = ($c = ($e = $scope.get('ORDERED_LIST_STYLES')).$find, $c.$$p = (TMP_10 = function(s){var self = TMP_10.$$s || this;
if (s == null) s = nil;
                return $scope.get('OrderedListMarkerRxMap')['$[]'](s)['$=~'](marker)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $c).call($e);
                attributes['$[]=']("style", (((($c = style) !== false && $c !== nil && $c != null) ? $c : $scope.get('ORDERED_LIST_STYLES')['$[]'](0))).$to_s());
              };};
            break;;
          } else if ((($c = (match = $scope.get('DescriptionListRx').$match(this_line))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            reader.$unshift_line(this_line);
            block = self.$next_labeled_list(reader, match, parent);
            break;;
          } else if ((($c = ($f = (((($g = style['$==']("float")) !== false && $g !== nil && $g != null) ? $g : style['$==']("discrete"))), $f !== false && $f !== nil && $f != null ?self['$is_section_title?'](this_line, ((function() {if ((($g = $scope.get('Compliance').$underline_style_section_titles()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
            return reader.$peek_line(true)
            } else {
            return nil
          }; return nil; })())) : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            reader.$unshift_line(this_line);
            $f = self.$parse_section_title(reader, document), $c = Opal.to_ary($f), float_id = ($c[0] == null ? nil : $c[0]), float_reftext = ($c[1] == null ? nil : $c[1]), float_title = ($c[2] == null ? nil : $c[2]), float_level = ($c[3] == null ? nil : $c[3]), _ = ($c[4] == null ? nil : $c[4]), $f;
            if (float_reftext !== false && float_reftext !== nil && float_reftext != null) {
              attributes['$[]=']("reftext", float_reftext)};
            if ((($c = attributes['$has_key?']("id")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ((($c = float_id) !== false && $c !== nil && $c != null) ? $c : float_id = attributes['$[]']("id"))};
            block = $scope.get('Block').$new(parent, "floating_title", $hash2(["content_model"], {"content_model": "empty"}));
            if ((($c = float_id['$nil_or_empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              tmp_sect = $scope.get('Section').$new(parent);
              (($c = [float_title]), $f = tmp_sect, $f['$title='].apply($f, $c), $c[$c.length-1]);
              (($c = [tmp_sect.$generate_id()]), $f = block, $f['$id='].apply($f, $c), $c[$c.length-1]);
              } else {
              (($c = [float_id]), $f = block, $f['$id='].apply($f, $c), $c[$c.length-1])
            };
            (($c = [float_level]), $f = block, $f['$level='].apply($f, $c), $c[$c.length-1]);
            (($c = [float_title]), $f = block, $f['$title='].apply($f, $c), $c[$c.length-1]);
            break;;
          } else if ((($c = (($f = style !== false && style !== nil && style != null) ? style['$!=']("normal") : style)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = $scope.get('PARAGRAPH_STYLES')['$include?'](style)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              block_context = style.$to_sym();
              cloaked_context = "paragraph";
              reader.$unshift_line(this_line);
              break;;
            } else if ((($c = $scope.get('ADMONITION_STYLES')['$include?'](style)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              block_context = "admonition";
              cloaked_context = "paragraph";
              reader.$unshift_line(this_line);
              break;;
            } else if ((($c = (($f = block_extensions !== false && block_extensions !== nil && block_extensions != null) ? extensions['$registered_for_block?'](style, "paragraph") : block_extensions)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              block_context = style.$to_sym();
              cloaked_context = "paragraph";
              reader.$unshift_line(this_line);
              break;;
              } else {
              self.$warn("asciidoctor: WARNING: " + (reader.$prev_line_info()) + ": invalid style for paragraph: " + (style));
              style = nil;
            }};
          break_at_list = ((($c = skipped['$=='](0)) ? in_list : skipped['$=='](0)));
          if ((($c = ($f = style['$!=']("normal"), $f !== false && $f !== nil && $f != null ?$scope.get('LiteralParagraphRx')['$=~'](this_line) : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            reader.$unshift_line(this_line);
            lines = self.$read_paragraph_lines(reader, break_at_list, $hash2(["skip_line_comments"], {"skip_line_comments": text_only}));
            self['$adjust_indentation!'](lines);
            block = $scope.get('Block').$new(parent, "literal", $hash2(["content_model", "source", "attributes"], {"content_model": "verbatim", "source": lines, "attributes": attributes}));
            if (in_list !== false && in_list !== nil && in_list != null) {
              block.$set_option("listparagraph")};
            } else {
            reader.$unshift_line(this_line);
            lines = self.$read_paragraph_lines(reader, break_at_list, $hash2(["skip_line_comments"], {"skip_line_comments": true}));
            if ((($c = lines['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              reader.$advance();
              return nil;};
            self.$catalog_inline_anchors(lines.$join($scope.get('EOL')), document);
            first_line = lines['$[]'](0);
            if ((($c = ($f = text_only['$!'](), $f !== false && $f !== nil && $f != null ?(admonition_match = $scope.get('AdmonitionParagraphRx').$match(first_line)) : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              lines['$[]='](0, admonition_match.$post_match().$lstrip());
              attributes['$[]=']("style", admonition_match['$[]'](1));
              attributes['$[]=']("name", admonition_name = admonition_match['$[]'](1).$downcase());
              ($c = "caption", $f = attributes, ((($g = $f['$[]']($c)) !== false && $g !== nil && $g != null) ? $g : $f['$[]=']($c, document.$attributes()['$[]']("" + (admonition_name) + "-caption"))));
              block = $scope.get('Block').$new(parent, "admonition", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
            } else if ((($c = ($f = ($g = text_only['$!'](), $g !== false && $g !== nil && $g != null ?$scope.get('Compliance').$markdown_syntax() : $g), $f !== false && $f !== nil && $f != null ?first_line['$start_with?']("> ") : $f)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              ($c = ($f = lines)['$map!'], $c.$$p = (TMP_11 = function(line){var self = TMP_11.$$s || this, $h;
if (line == null) line = nil;
              if (line['$=='](">")) {
                  return line['$[]']($range(1, -1, false))
                } else if ((($h = line['$start_with?']("> ")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return line['$[]']($range(2, -1, false))
                  } else {
                  return line
                }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $c).call($f);
              if ((($c = lines['$[]'](-1)['$start_with?']("-- ")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                $g = lines.$pop()['$[]']($range(3, -1, false)).$split(", ", 2), $c = Opal.to_ary($g), attribution = ($c[0] == null ? nil : $c[0]), citetitle = ($c[1] == null ? nil : $c[1]), $g;
                while ((($g = lines['$[]'](-1)['$empty?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                lines.$pop()};
                } else {
                $g = nil, $c = Opal.to_ary($g), attribution = ($c[0] == null ? nil : $c[0]), citetitle = ($c[1] == null ? nil : $c[1]), $g
              };
              attributes['$[]=']("style", "quote");
              if (attribution !== false && attribution !== nil && attribution != null) {
                attributes['$[]=']("attribution", attribution)};
              if (citetitle !== false && citetitle !== nil && citetitle != null) {
                attributes['$[]=']("citetitle", citetitle)};
              block = self.$build_block("quote", "compound", false, parent, $scope.get('Reader').$new(lines), attributes);
            } else if ((($c = ($g = text_only['$!'](), $g !== false && $g !== nil && $g != null ?(self['$blockquote?'](lines, first_line)) : $g)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              lines['$[]='](0, first_line['$[]']($range(1, -1, false)));
              $g = lines.$pop()['$[]']($range(3, -1, false)).$split(", ", 2), $c = Opal.to_ary($g), attribution = ($c[0] == null ? nil : $c[0]), citetitle = ($c[1] == null ? nil : $c[1]), $g;
              while ((($g = lines['$[]'](-1)['$empty?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
              lines.$pop()};
              lines['$[]='](-1, lines['$[]'](-1).$chop());
              attributes['$[]=']("style", "quote");
              if (attribution !== false && attribution !== nil && attribution != null) {
                attributes['$[]=']("attribution", attribution)};
              if (citetitle !== false && citetitle !== nil && citetitle != null) {
                attributes['$[]=']("citetitle", citetitle)};
              block = $scope.get('Block').$new(parent, "quote", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
              } else {
              if (style['$==']("normal")) {
                self['$adjust_indentation!'](lines)};
              block = $scope.get('Block').$new(parent, "paragraph", $hash2(["content_model", "source", "attributes"], {"content_model": "simple", "source": lines, "attributes": attributes}));
            };
          };
          break;;}
        };
        if ((($b = ($c = block['$!'](), $c !== false && $c !== nil && $c != null ?block_context : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = ((($c = block_context['$==']("abstract")) !== false && $c !== nil && $c != null) ? $c : block_context['$==']("partintro"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            block_context = "open"};
          $case = block_context;if ("admonition"['$===']($case)) {attributes['$[]=']("name", admonition_name = style.$downcase());
          ($b = "caption", $c = attributes, ((($g = $c['$[]']($b)) !== false && $g !== nil && $g != null) ? $g : $c['$[]=']($b, document.$attributes()['$[]']("" + (admonition_name) + "-caption"))));
          block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes);}else if ("comment"['$===']($case)) {self.$build_block(block_context, "skip", terminator, parent, reader, attributes);
          return nil;}else if ("example"['$===']($case)) {block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes)}else if ("listing"['$===']($case) || "fenced_code"['$===']($case) || "source"['$===']($case)) {if (block_context['$==']("fenced_code")) {
            style = attributes['$[]=']("style", "source");
            $c = this_line['$[]']($range(3, -1, false)).$tr(" ", "").$split(",", 2), $b = Opal.to_ary($c), language = ($b[0] == null ? nil : $b[0]), linenums = ($b[1] == null ? nil : $b[1]), $c;
            if ((($b = language['$nil_or_empty?']()['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              attributes['$[]=']("language", language);
              if ((($b = linenums['$nil_or_empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                } else {
                attributes['$[]=']("linenums", "")
              };
            } else if ((($b = (default_language = document.$attributes()['$[]']("source-language"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              attributes['$[]=']("language", default_language)};
            if ((($b = ($c = attributes['$key?']("indent")['$!'](), $c !== false && $c !== nil && $c != null ?document.$attributes()['$key?']("source-indent") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              attributes['$[]=']("indent", document.$attributes()['$[]']("source-indent"))};
            terminator = terminator['$[]']($range(0, 2, false));
          } else if (block_context['$==']("source")) {
            $scope.get('AttributeList').$rekey(attributes, [nil, "language", "linenums"]);
            if ((($b = attributes['$key?']("language")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else if ((($b = (default_language = document.$attributes()['$[]']("source-language"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              attributes['$[]=']("language", default_language)};
            if ((($b = ($c = attributes['$key?']("indent")['$!'](), $c !== false && $c !== nil && $c != null ?document.$attributes()['$key?']("source-indent") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              attributes['$[]=']("indent", document.$attributes()['$[]']("source-indent"))};};
          block = self.$build_block("listing", "verbatim", terminator, parent, reader, attributes);}else if ("literal"['$===']($case)) {block = self.$build_block(block_context, "verbatim", terminator, parent, reader, attributes)}else if ("pass"['$===']($case)) {block = self.$build_block(block_context, "raw", terminator, parent, reader, attributes)}else if ("stem"['$===']($case) || "latexmath"['$===']($case) || "asciimath"['$===']($case)) {if (block_context['$==']("stem")) {
            attributes['$[]=']("style", (function() {if ((($b = (explicit_stem_syntax = attributes['$[]'](2))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              if ((($b = explicit_stem_syntax['$include?']("tex")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                return "latexmath"
                } else {
                return "asciimath"
              }
            } else if ((($b = ((default_stem_syntax = document.$attributes()['$[]']("stem")))['$nil_or_empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return "asciimath"
              } else {
              return default_stem_syntax
            }; return nil; })())};
          block = self.$build_block("stem", "raw", terminator, parent, reader, attributes);}else if ("open"['$===']($case) || "sidebar"['$===']($case)) {block = self.$build_block(block_context, "compound", terminator, parent, reader, attributes)}else if ("table"['$===']($case)) {cursor = reader.$cursor();
          block_reader = $scope.get('Reader').$new(reader.$read_lines_until($hash2(["terminator", "skip_line_comments"], {"terminator": terminator, "skip_line_comments": true})), cursor);
          $case = terminator.$chr();if (","['$===']($case)) {attributes['$[]=']("format", "csv")}else if (":"['$===']($case)) {attributes['$[]=']("format", "dsv")};
          block = self.$next_table(block_reader, parent, attributes);}else if ("quote"['$===']($case) || "verse"['$===']($case)) {$scope.get('AttributeList').$rekey(attributes, [nil, "attribution", "citetitle"]);
          block = self.$build_block(block_context, ((function() {if (block_context['$==']("verse")) {
            return "verbatim"
            } else {
            return "compound"
          }; return nil; })()), terminator, parent, reader, attributes);}else {if ((($b = (($c = block_extensions !== false && block_extensions !== nil && block_extensions != null) ? (extension = extensions['$registered_for_block?'](block_context, cloaked_context)) : block_extensions)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ((content_model = extension.$config()['$[]']("content_model")))['$!=']("skip")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              if ((($b = ((pos_attrs = ((($c = extension.$config()['$[]']("pos_attrs")) !== false && $c !== nil && $c != null) ? $c : [])))['$empty?']()['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                $scope.get('AttributeList').$rekey(attributes, [nil].$concat(pos_attrs))};
              if ((($b = (default_attrs = extension.$config()['$[]']("default_attrs"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                ($b = ($c = default_attrs).$each, $b.$$p = (TMP_12 = function(k, v){var self = TMP_12.$$s || this, $h, $i, $j;
if (k == null) k = nil;if (v == null) v = nil;
                return ($h = k, $i = attributes, ((($j = $i['$[]']($h)) !== false && $j !== nil && $j != null) ? $j : $i['$[]=']($h, v)))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c)};};
            block = self.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash2(["extension"], {"extension": extension}));
            if ((($b = (($g = block !== false && block !== nil && block != null) ? content_model['$!=']("skip") : block)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              } else {
              attributes.$clear();
              return nil;
            };
            } else {
            self.$raise("Unsupported block type " + (block_context) + " at " + (reader.$line_info()))
          }};};};
        if (block !== false && block !== nil && block != null) {
          if (source_location !== false && source_location !== nil && source_location != null) {
            (($a = [source_location]), $b = block, $b['$source_location='].apply($b, $a), $a[$a.length-1])};
          if ((($a = block['$title?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            (($a = [attributes['$[]']("title")]), $b = block, $b['$title='].apply($b, $a), $a[$a.length-1])
          };
          if (block.$context()['$==']("image")) {
            resolved_target = attributes['$[]']("target");
            block.$document().$register("images", resolved_target);
            ($a = "alt", $b = attributes, ((($g = $b['$[]']($a)) !== false && $g !== nil && $g != null) ? $g : $b['$[]=']($a, $scope.get('Helpers').$basename(resolved_target, true).$tr("_-", " "))));
            attributes['$[]=']("alt", block.$sub_specialchars(attributes['$[]']("alt")));
            block.$assign_caption(attributes.$delete("caption"), "figure");
            if ((($a = (scaledwidth = attributes['$[]']("scaledwidth"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ($range(48, 57, false))['$include?']((((($b = scaledwidth['$[]'](-1)) !== false && $b !== nil && $b != null) ? $b : 0)).$ord())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                attributes['$[]=']("scaledwidth", "" + (scaledwidth) + "%")}};
            } else {
            ($a = block, ((($b = $a.$caption()) !== false && $b !== nil && $b != null) ? $b : $a['$caption='](attributes.$delete("caption"))))
          };
          (($a = [attributes['$[]']("style")]), $b = block, $b['$style='].apply($b, $a), $a[$a.length-1]);
          if ((($a = (block_id = (($b = block, ((($g = $b.$id()) !== false && $g !== nil && $g != null) ? $g : $b['$id='](attributes['$[]']("id"))))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            document.$register("ids", [block_id, (((($a = attributes['$[]']("reftext")) !== false && $a !== nil && $a != null) ? $a : ((function() {if ((($b = block['$title?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return block.$title()
              } else {
              return nil
            }; return nil; })())))])};
          if ((($a = attributes['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            block.$attributes().$update(attributes)
          };
          block.$lock_in_subs();
          if ((($a = block['$sub?']("callouts")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = (self.$catalog_callouts(block.$source(), document))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              block.$remove_sub("callouts")
            }};};
        return block;
      }, TMP_13.$$arity = -3);

      Opal.defs(self, '$blockquote?', TMP_14 = function(lines, first_line) {
        var $a, $b, $c, $d, self = this;

        if (first_line == null) {
          first_line = nil;
        }
        return ($a = ($b = ($c = $rb_gt(lines.$size(), 1), $c !== false && $c !== nil && $c != null ?((((($d = first_line) !== false && $d !== nil && $d != null) ? $d : lines['$[]'](0)))['$start_with?']("\"")) : $c), $b !== false && $b !== nil && $b != null ?(lines['$[]'](-1)['$start_with?']("-- ")) : $b), $a !== false && $a !== nil && $a != null ?(lines['$[]'](-2)['$end_with?']("\"")) : $a);
      }, TMP_14.$$arity = -2);

      Opal.defs(self, '$read_paragraph_lines', TMP_15 = function ːread_paragraph_lines(reader, break_at_list, opts) {
        var $a, $b, self = this, break_condition = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        opts['$[]=']("break_on_blank_lines", true);
        opts['$[]=']("break_on_list_continuation", true);
        opts['$[]=']("preserve_last_line", true);
        break_condition = ((function() {if (break_at_list !== false && break_at_list !== nil && break_at_list != null) {
          return ((function() {if ((($a = $scope.get('Compliance').$block_terminates_paragraph()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('StartOfBlockOrListProc')
            } else {
            return $scope.get('StartOfListProc')
          }; return nil; })())
          } else {
          return ((function() {if ((($a = $scope.get('Compliance').$block_terminates_paragraph()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('StartOfBlockProc')
            } else {
            return $scope.get('NoOp')
          }; return nil; })())
        }; return nil; })());
        return ($a = ($b = reader).$read_lines_until, $a.$$p = break_condition.$to_proc(), $a).call($b, opts);
      }, TMP_15.$$arity = -3);

      Opal.defs(self, '$is_delimited_block?', TMP_16 = function(line, return_match_data) {
        var $a, $b, self = this, line_len = nil, tip = nil, tl = nil, fenced_code = nil, tip_3 = nil, context = nil, masq = nil;

        if (return_match_data == null) {
          return_match_data = false;
        }
        if ((($a = ($b = $rb_gt((line_len = line.$length()), 1), $b !== false && $b !== nil && $b != null ?($scope.get('DELIMITED_BLOCK_LEADERS')['$include?'](line['$[]']($range(0, 1, false)))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if (line_len['$=='](2)) {
          tip = line;
          tl = 2;
          } else {
          if ((($a = $rb_le(line_len, 4)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            tip = line;
            tl = line_len;
            } else {
            tip = line['$[]']($range(0, 3, false));
            tl = 4;
          };
          fenced_code = false;
          if ((($a = $scope.get('Compliance').$markdown_syntax()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            tip_3 = ((function() {if (tl['$=='](4)) {
              return tip.$chop()
              } else {
              return tip
            }; return nil; })());
            if (tip_3['$==']("```")) {
              if ((($a = (($b = tl['$=='](4)) ? tip['$end_with?']("`") : tl['$=='](4))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return nil};
              tip = tip_3;
              tl = 3;
              fenced_code = true;};};
          if ((($a = (($b = tl['$=='](3)) ? fenced_code['$!']() : tl['$=='](3))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil};
        };
        if ((($a = $scope.get('DELIMITED_BLOCKS')['$has_key?'](tip)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((($b = $rb_lt(tl, 4)) !== false && $b !== nil && $b != null) ? $b : tl['$=='](line_len))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (return_match_data !== false && return_match_data !== nil && return_match_data != null) {
              $a = Opal.to_a($scope.get('DELIMITED_BLOCKS')['$[]'](tip)), context = ($a[0] == null ? nil : $a[0]), masq = ($a[1] == null ? nil : $a[1]), $a;
              return $scope.get('BlockMatchData').$new(context, masq, tip, tip);
              } else {
              return true
            }
          } else if (((("") + (tip)) + ($rb_times(tip['$[]']($range(-1, -1, false)), ($rb_minus(line_len, tl)))))['$=='](line)) {
            if (return_match_data !== false && return_match_data !== nil && return_match_data != null) {
              $a = Opal.to_a($scope.get('DELIMITED_BLOCKS')['$[]'](tip)), context = ($a[0] == null ? nil : $a[0]), masq = ($a[1] == null ? nil : $a[1]), $a;
              return $scope.get('BlockMatchData').$new(context, masq, tip, line);
              } else {
              return true
            }
            } else {
            return nil
          }
          } else {
          return nil
        };
      }, TMP_16.$$arity = -2);

      Opal.defs(self, '$build_block', TMP_17 = function ːbuild_block(block_context, content_model, terminator, parent, reader, attributes, options) {
        var $a, $b, self = this, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, cursor = nil, indent = nil, tab_size = nil, extension = nil, block = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ((($a = ((($b = content_model['$==']("skip")) !== false && $b !== nil && $b != null) ? $b : content_model['$==']("raw"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          skip_processing = content_model['$==']("skip");
          parse_as_content_model = "simple";
          } else {
          skip_processing = false;
          parse_as_content_model = content_model;
        };
        if ((($a = terminator['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (parse_as_content_model['$==']("verbatim")) {
            lines = reader.$read_lines_until($hash2(["break_on_blank_lines", "break_on_list_continuation"], {"break_on_blank_lines": true, "break_on_list_continuation": true}))
            } else {
            if (content_model['$==']("compound")) {
              content_model = "simple"};
            lines = self.$read_paragraph_lines(reader, false, $hash2(["skip_line_comments", "skip_processing"], {"skip_line_comments": true, "skip_processing": true}));
          };
          block_reader = nil;
        } else if ((($a = parse_as_content_model['$!=']("compound")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          lines = reader.$read_lines_until($hash2(["terminator", "skip_processing"], {"terminator": terminator, "skip_processing": skip_processing}));
          block_reader = nil;
        } else if (terminator['$=='](false)) {
          lines = nil;
          block_reader = reader;
          } else {
          lines = nil;
          cursor = reader.$cursor();
          block_reader = $scope.get('Reader').$new(reader.$read_lines_until($hash2(["terminator", "skip_processing"], {"terminator": terminator, "skip_processing": skip_processing})), cursor);
        };
        if (content_model['$==']("skip")) {
          attributes.$clear();
          return lines;};
        if (content_model['$==']("verbatim")) {
          if ((($a = (indent = attributes['$[]']("indent"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self['$adjust_indentation!'](lines, indent, (((($a = attributes['$[]']("tabsize")) !== false && $a !== nil && $a != null) ? $a : parent.$document().$attributes()['$[]']("tabsize"))))
          } else if ((($a = $rb_gt((tab_size = (((($b = attributes['$[]']("tabsize")) !== false && $b !== nil && $b != null) ? $b : parent.$document().$attributes()['$[]']("tabsize"))).$to_i()), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self['$adjust_indentation!'](lines, nil, tab_size)}};
        if ((($a = (extension = options['$[]']("extension"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attributes.$delete("style");
          if ((($a = (block = extension.$process_method()['$[]'](parent, ((($b = block_reader) !== false && $b !== nil && $b != null) ? $b : ($scope.get('Reader').$new(lines))), attributes.$dup()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attributes.$replace(block.$attributes());
            if ((($a = (($b = block.$content_model()['$==']("compound")) ? ((lines = block.$lines()))['$nil_or_empty?']()['$!']() : block.$content_model()['$==']("compound"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              content_model = "compound";
              block_reader = $scope.get('Reader').$new(lines);};
            } else {
            return nil
          };
          } else {
          block = $scope.get('Block').$new(parent, block_context, $hash2(["content_model", "source", "attributes"], {"content_model": content_model, "source": lines, "attributes": attributes}))
        };
        if ((($a = ($b = (attributes['$has_key?']("title")), $b !== false && $b !== nil && $b != null ?(block.$document()['$attr?']("" + (block.$context()) + "-caption")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [attributes.$delete("title")]), $b = block, $b['$title='].apply($b, $a), $a[$a.length-1]);
          block.$assign_caption(attributes.$delete("caption"));};
        if (content_model['$==']("compound")) {
          self.$parse_blocks(block_reader, block)};
        return block;
      }, TMP_17.$$arity = -7);

      Opal.defs(self, '$parse_blocks', TMP_18 = function ːparse_blocks(reader, parent) {
        var $a, $b, self = this, block = nil;

        while ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        block = $scope.get('Parser').$next_block(reader, parent);
        if (block !== false && block !== nil && block != null) {
          parent['$<<'](block)};};
      }, TMP_18.$$arity = 2);

      Opal.defs(self, '$next_outline_list', TMP_19 = function ːnext_outline_list(reader, list_type, parent) {
        var $a, $b, $c, self = this, list_block = nil, match = nil, marker = nil, this_item_level = nil, ancestor = nil, list_item = nil;

        list_block = $scope.get('List').$new(parent, list_type);
        if (parent.$context()['$=='](list_type)) {
          (($a = [$rb_plus(parent.$level(), 1)]), $b = list_block, $b['$level='].apply($b, $a), $a[$a.length-1])
          } else {
          (($a = [1]), $b = list_block, $b['$level='].apply($b, $a), $a[$a.length-1])
        };
        while ((($b = ($c = reader['$has_more_lines?'](), $c !== false && $c !== nil && $c != null ?(match = $scope.get('ListRxMap')['$[]'](list_type).$match(reader.$peek_line())) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        marker = self.$resolve_list_marker(list_type, match['$[]'](1));
        if ((($b = ($c = list_block['$items?'](), $c !== false && $c !== nil && $c != null ?marker['$!='](list_block.$items()['$[]'](0).$marker()) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          this_item_level = $rb_plus(list_block.$level(), 1);
          ancestor = parent;
          while (ancestor.$context()['$=='](list_type)) {
          if (marker['$=='](ancestor.$items()['$[]'](0).$marker())) {
            this_item_level = ancestor.$level();
            break;;};
          ancestor = ancestor.$parent();};
          } else {
          this_item_level = list_block.$level()
        };
        if ((($b = ((($c = list_block['$items?']()['$!']()) !== false && $c !== nil && $c != null) ? $c : this_item_level['$=='](list_block.$level()))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          list_item = self.$next_list_item(reader, list_block, match)
        } else if ((($b = $rb_lt(this_item_level, list_block.$level())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          break;
        } else if ((($b = $rb_gt(this_item_level, list_block.$level())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          list_block.$items()['$[]'](-1)['$<<'](self.$next_block(reader, list_block))};
        if (list_item !== false && list_item !== nil && list_item != null) {
          list_block['$<<'](list_item)};
        list_item = nil;
        reader.$skip_blank_lines();};
        return list_block;
      }, TMP_19.$$arity = 3);

      Opal.defs(self, '$catalog_callouts', TMP_21 = function ːcatalog_callouts(text, document) {
        var $a, $b, TMP_20, self = this, found = nil;

        found = false;
        if ((($a = text['$include?']("<")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = text).$scan, $a.$$p = (TMP_20 = function(){var self = TMP_20.$$s || this, $c, m = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($c = m['$[]'](0).$chr()['$!=']("\\")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              document.$callouts().$register(m['$[]'](2))};
            return found = true;}, TMP_20.$$s = self, TMP_20.$$arity = 0, TMP_20), $a).call($b, $scope.get('CalloutQuickScanRx'))};
        return found;
      }, TMP_21.$$arity = 2);

      Opal.defs(self, '$catalog_inline_anchors', TMP_23 = function ːcatalog_inline_anchors(text, document) {
        var $a, $b, TMP_22, self = this;

        if ((($a = text['$include?']("[")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = text).$scan, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $c, m = nil, id = nil, reftext = nil;
            if ($gvars["~"] == null) $gvars["~"] = nil;

          m = $gvars["~"];
            if ((($c = m['$[]'](0)['$start_with?']("\\")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            id = ((($c = m['$[]'](1)) !== false && $c !== nil && $c != null) ? $c : m['$[]'](3));
            reftext = ((($c = m['$[]'](2)) !== false && $c !== nil && $c != null) ? $c : m['$[]'](4));
            return document.$register("ids", [id, reftext]);}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $a).call($b, $scope.get('InlineAnchorRx'))};
        return nil;
      }, TMP_23.$$arity = 2);

      Opal.defs(self, '$next_labeled_list', TMP_24 = function ːnext_labeled_list(reader, match, parent) {
        var $a, $b, $c, $d, self = this, list_block = nil, previous_pair = nil, sibling_pattern = nil, term = nil, item = nil;

        list_block = $scope.get('List').$new(parent, "dlist");
        previous_pair = nil;
        sibling_pattern = $scope.get('DescriptionListSiblingRx')['$[]'](match['$[]'](2));
        while ((($b = ((($c = match) !== false && $c !== nil && $c != null) ? $c : (($d = reader['$has_more_lines?'](), $d !== false && $d !== nil && $d != null ?(match = sibling_pattern.$match(reader.$peek_line())) : $d)))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        $c = self.$next_list_item(reader, list_block, match, sibling_pattern), $b = Opal.to_ary($c), term = ($b[0] == null ? nil : $b[0]), item = ($b[1] == null ? nil : $b[1]), $c;
        if ((($b = (($c = previous_pair !== false && previous_pair !== nil && previous_pair != null) ? previous_pair['$[]'](-1)['$!']() : previous_pair)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          previous_pair.$pop();
          previous_pair['$[]'](0)['$<<'](term);
          previous_pair['$<<'](item);
          } else {
          list_block.$items()['$<<']((previous_pair = [[term], item]))
        };
        match = nil;};
        return list_block;
      }, TMP_24.$$arity = 3);

      Opal.defs(self, '$next_list_item', TMP_25 = function ːnext_list_item(reader, list_block, match, sibling_trait) {
        var $a, $b, self = this, list_type = nil, list_term = nil, list_item = nil, has_text = nil, text = nil, checkbox = nil, checked = nil, cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, continuation_connects_first_block = nil, content_adjacent = nil, options = nil, new_block = nil;

        if (sibling_trait == null) {
          sibling_trait = nil;
        }
        if (((list_type = list_block.$context()))['$==']("dlist")) {
          list_term = $scope.get('ListItem').$new(list_block, match['$[]'](1));
          list_item = $scope.get('ListItem').$new(list_block, match['$[]'](3));
          has_text = match['$[]'](3)['$nil_or_empty?']()['$!']();
          } else {
          text = match['$[]'](2);
          checkbox = false;
          if ((($a = (($b = list_type['$==']("ulist")) ? text['$start_with?']("[") : list_type['$==']("ulist"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = text['$start_with?']("[ ] ")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              checkbox = true;
              checked = false;
              text = text['$[]']($range(3, -1, false)).$lstrip();
            } else if ((($a = ((($b = text['$start_with?']("[x] ")) !== false && $b !== nil && $b != null) ? $b : text['$start_with?']("[*] "))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              checkbox = true;
              checked = true;
              text = text['$[]']($range(3, -1, false)).$lstrip();}};
          list_item = $scope.get('ListItem').$new(list_block, text);
          if (checkbox !== false && checkbox !== nil && checkbox != null) {
            list_block.$attributes()['$[]=']("checklist-option", "");
            list_item.$attributes()['$[]=']("checkbox", "");
            if (checked !== false && checked !== nil && checked != null) {
              list_item.$attributes()['$[]=']("checked", "")};};
          ((($a = sibling_trait) !== false && $a !== nil && $a != null) ? $a : sibling_trait = self.$resolve_list_marker(list_type, match['$[]'](1), list_block.$items().$size(), true, reader));
          (($a = [sibling_trait]), $b = list_item, $b['$marker='].apply($b, $a), $a[$a.length-1]);
          has_text = true;
        };
        reader.$advance();
        cursor = reader.$cursor();
        list_item_reader = $scope.get('Reader').$new(self.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), cursor);
        if ((($a = list_item_reader['$has_more_lines?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          comment_lines = list_item_reader.$skip_line_comments();
          subsequent_line = list_item_reader.$peek_line();
          if ((($a = comment_lines['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            list_item_reader.$unshift_lines(comment_lines)
          };
          if ((($a = subsequent_line['$nil?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            continuation_connects_first_block = subsequent_line['$empty?']();
            if ((($a = ($b = continuation_connects_first_block['$!'](), $b !== false && $b !== nil && $b != null ?list_type['$!=']("dlist") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              has_text = false};
            content_adjacent = ($a = continuation_connects_first_block['$!'](), $a !== false && $a !== nil && $a != null ?subsequent_line['$empty?']()['$!']() : $a);
            } else {
            continuation_connects_first_block = false;
            content_adjacent = false;
          };
          options = $hash2(["text"], {"text": has_text['$!']()});
          while ((($b = list_item_reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = (new_block = self.$next_block(list_item_reader, list_item, $hash2([], {}), options))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            list_item['$<<'](new_block)}};
          list_item.$fold_first(continuation_connects_first_block, content_adjacent);};
        if (list_type['$==']("dlist")) {
          if ((($a = ((($b = list_item['$text?']()) !== false && $b !== nil && $b != null) ? $b : list_item['$blocks?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            list_item = nil
          };
          return [list_term, list_item];
          } else {
          return list_item
        };
      }, TMP_25.$$arity = -4);

      Opal.defs(self, '$read_lines_for_list_item', TMP_31 = function ːread_lines_for_list_item(reader, list_type, sibling_trait, has_text) {
        var $a, $b, $c, $d, TMP_26, $e, TMP_27, $f, TMP_28, TMP_29, $g, $h, TMP_30, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, this_line = nil, prev_line = nil, match = nil, nested_list_type = nil;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        if (sibling_trait == null) {
          sibling_trait = nil;
        }
        if (has_text == null) {
          has_text = true;
        }
        buffer = [];
        continuation = "inactive";
        within_nested_list = false;
        detached_continuation = nil;
        while ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        this_line = reader.$read_line();
        if ((($b = self['$is_sibling_list_item?'](this_line, list_type, sibling_trait)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          break;};
        prev_line = (function() {if ((($b = buffer['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return nil
          } else {
          return buffer['$[]'](-1)
        }; return nil; })();
        if (prev_line['$==']($scope.get('LIST_CONTINUATION'))) {
          if (continuation['$==']("inactive")) {
            continuation = "active";
            has_text = true;
            if (within_nested_list !== false && within_nested_list !== nil && within_nested_list != null) {
              } else {
              buffer['$[]='](-1, "")
            };};
          if (this_line['$==']($scope.get('LIST_CONTINUATION'))) {
            if ((($b = continuation['$!=']("frozen")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              continuation = "frozen";
              buffer['$<<'](this_line);};
            this_line = nil;
            continue;;};};
        if ((($b = (match = self['$is_delimited_block?'](this_line, true))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if (continuation['$==']("active")) {
            buffer['$<<'](this_line);
            buffer.$concat(reader.$read_lines_until($hash2(["terminator", "read_last_line"], {"terminator": match.$terminator(), "read_last_line": true})));
            continuation = "inactive";
            } else {
            break;
          }
        } else if ((($b = ($c = (($d = list_type['$==']("dlist")) ? continuation['$!=']("active") : list_type['$==']("dlist")), $c !== false && $c !== nil && $c != null ?$scope.get('BlockAttributeLineRx')['$=~'](this_line) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          break;
        } else if ((($b = (($c = continuation['$==']("active")) ? this_line['$empty?']()['$!']() : continuation['$==']("active"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = $scope.get('LiteralParagraphRx')['$=~'](this_line)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            reader.$unshift_line(this_line);
            buffer.$concat(($b = ($c = reader).$read_lines_until, $b.$$p = (TMP_26 = function(line){var self = TMP_26.$$s || this, $e;
if (line == null) line = nil;
            return (($e = list_type['$==']("dlist")) ? self['$is_sibling_list_item?'](line, list_type, sibling_trait) : list_type['$==']("dlist"))}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26), $b).call($c, $hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})));
            continuation = "inactive";
          } else if ((($b = ((($d = ((($e = $scope.get('BlockTitleRx')['$=~'](this_line)) !== false && $e !== nil && $e != null) ? $e : $scope.get('BlockAttributeLineRx')['$=~'](this_line))) !== false && $d !== nil && $d != null) ? $d : $scope.get('AttributeEntryRx')['$=~'](this_line))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            buffer['$<<'](this_line)
            } else {
            if ((($b = nested_list_type = ($d = ($e = ((function() {if (within_nested_list !== false && within_nested_list !== nil && within_nested_list != null) {
              return ["dlist"]
              } else {
              return $scope.get('NESTABLE_LIST_CONTEXTS')
            }; return nil; })())).$find, $d.$$p = (TMP_27 = function(ctx){var self = TMP_27.$$s || this;
if (ctx == null) ctx = nil;
            return $scope.get('ListRxMap')['$[]'](ctx)['$=~'](this_line)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $d).call($e)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              within_nested_list = true;
              if ((($b = (($d = nested_list_type['$==']("dlist")) ? $gvars["~"]['$[]'](3)['$nil_or_empty?']() : nested_list_type['$==']("dlist"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                has_text = false};};
            buffer['$<<'](this_line);
            continuation = "inactive";
          }
        } else if ((($b = ($d = prev_line['$nil?']()['$!'](), $d !== false && $d !== nil && $d != null ?prev_line['$empty?']() : $d)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          if ((($b = this_line['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            reader.$skip_blank_lines();
            this_line = reader.$read_line();
            if ((($b = ((($d = this_line['$nil?']()) !== false && $d !== nil && $d != null) ? $d : self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              break;};};
          if (this_line['$==']($scope.get('LIST_CONTINUATION'))) {
            detached_continuation = buffer.$size();
            buffer['$<<'](this_line);
          } else if (has_text !== false && has_text !== nil && has_text != null) {
            if ((($b = self['$is_sibling_list_item?'](this_line, list_type, sibling_trait)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              break;
            } else if ((($b = nested_list_type = ($d = ($f = $scope.get('NESTABLE_LIST_CONTEXTS')).$find, $d.$$p = (TMP_28 = function(ctx){var self = TMP_28.$$s || this;
if (ctx == null) ctx = nil;
            return $scope.get('ListRxMap')['$[]'](ctx)['$=~'](this_line)}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28), $d).call($f)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              buffer['$<<'](this_line);
              within_nested_list = true;
              if ((($b = (($d = nested_list_type['$==']("dlist")) ? $gvars["~"]['$[]'](3)['$nil_or_empty?']() : nested_list_type['$==']("dlist"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
                has_text = false};
            } else if ((($b = $scope.get('LiteralParagraphRx')['$=~'](this_line)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              reader.$unshift_line(this_line);
              buffer.$concat(($b = ($d = reader).$read_lines_until, $b.$$p = (TMP_29 = function(line){var self = TMP_29.$$s || this, $g;
if (line == null) line = nil;
              return (($g = list_type['$==']("dlist")) ? self['$is_sibling_list_item?'](line, list_type, sibling_trait) : list_type['$==']("dlist"))}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29), $b).call($d, $hash2(["preserve_last_line", "break_on_blank_lines", "break_on_list_continuation"], {"preserve_last_line": true, "break_on_blank_lines": true, "break_on_list_continuation": true})));
              } else {
              break;
            }
            } else {
            if (within_nested_list !== false && within_nested_list !== nil && within_nested_list != null) {
              } else {
              buffer.$pop()
            };
            buffer['$<<'](this_line);
            has_text = true;
          };
          } else {
          if ((($b = this_line['$empty?']()['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            has_text = true};
          if ((($b = nested_list_type = ($g = ($h = ((function() {if (within_nested_list !== false && within_nested_list !== nil && within_nested_list != null) {
            return ["dlist"]
            } else {
            return $scope.get('NESTABLE_LIST_CONTEXTS')
          }; return nil; })())).$find, $g.$$p = (TMP_30 = function(ctx){var self = TMP_30.$$s || this;
if (ctx == null) ctx = nil;
          return $scope.get('ListRxMap')['$[]'](ctx)['$=~'](this_line)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $g).call($h)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            within_nested_list = true;
            if ((($b = (($g = nested_list_type['$==']("dlist")) ? $gvars["~"]['$[]'](3)['$nil_or_empty?']() : nested_list_type['$==']("dlist"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              has_text = false};};
          buffer['$<<'](this_line);
        };
        this_line = nil;};
        if (this_line !== false && this_line !== nil && this_line != null) {
          reader.$unshift_line(this_line)};
        if (detached_continuation !== false && detached_continuation !== nil && detached_continuation != null) {
          buffer.$delete_at(detached_continuation)};
        while ((($b = ($g = buffer['$empty?']()['$!'](), $g !== false && $g !== nil && $g != null ?buffer['$[]'](-1)['$empty?']() : $g)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        buffer.$pop()};
        if ((($a = ($b = buffer['$empty?']()['$!'](), $b !== false && $b !== nil && $b != null ?buffer['$[]'](-1)['$==']($scope.get('LIST_CONTINUATION')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          buffer.$pop()};
        return buffer;
      }, TMP_31.$$arity = -3);

      Opal.defs(self, '$initialize_section', TMP_32 = function ːinitialize_section(reader, parent, attributes) {
        var $a, $b, self = this, document = nil, source_location = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, _ = nil, section = nil, style = nil, id = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        document = parent.$document();
        if ((($a = document.$sourcemap()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          source_location = reader.$cursor()};
        $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), sect_id = ($a[0] == null ? nil : $a[0]), sect_reftext = ($a[1] == null ? nil : $a[1]), sect_title = ($a[2] == null ? nil : $a[2]), sect_level = ($a[3] == null ? nil : $a[3]), _ = ($a[4] == null ? nil : $a[4]), $b;
        if (sect_reftext !== false && sect_reftext !== nil && sect_reftext != null) {
          attributes['$[]=']("reftext", sect_reftext)};
        section = $scope.get('Section').$new(parent, sect_level, document.$attributes()['$has_key?']("sectnums"));
        if (source_location !== false && source_location !== nil && source_location != null) {
          (($a = [source_location]), $b = section, $b['$source_location='].apply($b, $a), $a[$a.length-1])};
        (($a = [sect_id]), $b = section, $b['$id='].apply($b, $a), $a[$a.length-1]);
        (($a = [sect_title]), $b = section, $b['$title='].apply($b, $a), $a[$a.length-1]);
        if ((($a = attributes['$[]'](1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = self.$parse_style_attribute(attributes, reader), $a = Opal.to_ary($b), style = ($a[0] == null ? nil : $a[0]), _ = ($a[1] == null ? nil : $a[1]), $b;
          if (style !== false && style !== nil && style != null) {
            (($a = [style]), $b = section, $b['$sectname='].apply($b, $a), $a[$a.length-1]);
            (($a = [true]), $b = section, $b['$special='].apply($b, $a), $a[$a.length-1]);
            if ((($a = (($b = section.$sectname()['$==']("abstract")) ? document.$doctype()['$==']("book") : section.$sectname()['$==']("abstract"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              (($a = ["sect1"]), $b = section, $b['$sectname='].apply($b, $a), $a[$a.length-1]);
              (($a = [false]), $b = section, $b['$special='].apply($b, $a), $a[$a.length-1]);
              (($a = [1]), $b = section, $b['$level='].apply($b, $a), $a[$a.length-1]);};
            } else {
            (($a = ["sect" + (section.$level())]), $b = section, $b['$sectname='].apply($b, $a), $a[$a.length-1])
          };
        } else if ((($a = (($b = sect_title.$downcase()['$==']("synopsis")) ? document.$doctype()['$==']("manpage") : sect_title.$downcase()['$==']("synopsis"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [true]), $b = section, $b['$special='].apply($b, $a), $a[$a.length-1]);
          (($a = ["synopsis"]), $b = section, $b['$sectname='].apply($b, $a), $a[$a.length-1]);
          } else {
          (($a = ["sect" + (section.$level())]), $b = section, $b['$sectname='].apply($b, $a), $a[$a.length-1])
        };
        if ((($a = ($b = section.$id()['$!'](), $b !== false && $b !== nil && $b != null ?(id = attributes['$[]']("id")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [id]), $b = section, $b['$id='].apply($b, $a), $a[$a.length-1])
          } else {
          ($a = section, ((($b = $a.$id()) !== false && $b !== nil && $b != null) ? $b : $a['$id='](section.$generate_id())))
        };
        if ((($a = section.$id()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          section.$document().$register("ids", [section.$id(), (((($a = attributes['$[]']("reftext")) !== false && $a !== nil && $a != null) ? $a : section.$title()))])};
        section.$update_attributes(attributes);
        reader.$skip_blank_lines();
        return section;
      }, TMP_32.$$arity = -3);

      Opal.defs(self, '$section_level', TMP_33 = function ːsection_level(line) {
        var self = this;

        return $scope.get('SECTION_LEVELS')['$[]'](line.$chr());
      }, TMP_33.$$arity = 1);

      Opal.defs(self, '$single_line_section_level', TMP_34 = function ːsingle_line_section_level(marker) {
        var self = this;

        return $rb_minus(marker.$length(), 1);
      }, TMP_34.$$arity = 1);

      Opal.defs(self, '$is_next_line_section?', TMP_35 = function(reader, attributes) {
        var $a, $b, $c, $d, self = this, val = nil, ord_0 = nil;

        if ((($a = ($b = ($c = ((val = attributes['$[]'](1)))['$nil?']()['$!'](), $c !== false && $c !== nil && $c != null ?(((($d = ((ord_0 = val['$[]'](0).$ord()))['$=='](100)) !== false && $d !== nil && $d != null) ? $d : ord_0['$=='](102))) : $c), $b !== false && $b !== nil && $b != null ?val['$=~']($scope.get('FloatingTitleStyleRx')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false};
        if ((($a = reader['$has_more_lines?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        if ((($a = $scope.get('Compliance').$underline_style_section_titles()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = self)['$is_section_title?'].apply($a, Opal.to_a(reader.$peek_lines(2)))
          } else {
          return self['$is_section_title?'](reader.$peek_line())
        };
      }, TMP_35.$$arity = 2);

      Opal.defs(self, '$is_next_line_document_title?', TMP_36 = function(reader, attributes) {
        var self = this;

        return self['$is_next_line_section?'](reader, attributes)['$=='](0);
      }, TMP_36.$$arity = 2);

      Opal.defs(self, '$is_section_title?', TMP_37 = function(line1, line2) {
        var $a, $b, self = this, level = nil;

        if (line2 == null) {
          line2 = nil;
        }
        if ((($a = (level = self['$is_single_line_section_title?'](line1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return level
        } else if ((($a = (($b = line2 !== false && line2 !== nil && line2 != null) ? (level = self['$is_two_line_section_title?'](line1, line2)) : line2)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return level
          } else {
          return false
        };
      }, TMP_37.$$arity = -2);

      Opal.defs(self, '$is_single_line_section_title?', TMP_38 = function(line1) {
        var $a, $b, $c, $d, self = this, first_char = nil, match = nil;

        first_char = (function() {if (line1 !== false && line1 !== nil && line1 != null) {
          return line1.$chr()
          } else {
          return nil
        }; return nil; })();
        if ((($a = ($b = (((($c = first_char['$==']("=")) !== false && $c !== nil && $c != null) ? $c : (($d = $scope.get('Compliance').$markdown_syntax(), $d !== false && $d !== nil && $d != null ?first_char['$==']("#") : $d)))), $b !== false && $b !== nil && $b != null ?(match = $scope.get('AtxSectionRx').$match(line1)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$single_line_section_level(match['$[]'](1))
          } else {
          return false
        };
      }, TMP_38.$$arity = 1);

      Opal.defs(self, '$is_two_line_section_title?', TMP_39 = function(line1, line2) {
        var $a, $b, $c, $d, $e, $f, self = this;

        if ((($a = ($b = ($c = ($d = ($e = (($f = line1 !== false && line1 !== nil && line1 != null) ? line2 : line1), $e !== false && $e !== nil && $e != null ?$scope.get('SECTION_LEVELS')['$has_key?'](line2.$chr()) : $e), $d !== false && $d !== nil && $d != null ?line2['$=~']($scope.get('SetextSectionLineRx')) : $d), $c !== false && $c !== nil && $c != null ?line1['$=~']($scope.get('SetextSectionTitleRx')) : $c), $b !== false && $b !== nil && $b != null ?$rb_le(($rb_minus(self.$line_length(line1), self.$line_length(line2))).$abs(), 1) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$section_level(line2)
          } else {
          return false
        };
      }, TMP_39.$$arity = 2);

      Opal.defs(self, '$parse_section_title', TMP_40 = function ːparse_section_title(reader, document) {
        var $a, $b, $c, $d, $e, self = this, line1 = nil, sect_id = nil, sect_title = nil, sect_level = nil, sect_reftext = nil, single_line = nil, first_char = nil, match = nil, anchor_match = nil, line2 = nil, name_match = nil;

        line1 = reader.$read_line();
        sect_id = nil;
        sect_title = nil;
        sect_level = -1;
        sect_reftext = nil;
        single_line = true;
        first_char = line1.$chr();
        if ((($a = ($b = (((($c = first_char['$==']("=")) !== false && $c !== nil && $c != null) ? $c : (($d = $scope.get('Compliance').$markdown_syntax(), $d !== false && $d !== nil && $d != null ?first_char['$==']("#") : $d)))), $b !== false && $b !== nil && $b != null ?(match = $scope.get('AtxSectionRx').$match(line1)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          sect_level = self.$single_line_section_level(match['$[]'](1));
          sect_title = match['$[]'](2);
          if ((($a = ($b = sect_title['$end_with?']("]]"), $b !== false && $b !== nil && $b != null ?(anchor_match = $scope.get('InlineSectionAnchorRx').$match(sect_title)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = anchor_match['$[]'](2)['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              sect_title = anchor_match['$[]'](1);
              sect_id = anchor_match['$[]'](3);
              sect_reftext = anchor_match['$[]'](4);}};
        } else if ((($a = $scope.get('Compliance').$underline_style_section_titles()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = ($c = ($d = ($e = (line2 = reader.$peek_line(true)), $e !== false && $e !== nil && $e != null ?$scope.get('SECTION_LEVELS')['$has_key?'](line2.$chr()) : $e), $d !== false && $d !== nil && $d != null ?line2['$=~']($scope.get('SetextSectionLineRx')) : $d), $c !== false && $c !== nil && $c != null ?(name_match = $scope.get('SetextSectionTitleRx').$match(line1)) : $c), $b !== false && $b !== nil && $b != null ?$rb_le(($rb_minus(self.$line_length(line1), self.$line_length(line2))).$abs(), 1) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            sect_title = name_match['$[]'](1);
            if ((($a = ($b = sect_title['$end_with?']("]]"), $b !== false && $b !== nil && $b != null ?(anchor_match = $scope.get('InlineSectionAnchorRx').$match(sect_title)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = anchor_match['$[]'](2)['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                sect_title = anchor_match['$[]'](1);
                sect_id = anchor_match['$[]'](3);
                sect_reftext = anchor_match['$[]'](4);}};
            sect_level = self.$section_level(line2);
            single_line = false;
            reader.$advance();}};
        if ((($a = $rb_ge(sect_level, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          sect_level = $rb_plus(sect_level, document.$attr("leveloffset", 0).$to_i())};
        return [sect_id, sect_reftext, sect_title, sect_level, single_line];
      }, TMP_40.$$arity = 2);

      Opal.defs(self, '$line_length', TMP_41 = function ːline_length(line) {
        var $a, self = this;

        if ((($a = $scope.get('FORCE_UNICODE_LINE_LENGTH')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return line.$scan($scope.get('UnicodeCharScanRx')).$length()
          } else {
          return line.$length()
        };
      }, TMP_41.$$arity = 1);

      Opal.defs(self, '$parse_header_metadata', TMP_44 = function ːparse_header_metadata(reader, document) {
        var $a, $b, TMP_42, $c, TMP_43, $d, self = this, metadata = nil, implicit_author = nil, implicit_authors = nil, author_metadata = nil, rev_metadata = nil, rev_line = nil, match = nil, component = nil, author_line = nil, authors = nil, author_key = nil;

        if (document == null) {
          document = nil;
        }
        self.$process_attribute_entries(reader, document);
        metadata = $hash2([], {});
        implicit_author = nil;
        implicit_authors = nil;
        if ((($a = ($b = reader['$has_more_lines?'](), $b !== false && $b !== nil && $b != null ?reader['$next_line_empty?']()['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          author_metadata = self.$process_authors(reader.$read_line());
          if ((($a = author_metadata['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            if (document !== false && document !== nil && document != null) {
              ($a = ($b = author_metadata).$each, $a.$$p = (TMP_42 = function(key, val){var self = TMP_42.$$s || this, $c;
if (key == null) key = nil;if (val == null) val = nil;
              if ((($c = document.$attributes()['$has_key?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return nil
                  } else {
                  return document.$attributes()['$[]='](key, (function() {if ((($c = Opal.get('String')['$==='](val)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                    return (document.$apply_header_subs(val))
                    } else {
                    return val
                  }; return nil; })())
                }}, TMP_42.$$s = self, TMP_42.$$arity = 2, TMP_42), $a).call($b);
              implicit_author = document.$attributes()['$[]']("author");
              implicit_authors = document.$attributes()['$[]']("authors");};
            metadata = author_metadata;
          };
          self.$process_attribute_entries(reader, document);
          rev_metadata = $hash2([], {});
          if ((($a = ($c = reader['$has_more_lines?'](), $c !== false && $c !== nil && $c != null ?reader['$next_line_empty?']()['$!']() : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            rev_line = reader.$read_line();
            if ((($a = (match = $scope.get('RevisionInfoLineRx').$match(rev_line))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = match['$[]'](1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                rev_metadata['$[]=']("revnumber", match['$[]'](1).$rstrip())};
              if ((($a = ((component = match['$[]'](2).$strip()))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else if ((($a = ($c = match['$[]'](1)['$!'](), $c !== false && $c !== nil && $c != null ?(component['$start_with?']("v")) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                rev_metadata['$[]=']("revnumber", component['$[]']($range(1, -1, false)))
                } else {
                rev_metadata['$[]=']("revdate", component)
              };
              if ((($a = match['$[]'](3)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                rev_metadata['$[]=']("revremark", match['$[]'](3).$rstrip())};
              } else {
              reader.$unshift_line(rev_line)
            };};
          if ((($a = rev_metadata['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            if (document !== false && document !== nil && document != null) {
              ($a = ($c = rev_metadata).$each, $a.$$p = (TMP_43 = function(key, val){var self = TMP_43.$$s || this, $d;
if (key == null) key = nil;if (val == null) val = nil;
              if ((($d = document.$attributes()['$has_key?'](key)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return nil
                  } else {
                  return document.$attributes()['$[]='](key, document.$apply_header_subs(val))
                }}, TMP_43.$$s = self, TMP_43.$$arity = 2, TMP_43), $a).call($c)};
            metadata.$update(rev_metadata);
          };
          self.$process_attribute_entries(reader, document);
          reader.$skip_blank_lines();};
        if (document !== false && document !== nil && document != null) {
          author_metadata = nil;
          if ((($a = ($d = document.$attributes()['$has_key?']("author"), $d !== false && $d !== nil && $d != null ?((author_line = document.$attributes()['$[]']("author")))['$!='](implicit_author) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            author_metadata = self.$process_authors(author_line, true, false)
          } else if ((($a = ($d = document.$attributes()['$has_key?']("authors"), $d !== false && $d !== nil && $d != null ?((author_line = document.$attributes()['$[]']("authors")))['$!='](implicit_authors) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            author_metadata = self.$process_authors(author_line, true)
            } else {
            authors = [];
            author_key = "author_" + ($rb_plus(authors.$size(), 1));
            while ((($d = document.$attributes()['$has_key?'](author_key)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            authors['$<<'](document.$attributes()['$[]'](author_key));
            author_key = "author_" + ($rb_plus(authors.$size(), 1));};
            if (authors.$size()['$=='](1)) {
              author_metadata = self.$process_authors(authors['$[]'](0), true, false)
            } else if ((($a = $rb_gt(authors.$size(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              author_metadata = self.$process_authors(authors.$join("; "), true)};
          };
          if (author_metadata !== false && author_metadata !== nil && author_metadata != null) {
            document.$attributes().$update(author_metadata);
            if ((($a = ($d = document.$attributes()['$has_key?']("email")['$!'](), $d !== false && $d !== nil && $d != null ?document.$attributes()['$has_key?']("email_1") : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              document.$attributes()['$[]=']("email", document.$attributes()['$[]']("email_1"))};};};
        return metadata;
      }, TMP_44.$$arity = -2);

      Opal.defs(self, '$process_authors', TMP_50 = function ːprocess_authors(author_line, names_only, multiple) {
        var $a, $b, TMP_45, $c, TMP_46, self = this, author_metadata = nil, keys = nil, author_entries = nil;

        if (names_only == null) {
          names_only = false;
        }
        if (multiple == null) {
          multiple = true;
        }
        author_metadata = $hash2([], {});
        keys = ["author", "authorinitials", "firstname", "middlename", "lastname", "email"];
        author_entries = (function() {if (multiple !== false && multiple !== nil && multiple != null) {
          return ($a = ($b = (author_line.$split(";"))).$map, $a.$$p = (TMP_45 = function(line){var self = TMP_45.$$s || this;
if (line == null) line = nil;
          return line.$strip()}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45), $a).call($b)
          } else {
          return [author_line]
        }; return nil; })();
        ($a = ($c = author_entries).$each_with_index, $a.$$p = (TMP_46 = function(author_entry, idx){var self = TMP_46.$$s || this, $d, $e, TMP_47, $f, TMP_48, $g, TMP_49, key_map = nil, segments = nil, match = nil, fname = nil, mname = nil, lname = nil;
if (author_entry == null) author_entry = nil;if (idx == null) idx = nil;
        if ((($d = author_entry['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil;};
          key_map = $hash2([], {});
          if (idx['$=='](0)) {
            ($d = ($e = keys).$each, $d.$$p = (TMP_47 = function(key){var self = TMP_47.$$s || this;
if (key == null) key = nil;
            return key_map['$[]='](key.$to_sym(), key)}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47), $d).call($e)
            } else {
            ($d = ($f = keys).$each, $d.$$p = (TMP_48 = function(key){var self = TMP_48.$$s || this;
if (key == null) key = nil;
            return key_map['$[]='](key.$to_sym(), "" + (key) + "_" + ($rb_plus(idx, 1)))}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48), $d).call($f)
          };
          segments = nil;
          if (names_only !== false && names_only !== nil && names_only != null) {
            if ((($d = $rb_gt(((segments = author_entry.$split(" "))).$size(), 3)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              segments = segments['$[]']($range(0, 1, false)).$push(segments['$[]']($range(2, -1, false)).$join(" "))}
          } else if ((($d = (match = $scope.get('AuthorInfoLineRx').$match(author_entry))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            segments = match.$to_a();
            segments.$shift();};
          if ((($d = segments['$nil?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            author_metadata['$[]='](key_map['$[]']("author"), author_metadata['$[]='](key_map['$[]']("firstname"), fname = author_entry.$strip().$tr_s(" ", " ")));
            author_metadata['$[]='](key_map['$[]']("authorinitials"), fname['$[]'](0, 1));
            } else {
            author_metadata['$[]='](key_map['$[]']("firstname"), fname = segments['$[]'](0).$tr("_", " "));
            author_metadata['$[]='](key_map['$[]']("author"), fname);
            author_metadata['$[]='](key_map['$[]']("authorinitials"), fname['$[]'](0, 1));
            if ((($d = ($g = segments['$[]'](1)['$nil?']()['$!'](), $g !== false && $g !== nil && $g != null ?segments['$[]'](2)['$nil?']()['$!']() : $g)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              author_metadata['$[]='](key_map['$[]']("middlename"), mname = segments['$[]'](1).$tr("_", " "));
              author_metadata['$[]='](key_map['$[]']("lastname"), lname = segments['$[]'](2).$tr("_", " "));
              author_metadata['$[]='](key_map['$[]']("author"), [fname, mname, lname].$join(" "));
              author_metadata['$[]='](key_map['$[]']("authorinitials"), [fname['$[]'](0, 1), mname['$[]'](0, 1), lname['$[]'](0, 1)].$join());
            } else if ((($d = segments['$[]'](1)['$nil?']()['$!']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              author_metadata['$[]='](key_map['$[]']("lastname"), lname = segments['$[]'](1).$tr("_", " "));
              author_metadata['$[]='](key_map['$[]']("author"), [fname, lname].$join(" "));
              author_metadata['$[]='](key_map['$[]']("authorinitials"), [fname['$[]'](0, 1), lname['$[]'](0, 1)].$join());};
            if ((($d = ((($g = names_only) !== false && $g !== nil && $g != null) ? $g : segments['$[]'](3)['$nil?']())) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              } else {
              author_metadata['$[]='](key_map['$[]']("email"), segments['$[]'](3))
            };
          };
          author_metadata['$[]=']("authorcount", $rb_plus(idx, 1));
          if (idx['$=='](1)) {
            ($d = ($g = keys).$each, $d.$$p = (TMP_49 = function(key){var self = TMP_49.$$s || this, $h;
if (key == null) key = nil;
            if ((($h = author_metadata['$has_key?'](key)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                return author_metadata['$[]=']("" + (key) + "_1", author_metadata['$[]'](key))
                } else {
                return nil
              }}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49), $d).call($g)};
          if (idx['$=='](0)) {
            return author_metadata['$[]=']("authors", author_metadata['$[]'](key_map['$[]']("author")))
            } else {
            return author_metadata['$[]=']("authors", "" + (author_metadata['$[]']("authors")) + ", " + (author_metadata['$[]'](key_map['$[]']("author"))))
          };}, TMP_46.$$s = self, TMP_46.$$arity = 2, TMP_46), $a).call($c);
        return author_metadata;
      }, TMP_50.$$arity = -2);

      Opal.defs(self, '$parse_block_metadata_lines', TMP_51 = function ːparse_block_metadata_lines(reader, parent, attributes, options) {
        var $a, $b, self = this;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if (options == null) {
          options = $hash2([], {});
        }
        while ((($b = self.$parse_block_metadata_line(reader, parent, attributes, options)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        reader.$advance();
        reader.$skip_blank_lines();};
        return attributes;
      }, TMP_51.$$arity = -3);

      Opal.defs(self, '$parse_block_metadata_line', TMP_52 = function ːparse_block_metadata_line(reader, parent, attributes, options) {
        var $a, $b, $c, self = this, next_line = nil, commentish = nil, match = nil, terminator = nil, in_square_brackets = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        if ((($a = reader['$has_more_lines?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return false
        };
        next_line = reader.$peek_line();
        if ((($a = ($b = (commentish = next_line['$start_with?']("//")), $b !== false && $b !== nil && $b != null ?(match = $scope.get('CommentBlockRx').$match(next_line)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          terminator = match['$[]'](0);
          reader.$read_lines_until($hash2(["skip_first_line", "preserve_last_line", "terminator", "skip_processing"], {"skip_first_line": true, "preserve_last_line": true, "terminator": terminator, "skip_processing": true}));
        } else if ((($a = (($b = commentish !== false && commentish !== nil && commentish != null) ? $scope.get('CommentLineRx')['$=~'](next_line) : commentish)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else if ((($a = ($b = ($c = options['$[]']("text")['$!'](), $c !== false && $c !== nil && $c != null ?next_line['$start_with?'](":") : $c), $b !== false && $b !== nil && $b != null ?(match = $scope.get('AttributeEntryRx').$match(next_line)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$process_attribute_entry(reader, parent, attributes, match)
        } else if ((($a = ($b = (in_square_brackets = ($c = next_line['$start_with?']("["), $c !== false && $c !== nil && $c != null ?next_line['$end_with?']("]") : $c)), $b !== false && $b !== nil && $b != null ?(match = $scope.get('BlockAnchorRx').$match(next_line)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = match['$[]'](1)['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            attributes['$[]=']("id", match['$[]'](1));
            if ((($a = match['$[]'](2)['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              attributes['$[]=']("reftext", match['$[]'](2))
            };
          }
        } else if ((($a = (($b = in_square_brackets !== false && in_square_brackets !== nil && in_square_brackets != null) ? (match = $scope.get('BlockAttributeListRx').$match(next_line)) : in_square_brackets)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          parent.$document().$parse_attributes(match['$[]'](1), [], $hash2(["sub_input", "into"], {"sub_input": true, "into": attributes}))
        } else if ((($a = ($b = options['$[]']("text")['$!'](), $b !== false && $b !== nil && $b != null ?(match = $scope.get('BlockTitleRx').$match(next_line)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          attributes['$[]=']("title", match['$[]'](1))
          } else {
          return false
        };
        return true;
      }, TMP_52.$$arity = -4);

      Opal.defs(self, '$process_attribute_entries', TMP_53 = function ːprocess_attribute_entries(reader, parent, attributes) {
        var $a, $b, self = this;

        if (attributes == null) {
          attributes = nil;
        }
        reader.$skip_comment_lines();
        while ((($b = self.$process_attribute_entry(reader, parent, attributes)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        reader.$advance();
        reader.$skip_comment_lines();};
      }, TMP_53.$$arity = -3);

      Opal.defs(self, '$process_attribute_entry', TMP_54 = function ːprocess_attribute_entry(reader, parent, attributes, match) {
        var $a, $b, self = this, name = nil, value = nil, line_continuation = nil, next_line = nil, keep_open = nil, separator = nil;

        if (attributes == null) {
          attributes = nil;
        }
        if (match == null) {
          match = nil;
        }
        ((($a = match) !== false && $a !== nil && $a != null) ? $a : match = ((function() {if ((($b = reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return $scope.get('AttributeEntryRx').$match(reader.$peek_line())
          } else {
          return nil
        }; return nil; })()));
        if (match !== false && match !== nil && match != null) {
          name = match['$[]'](1);
          if ((($a = ((value = ((($b = match['$[]'](2)) !== false && $b !== nil && $b != null) ? $b : "")))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if ((($a = ((($b = value['$end_with?'](line_continuation = $scope.get('LINE_CONTINUATION'))) !== false && $b !== nil && $b != null) ? $b : value['$end_with?'](line_continuation = $scope.get('LINE_CONTINUATION_LEGACY')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            value = value.$chop().$rstrip();
            while ((($b = reader.$advance()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ((next_line = reader.$peek_line().$strip()))['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              break;};
            if ((($b = (keep_open = next_line['$end_with?'](line_continuation))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              next_line = next_line.$chop().$rstrip()};
            separator = (function() {if ((($b = (value['$end_with?']($scope.get('LINE_BREAK')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              return $scope.get('EOL')
              } else {
              return " "
            }; return nil; })();
            value = "" + (value) + (separator) + (next_line);
            if (keep_open !== false && keep_open !== nil && keep_open != null) {
              } else {
              break;
            };};};
          self.$store_attribute(name, value, ((function() {if (parent !== false && parent !== nil && parent != null) {
            return parent.$document()
            } else {
            return nil
          }; return nil; })()), attributes);
          return true;
          } else {
          return false
        };
      }, TMP_54.$$arity = -3);

      Opal.defs(self, '$store_attribute', TMP_55 = function ːstore_attribute(name, value, doc, attrs) {
        var $a, $b, self = this, accessible = nil, $case = nil;

        if (doc == null) {
          doc = nil;
        }
        if (attrs == null) {
          attrs = nil;
        }
        if ((($a = name['$end_with?']("!")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = nil;
          name = name.$chop();
        } else if ((($a = name['$start_with?']("!")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          value = nil;
          name = name['$[]']($range(1, -1, false));};
        name = self.$sanitize_attribute_name(name);
        accessible = true;
        if (doc !== false && doc !== nil && doc != null) {
          if (name['$==']("numbered")) {
            name = "sectnums"
          } else if (name['$==']("leveloffset")) {
            if (value !== false && value !== nil && value != null) {
              $case = value.$chr();if ("+"['$===']($case)) {value = ($rb_plus((doc.$attr("leveloffset", 0)).$to_i(), (((($a = value['$[]']($range(1, -1, false))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i())).$to_s()}else if ("-"['$===']($case)) {value = ($rb_minus((doc.$attr("leveloffset", 0)).$to_i(), (((($a = value['$[]']($range(1, -1, false))) !== false && $a !== nil && $a != null) ? $a : 0)).$to_i())).$to_s()}}};
          accessible = (function() {if (value !== false && value !== nil && value != null) {
            return doc.$set_attribute(name, value)
            } else {
            return doc.$delete_attribute(name)
          }; return nil; })();};
        if ((($a = (($b = accessible !== false && accessible !== nil && accessible != null) ? attrs : accessible)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (value !== false && value !== nil && value != null) {
            value = doc.$attributes()['$[]'](name)};
          (($scope.get('Document')).$$scope.get('AttributeEntry')).$new(name, value).$save_to(attrs);};
        return [name, value];
      }, TMP_55.$$arity = -3);

      Opal.defs(self, '$resolve_list_marker', TMP_56 = function ːresolve_list_marker(list_type, marker, ordinal, validate, reader) {
        var $a, $b, self = this;

        if (ordinal == null) {
          ordinal = 0;
        }
        if (validate == null) {
          validate = false;
        }
        if (reader == null) {
          reader = nil;
        }
        if ((($a = (($b = list_type['$==']("olist")) ? marker['$start_with?'](".")['$!']() : list_type['$==']("olist"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$resolve_ordered_list_marker(marker, ordinal, validate, reader)
        } else if (list_type['$==']("colist")) {
          return "<1>"
          } else {
          return marker
        };
      }, TMP_56.$$arity = -3);

      Opal.defs(self, '$resolve_ordered_list_marker', TMP_58 = function ːresolve_ordered_list_marker(marker, ordinal, validate, reader) {
        var $a, $b, TMP_57, $c, self = this, number_style = nil, expected = nil, actual = nil, $case = nil;

        if (ordinal == null) {
          ordinal = 0;
        }
        if (validate == null) {
          validate = false;
        }
        if (reader == null) {
          reader = nil;
        }
        number_style = ($a = ($b = $scope.get('ORDERED_LIST_STYLES')).$find, $a.$$p = (TMP_57 = function(s){var self = TMP_57.$$s || this;
if (s == null) s = nil;
        return $scope.get('OrderedListMarkerRxMap')['$[]'](s)['$=~'](marker)}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57), $a).call($b);
        expected = actual = nil;
        $case = number_style;if ("arabic"['$===']($case)) {if (validate !== false && validate !== nil && validate != null) {
          expected = $rb_plus(ordinal, 1);
          actual = marker.$to_i();};
        marker = "1.";}else if ("loweralpha"['$===']($case)) {if (validate !== false && validate !== nil && validate != null) {
          expected = ($rb_plus("a"['$[]'](0).$ord(), ordinal)).$chr();
          actual = marker.$chomp(".");};
        marker = "a.";}else if ("upperalpha"['$===']($case)) {if (validate !== false && validate !== nil && validate != null) {
          expected = ($rb_plus("A"['$[]'](0).$ord(), ordinal)).$chr();
          actual = marker.$chomp(".");};
        marker = "A.";}else if ("lowerroman"['$===']($case)) {if (validate !== false && validate !== nil && validate != null) {
          expected = $rb_plus(ordinal, 1);
          actual = self.$roman_numeral_to_int(marker.$chomp(")"));};
        marker = "i)";}else if ("upperroman"['$===']($case)) {if (validate !== false && validate !== nil && validate != null) {
          expected = $rb_plus(ordinal, 1);
          actual = self.$roman_numeral_to_int(marker.$chomp(")"));};
        marker = "I)";};
        if ((($a = (($c = validate !== false && validate !== nil && validate != null) ? expected['$!='](actual) : validate)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$warn("asciidoctor: WARNING: " + (reader.$line_info()) + ": list item index: expected " + (expected) + ", got " + (actual))};
        return marker;
      }, TMP_58.$$arity = -2);

      Opal.defs(self, '$is_sibling_list_item?', TMP_59 = function(line, list_type, sibling_trait) {
        var $a, self = this, matcher = nil, expected_marker = nil, m = nil;

        if ((($a = Opal.get('Regexp')['$==='](sibling_trait)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          matcher = sibling_trait;
          expected_marker = false;
          } else {
          matcher = $scope.get('ListRxMap')['$[]'](list_type);
          expected_marker = sibling_trait;
        };
        if ((($a = (m = matcher.$match(line))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (expected_marker !== false && expected_marker !== nil && expected_marker != null) {
            return expected_marker['$=='](self.$resolve_list_marker(list_type, m['$[]'](1)))
            } else {
            return true
          }
          } else {
          return false
        };
      }, TMP_59.$$arity = 3);

      Opal.defs(self, '$next_table', TMP_60 = function ːnext_table(table_reader, parent, attributes) {
        var $a, $b, $c, $d, $e, $f, self = this, table = nil, colspecs = nil, explicit_colspecs = nil, skipped = nil, parser_ctx = nil, skip_implicit_header = nil, loop_idx = nil, line = nil, next_line = nil, next_cellspec = nil, seen = nil, m = nil, cell_text = nil;

        table = $scope.get('Table').$new(parent, attributes);
        if ((($a = (attributes['$has_key?']("title"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [attributes.$delete("title")]), $b = table, $b['$title='].apply($b, $a), $a[$a.length-1]);
          table.$assign_caption(attributes.$delete("caption"));};
        if ((($a = ($b = (attributes['$key?']("cols")), $b !== false && $b !== nil && $b != null ?((colspecs = self.$parse_colspecs(attributes['$[]']("cols"))))['$empty?']()['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          table.$create_columns(colspecs);
          explicit_colspecs = true;
          } else {
          explicit_colspecs = false
        };
        skipped = table_reader.$skip_blank_lines();
        parser_ctx = (($scope.get('Table')).$$scope.get('ParserContext')).$new(table_reader, table, attributes);
        skip_implicit_header = ((($a = (attributes['$key?']("header-option"))) !== false && $a !== nil && $a != null) ? $a : (attributes['$key?']("noheader-option")));
        loop_idx = -1;
        while ((($b = table_reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        loop_idx = $rb_plus(loop_idx, 1);
        line = table_reader.$read_line();
        if ((($b = ($c = ($d = ($e = ($f = skip_implicit_header['$!'](), $f !== false && $f !== nil && $f != null ?skipped['$=='](0) : $f), $e !== false && $e !== nil && $e != null ?loop_idx['$=='](0) : $e), $d !== false && $d !== nil && $d != null ?((next_line = table_reader.$peek_line()))['$nil?']()['$!']() : $d), $c !== false && $c !== nil && $c != null ?next_line['$empty?']() : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          (($b = [true]), $c = table, $c['$has_header_option='].apply($c, $b), $b[$b.length-1]);
          attributes['$[]=']("header-option", "");
          attributes['$[]=']("options", (function() {if ((($b = (attributes['$key?']("options"))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return "" + (attributes['$[]']("options")) + ",header"
            } else {
            return "header"
          }; return nil; })());};
        if (parser_ctx.$format()['$==']("psv")) {
          if ((($b = parser_ctx['$starts_with_delimiter?'](line)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            line = line['$[]']($range(1, -1, false));
            parser_ctx.$close_open_cell();
            } else {
            $c = self.$parse_cellspec(line, "start", parser_ctx.$delimiter()), $b = Opal.to_ary($c), next_cellspec = ($b[0] == null ? nil : $b[0]), line = ($b[1] == null ? nil : $b[1]), $c;
            if ((($b = next_cellspec['$nil?']()['$!']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              parser_ctx.$close_open_cell(next_cellspec)};
          }};
        seen = false;
        while ((($c = ((($d = seen['$!']()) !== false && $d !== nil && $d != null) ? $d : line['$empty?']()['$!']())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
        seen = true;
        if ((($c = (m = parser_ctx.$match_delimiter(line))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          if (parser_ctx.$format()['$==']("csv")) {
            if ((($c = parser_ctx['$buffer_has_unclosed_quotes?'](m.$pre_match())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              line = parser_ctx.$skip_matched_delimiter(m);
              continue;;}
          } else if ((($c = m.$pre_match()['$end_with?']("\\")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = ((line = parser_ctx.$skip_matched_delimiter(m, true)))['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              (($c = ["" + (parser_ctx.$buffer()) + ($scope.get('EOL'))]), $d = parser_ctx, $d['$buffer='].apply($d, $c), $c[$c.length-1]);
              parser_ctx.$keep_cell_open();
              break;;};
            continue;;};
          if (parser_ctx.$format()['$==']("psv")) {
            $d = self.$parse_cellspec(m.$pre_match(), "end"), $c = Opal.to_ary($d), next_cellspec = ($c[0] == null ? nil : $c[0]), cell_text = ($c[1] == null ? nil : $c[1]), $d;
            parser_ctx.$push_cellspec(next_cellspec);
            (($c = ["" + (parser_ctx.$buffer()) + (cell_text)]), $d = parser_ctx, $d['$buffer='].apply($d, $c), $c[$c.length-1]);
            } else {
            (($c = ["" + (parser_ctx.$buffer()) + (m.$pre_match())]), $d = parser_ctx, $d['$buffer='].apply($d, $c), $c[$c.length-1])
          };
          if ((($c = ((line = m.$post_match()))['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            seen = false};
          parser_ctx.$close_cell();
          } else {
          (($c = ["" + (parser_ctx.$buffer()) + (line) + ($scope.get('EOL'))]), $d = parser_ctx, $d['$buffer='].apply($d, $c), $c[$c.length-1]);
          if (parser_ctx.$format()['$==']("csv")) {
            (($c = ["" + (parser_ctx.$buffer().$rstrip()) + " "]), $d = parser_ctx, $d['$buffer='].apply($d, $c), $c[$c.length-1])};
          line = "";
          if ((($c = ((($d = parser_ctx.$format()['$==']("psv")) !== false && $d !== nil && $d != null) ? $d : ((($e = parser_ctx.$format()['$==']("csv")) ? parser_ctx['$buffer_has_unclosed_quotes?']() : parser_ctx.$format()['$==']("csv"))))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            parser_ctx.$keep_cell_open()
            } else {
            parser_ctx.$close_cell(true)
          };
        };};
        if ((($b = parser_ctx['$cell_open?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          skipped = table_reader.$skip_blank_lines()
        };
        if ((($b = table_reader['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        } else if ((($b = parser_ctx['$cell_open?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          parser_ctx.$close_cell(true)};};
        if ((($a = ((($b = (($c = "colcount", $d = table.$attributes(), ((($e = $d['$[]']($c)) !== false && $e !== nil && $e != null) ? $e : $d['$[]=']($c, table.$columns().$size()))))['$=='](0)) !== false && $b !== nil && $b != null) ? $b : explicit_colspecs)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          table.$assign_column_widths()
        };
        table.$partition_header_footer(attributes);
        return table;
      }, TMP_60.$$arity = 3);

      Opal.defs(self, '$parse_colspecs', TMP_64 = function ːparse_colspecs(records) {
        var $a, $b, TMP_61, $c, TMP_62, self = this, specs = nil;

        if ((($a = records['$include?'](" ")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          records = records.$tr(" ", "")};
        if (records['$=='](records.$to_i().$to_s())) {
          return ($a = ($b = Opal.get('Array')).$new, $a.$$p = (TMP_61 = function(){var self = TMP_61.$$s || this;

          return $hash2(["width"], {"width": 1})}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61), $a).call($b, records.$to_i())};
        specs = [];
        ($a = ($c = records.$split(",", -1)).$each, $a.$$p = (TMP_62 = function(record){var self = TMP_62.$$s || this, $d, $e, TMP_63, m = nil, spec = nil, colspec = nil, rowspec = nil;
if (record == null) record = nil;
        if ((($d = record['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return specs['$<<']($hash2(["width"], {"width": 1}))
          } else if ((($d = (m = $scope.get('ColumnSpecRx').$match(record))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            spec = $hash2([], {});
            if ((($d = m['$[]'](2)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              $e = m['$[]'](2).$split("."), $d = Opal.to_ary($e), colspec = ($d[0] == null ? nil : $d[0]), rowspec = ($d[1] == null ? nil : $d[1]), $e;
              if ((($d = ($e = colspec['$nil_or_empty?']()['$!'](), $e !== false && $e !== nil && $e != null ?(($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("h")['$has_key?'](colspec) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                spec['$[]=']("halign", (($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("h")['$[]'](colspec))};
              if ((($d = ($e = rowspec['$nil_or_empty?']()['$!'](), $e !== false && $e !== nil && $e != null ?(($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("v")['$has_key?'](rowspec) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                spec['$[]=']("valign", (($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("v")['$[]'](rowspec))};};
            spec['$[]=']("width", ((function() {if ((($d = m['$[]'](3)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return m['$[]'](3).$to_i()
              } else {
              return 1
            }; return nil; })()));
            if ((($d = ($e = m['$[]'](4), $e !== false && $e !== nil && $e != null ?(($scope.get('Table')).$$scope.get('TEXT_STYLES'))['$has_key?'](m['$[]'](4)) : $e)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              spec['$[]=']("style", (($scope.get('Table')).$$scope.get('TEXT_STYLES'))['$[]'](m['$[]'](4)))};
            if ((($d = m['$[]'](1)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              return ($d = ($e = (1)).$upto, $d.$$p = (TMP_63 = function(){var self = TMP_63.$$s || this;

              return specs['$<<'](spec.$dup())}, TMP_63.$$s = self, TMP_63.$$arity = 0, TMP_63), $d).call($e, m['$[]'](1).$to_i())
              } else {
              return specs['$<<'](spec)
            };
            } else {
            return nil
          }}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62), $a).call($c);
        return specs;
      }, TMP_64.$$arity = 1);

      Opal.defs(self, '$parse_cellspec', TMP_65 = function ːparse_cellspec(line, pos, delimiter) {
        var $a, $b, self = this, m = nil, rest = nil, $case = nil, spec_part = nil, spec = nil, colspec = nil, rowspec = nil;

        if (pos == null) {
          pos = "start";
        }
        if (delimiter == null) {
          delimiter = nil;
        }
        m = nil;
        rest = "";
        $case = pos;if ("start"['$===']($case)) {if ((($a = line['$include?'](delimiter)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = line.$split(delimiter, 2), $a = Opal.to_ary($b), spec_part = ($a[0] == null ? nil : $a[0]), rest = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = (m = $scope.get('CellSpecStartRx').$match(spec_part))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = m['$[]'](0)['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [$hash2([], {}), rest]}
            } else {
            return [nil, line]
          };
          } else {
          return [nil, line]
        }}else if ("end"['$===']($case)) {if ((($a = (m = $scope.get('CellSpecEndRx').$match(line))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = m['$[]'](0).$lstrip()['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return [$hash2([], {}), line.$rstrip()]};
          rest = m.$pre_match();
          } else {
          return [$hash2([], {}), line]
        }};
        spec = $hash2([], {});
        if ((($a = m['$[]'](1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = m['$[]'](1).$split("."), $a = Opal.to_ary($b), colspec = ($a[0] == null ? nil : $a[0]), rowspec = ($a[1] == null ? nil : $a[1]), $b;
          colspec = (function() {if ((($a = colspec['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return 1
            } else {
            return colspec.$to_i()
          }; return nil; })();
          rowspec = (function() {if ((($a = rowspec['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return 1
            } else {
            return rowspec.$to_i()
          }; return nil; })();
          if (m['$[]'](2)['$==']("+")) {
            if (colspec['$=='](1)) {
              } else {
              spec['$[]=']("colspan", colspec)
            };
            if (rowspec['$=='](1)) {
              } else {
              spec['$[]=']("rowspan", rowspec)
            };
          } else if (m['$[]'](2)['$==']("*")) {
            if (colspec['$=='](1)) {
              } else {
              spec['$[]=']("repeatcol", colspec)
            }};};
        if ((($a = m['$[]'](3)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = m['$[]'](3).$split("."), $a = Opal.to_ary($b), colspec = ($a[0] == null ? nil : $a[0]), rowspec = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = ($b = colspec['$nil_or_empty?']()['$!'](), $b !== false && $b !== nil && $b != null ?(($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("h")['$has_key?'](colspec) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            spec['$[]=']("halign", (($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("h")['$[]'](colspec))};
          if ((($a = ($b = rowspec['$nil_or_empty?']()['$!'](), $b !== false && $b !== nil && $b != null ?(($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("v")['$has_key?'](rowspec) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            spec['$[]=']("valign", (($scope.get('Table')).$$scope.get('ALIGNMENTS'))['$[]']("v")['$[]'](rowspec))};};
        if ((($a = ($b = m['$[]'](4), $b !== false && $b !== nil && $b != null ?(($scope.get('Table')).$$scope.get('TEXT_STYLES'))['$has_key?'](m['$[]'](4)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          spec['$[]=']("style", (($scope.get('Table')).$$scope.get('TEXT_STYLES'))['$[]'](m['$[]'](4)))};
        return [spec, rest];
      }, TMP_65.$$arity = -2);

      Opal.defs(self, '$parse_style_attribute', TMP_69 = function ːparse_style_attribute(attributes, reader) {
        var $a, $b, $c, TMP_66, TMP_67, $d, TMP_68, self = this, original_style = nil, raw_style = nil, type = nil, collector = nil, parsed = nil, save_current = nil, parsed_style = nil, options = nil, existing_opts = nil;

        if (reader == null) {
          reader = nil;
        }
        original_style = attributes['$[]']("style");
        raw_style = attributes['$[]'](1);
        if ((($a = ($b = (($c = raw_style !== false && raw_style !== nil && raw_style != null) ? raw_style['$include?'](" ")['$!']() : raw_style), $b !== false && $b !== nil && $b != null ?$scope.get('Compliance').$shorthand_property_syntax() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          type = "style";
          collector = [];
          parsed = $hash2([], {});
          save_current = ($a = ($b = self).$lambda, $a.$$p = (TMP_66 = function(){var self = TMP_66.$$s || this, $d, $e, $f, $case = nil;

          if ((($d = collector['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              if ((($d = type['$!=']("style")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                return self.$warn("asciidoctor: WARNING:" + ((function() {if ((($d = reader['$nil?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return nil
                  } else {
                  return " " + (reader.$prev_line_info()) + ":"
                }; return nil; })()) + " invalid empty " + (type) + " detected in style attribute")
                } else {
                return nil
              }
              } else {
              $case = type;if ("role"['$===']($case) || "option"['$===']($case)) {($d = type, $e = parsed, ((($f = $e['$[]']($d)) !== false && $f !== nil && $f != null) ? $f : $e['$[]=']($d, [])));
              parsed['$[]'](type).$push(collector.$join());}else if ("id"['$===']($case)) {if ((($d = parsed['$has_key?']("id")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                self.$warn("asciidoctor: WARNING:" + ((function() {if ((($d = reader['$nil?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
                  return nil
                  } else {
                  return " " + (reader.$prev_line_info()) + ":"
                }; return nil; })()) + " multiple ids detected in style attribute")};
              parsed['$[]='](type, collector.$join());}else {parsed['$[]='](type, collector.$join())};
              return collector = [];
            }}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66), $a).call($b);
          ($a = ($c = raw_style).$each_char, $a.$$p = (TMP_67 = function(c){var self = TMP_67.$$s || this, $d, $e, $f, $case = nil;
if (c == null) c = nil;
          if ((($d = ((($e = ((($f = c['$=='](".")) !== false && $f !== nil && $f != null) ? $f : c['$==']("#"))) !== false && $e !== nil && $e != null) ? $e : c['$==']("%"))) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              save_current.$call();
              return (function() {$case = c;if ("."['$===']($case)) {return type = "role"}else if ("#"['$===']($case)) {return type = "id"}else if ("%"['$===']($case)) {return type = "option"}else { return nil }})();
              } else {
              return collector.$push(c)
            }}, TMP_67.$$s = self, TMP_67.$$arity = 1, TMP_67), $a).call($c);
          if (type['$==']("style")) {
            parsed_style = attributes['$[]=']("style", raw_style)
            } else {
            save_current.$call();
            if ((($a = parsed['$has_key?']("style")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              parsed_style = attributes['$[]=']("style", parsed['$[]']("style"))
              } else {
              parsed_style = nil
            };
            if ((($a = parsed['$has_key?']("id")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              attributes['$[]=']("id", parsed['$[]']("id"))};
            if ((($a = parsed['$has_key?']("role")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              attributes['$[]=']("role", $rb_times(parsed['$[]']("role"), " "))};
            if ((($a = parsed['$has_key?']("option")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              ($a = ($d = ((options = parsed['$[]']("option")))).$each, $a.$$p = (TMP_68 = function(option){var self = TMP_68.$$s || this;
if (option == null) option = nil;
              return attributes['$[]=']("" + (option) + "-option", "")}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68), $a).call($d);
              if ((($a = (existing_opts = attributes['$[]']("options"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                attributes['$[]=']("options", $rb_times(($rb_plus(options, existing_opts.$split(","))), ","))
                } else {
                attributes['$[]=']("options", $rb_times(options, ","))
              };};
          };
          return [parsed_style, original_style];
          } else {
          attributes['$[]=']("style", raw_style);
          return [raw_style, original_style];
        };
      }, TMP_69.$$arity = -2);

      Opal.defs(self, '$adjust_indentation!', TMP_77 = function(lines, indent, tab_size) {
        var $a, $b, TMP_70, $c, TMP_73, $d, TMP_74, $e, TMP_75, $f, TMP_76, self = this, full_tab_space = nil, gutter_width = nil, padding = nil;

        if (indent == null) {
          indent = 0;
        }
        if (tab_size == null) {
          tab_size = 0;
        }
        if ((($a = lines['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = ($b = $rb_gt((tab_size = tab_size.$to_i()), 0), $b !== false && $b !== nil && $b != null ?(lines.$join()['$include?']($scope.get('TAB'))) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          full_tab_space = $rb_times(" ", tab_size);
          ($a = ($b = lines)['$map!'], $a.$$p = (TMP_70 = function(line){var self = TMP_70.$$s || this, $c, $d, TMP_71, $e, TMP_72, spaces_added = nil;
if (line == null) line = nil;
          if ((($c = line['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return line;};
            if ((($c = line['$start_with?']($scope.get('TAB'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              line = ($c = ($d = line)['$sub'], $c.$$p = (TMP_71 = function(tabs){var self = TMP_71.$$s || this;
if (tabs == null) tabs = nil;
              return $rb_times(full_tab_space, tabs.$length())}, TMP_71.$$s = self, TMP_71.$$arity = 1, TMP_71), $c).call($d, $scope.get('TabIndentRx'))};
            if ((($c = line['$include?']($scope.get('TAB'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              spaces_added = 0;
              return line = ($c = ($e = line)['$gsub'], $c.$$p = (TMP_72 = function(){var self = TMP_72.$$s || this, offset = nil, spaces = nil;
                if ($gvars["~"] == null) $gvars["~"] = nil;

              if (((offset = $rb_plus(($gvars["~"].$begin(0)), spaces_added)))['$%'](tab_size)['$=='](0)) {
                  spaces_added = $rb_plus(spaces_added, ($rb_minus(tab_size, 1)));
                  return full_tab_space;
                  } else {
                  if (((spaces = $rb_minus(tab_size, offset['$%'](tab_size))))['$=='](1)) {
                    } else {
                    spaces_added = $rb_plus(spaces_added, ($rb_minus(spaces, 1)))
                  };
                  return $rb_times(" ", spaces);
                }}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72), $c).call($e, $scope.get('TabRx'));
              } else {
              return line
            };}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70), $a).call($b);};
        if ((($a = (($c = indent !== false && indent !== nil && indent != null) ? $rb_gt((indent = indent.$to_i()), -1) : indent)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        gutter_width = nil;
        (function(){var $brk = Opal.new_brk(); try {return ($a = ($c = lines).$each, $a.$$p = (TMP_73 = function(line){var self = TMP_73.$$s || this, $d, $e, line_indent = nil;
if (line == null) line = nil;
        if ((($d = line['$empty?']()) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil;};
          if (((line_indent = $rb_minus(line.$length(), line.$lstrip().$length())))['$=='](0)) {
            gutter_width = nil;
            
            Opal.brk(nil, $brk);
          } else if ((($d = (($e = gutter_width !== false && gutter_width !== nil && gutter_width != null) ? $rb_gt(line_indent, gutter_width) : gutter_width)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
            return nil
            } else {
            return gutter_width = line_indent
          };}, TMP_73.$$s = self, TMP_73.$$brk = $brk, TMP_73.$$arity = 1, TMP_73), $a).call($c)
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if (indent['$=='](0)) {
          if (gutter_width !== false && gutter_width !== nil && gutter_width != null) {
            ($a = ($d = lines)['$map!'], $a.$$p = (TMP_74 = function(line){var self = TMP_74.$$s || this, $e;
if (line == null) line = nil;
            if ((($e = line['$empty?']()) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                return line
                } else {
                return line['$[]']($range(gutter_width, -1, false))
              }}, TMP_74.$$s = self, TMP_74.$$arity = 1, TMP_74), $a).call($d)}
          } else {
          padding = $rb_times(" ", indent);
          if (gutter_width !== false && gutter_width !== nil && gutter_width != null) {
            ($a = ($e = lines)['$map!'], $a.$$p = (TMP_75 = function(line){var self = TMP_75.$$s || this, $f;
if (line == null) line = nil;
            if ((($f = line['$empty?']()) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return line
                } else {
                return $rb_plus(padding, line['$[]']($range(gutter_width, -1, false)))
              }}, TMP_75.$$s = self, TMP_75.$$arity = 1, TMP_75), $a).call($e)
            } else {
            ($a = ($f = lines)['$map!'], $a.$$p = (TMP_76 = function(line){var self = TMP_76.$$s || this, $g;
if (line == null) line = nil;
            if ((($g = line['$empty?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                return line
                } else {
                return $rb_plus(padding, line)
              }}, TMP_76.$$s = self, TMP_76.$$arity = 1, TMP_76), $a).call($f)
          };
        };
        return nil;
      }, TMP_77.$$arity = -2);

      Opal.defs(self, '$sanitize_attribute_name', TMP_78 = function ːsanitize_attribute_name(name) {
        var self = this;

        return name.$gsub($scope.get('InvalidAttributeNameCharsRx'), "").$downcase();
      }, TMP_78.$$arity = 1);

      return (Opal.defs(self, '$roman_numeral_to_int', TMP_80 = function ːroman_numeral_to_int(value) {
        var $a, $b, TMP_79, self = this, digits = nil, result = nil;

        value = value.$downcase();
        digits = $hash2(["i", "v", "x"], {"i": 1, "v": 5, "x": 10});
        result = 0;
        ($a = ($b = ($range(0, $rb_minus(value.$length(), 1), false))).$each, $a.$$p = (TMP_79 = function(i){var self = TMP_79.$$s || this, $c, $d, digit = nil;
if (i == null) i = nil;
        digit = digits['$[]'](value['$[]']($range(i, i, false)));
          if ((($c = ($d = $rb_lt($rb_plus(i, 1), value.$length()), $d !== false && $d !== nil && $d != null ?$rb_gt(digits['$[]'](value['$[]']($range($rb_plus(i, 1), $rb_plus(i, 1), false))), digit) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return result = $rb_minus(result, digit)
            } else {
            return result = $rb_plus(result, digit)
          };}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79), $a).call($b);
        return result;
      }, TMP_80.$$arity = 1), nil) && 'roman_numeral_to_int';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/path_resolver"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$is_root?', '$expand_path', '$pwd', '$start_with?', '$==', '$=~', '$nil_or_empty?', '$include?', '$tr', '$partition_path', '$join_path', '$[]', '$posixfy', '$is_web_root?', '$is_unc?', '$index', '$split', '$shift', '$delete', '$[]=', '$*', '$raise', '$empty?', '$system_path', '$!=', '$!', '$dup', '$each', '$>', '$length', '$pop', '$fetch', '$warn', '$push', '$chomp', '$uri_prefix', '$<<', '$+']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $PathResolver(){};
      var self = $PathResolver = $klass($base, $super, 'PathResolver', $PathResolver);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_12, TMP_13;

      def.file_separator = def._partition_path_web = def._partition_path_sys = def.working_dir = nil;
      Opal.cdecl($scope, 'DOT', ".");

      Opal.cdecl($scope, 'DOT_DOT', "..");

      Opal.cdecl($scope, 'DOT_SLASH', "./");

      Opal.cdecl($scope, 'SLASH', "/");

      Opal.cdecl($scope, 'BACKSLASH', "\\");

      Opal.cdecl($scope, 'DOUBLE_SLASH', "//");

      Opal.cdecl($scope, 'WindowsRootRx', /^[a-zA-Z]:(?:\\|\/)/);

      self.$attr_accessor("file_separator");

      self.$attr_accessor("working_dir");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(file_separator, working_dir) {
        var $a, self = this;

        if (file_separator == null) {
          file_separator = nil;
        }
        if (working_dir == null) {
          working_dir = nil;
        }
        self.file_separator = (function() {if (file_separator !== false && file_separator !== nil && file_separator != null) {
          return file_separator
          } else {
          return (((($a = ((Opal.get('File')).$$scope.get('ALT_SEPARATOR'))) !== false && $a !== nil && $a != null) ? $a : ((Opal.get('File')).$$scope.get('SEPARATOR'))))
        }; return nil; })();
        if (working_dir !== false && working_dir !== nil && working_dir != null) {
          self.working_dir = (function() {if ((($a = (self['$is_root?'](working_dir))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return working_dir
            } else {
            return (Opal.get('File').$expand_path(working_dir))
          }; return nil; })()
          } else {
          self.working_dir = Opal.get('File').$expand_path(Opal.get('Dir').$pwd())
        };
        self._partition_path_sys = $hash2([], {});
        return self._partition_path_web = $hash2([], {});
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$is_root?', TMP_2 = function(path) {
        var $a, $b, $c, self = this;

        if ((($a = path['$start_with?']($scope.get('SLASH'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
        } else if ((($a = (($b = self.file_separator['$==']($scope.get('BACKSLASH'))) ? $scope.get('WindowsRootRx')['$=~'](path) : self.file_separator['$==']($scope.get('BACKSLASH')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
        } else if ((($a = ($b = ($c = Opal.get('RUBY_ENGINE_OPAL'), $c !== false && $c !== nil && $c != null ?Opal.get('JAVASCRIPT_PLATFORM')['$==']("browser") : $c), $b !== false && $b !== nil && $b != null ?(path['$start_with?']("file:///")) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
          } else {
          return false
        };
      }, TMP_2.$$arity = 1);

      Opal.defn(self, '$is_unc?', TMP_3 = function(path) {
        var self = this;

        return path['$start_with?']($scope.get('DOUBLE_SLASH'));
      }, TMP_3.$$arity = 1);

      Opal.defn(self, '$is_web_root?', TMP_4 = function(path) {
        var self = this;

        return path['$start_with?']($scope.get('SLASH'));
      }, TMP_4.$$arity = 1);

      Opal.defn(self, '$posixfy', TMP_5 = function ːposixfy(path) {
        var $a, self = this;

        if ((($a = path['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ""
        } else if ((($a = path['$include?']($scope.get('BACKSLASH'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return path.$tr($scope.get('BACKSLASH'), $scope.get('SLASH'))
          } else {
          return path
        };
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$expand_path', TMP_6 = function ːexpand_path(path) {
        var $a, $b, self = this, path_segments = nil, path_root = nil, _ = nil;

        $b = self.$partition_path(path), $a = Opal.to_ary($b), path_segments = ($a[0] == null ? nil : $a[0]), path_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b;
        return self.$join_path(path_segments, path_root);
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$partition_path', TMP_7 = function ːpartition_path(path, web_path) {
        var $a, self = this, result = nil, posix_path = nil, root = nil, path_segments = nil;

        if (web_path == null) {
          web_path = false;
        }
        if ((($a = (result = (function() {if (web_path !== false && web_path !== nil && web_path != null) {
          return self._partition_path_web['$[]'](path)
          } else {
          return self._partition_path_sys['$[]'](path)
        }; return nil; })())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return result};
        posix_path = self.$posixfy(path);
        root = (function() {if (web_path !== false && web_path !== nil && web_path != null) {
          if ((($a = self['$is_web_root?'](posix_path)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('SLASH')
          } else if ((($a = posix_path['$start_with?']($scope.get('DOT_SLASH'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('DOT_SLASH')
            } else {
            return nil
          }
        } else if ((($a = self['$is_root?'](posix_path)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self['$is_unc?'](posix_path)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('DOUBLE_SLASH')
          } else if ((($a = posix_path['$start_with?']($scope.get('SLASH'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('SLASH')
            } else {
            return posix_path['$[]']($range(0, (posix_path.$index($scope.get('SLASH'))), false))
          }
        } else if ((($a = posix_path['$start_with?']($scope.get('DOT_SLASH'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('DOT_SLASH')
          } else {
          return nil
        }; return nil; })();
        path_segments = posix_path.$split($scope.get('SLASH'));
        if (root['$==']($scope.get('DOUBLE_SLASH'))) {
          path_segments = path_segments['$[]']($range(2, -1, false))
        } else if (root !== false && root !== nil && root != null) {
          path_segments.$shift()};
        path_segments.$delete($scope.get('DOT'));
        return ((function() {if (web_path !== false && web_path !== nil && web_path != null) {
          return self._partition_path_web
          } else {
          return self._partition_path_sys
        }; return nil; })())['$[]='](path, [path_segments, root, posix_path]);
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$join_path', TMP_8 = function ːjoin_path(segments, root) {
        var self = this;

        if (root == null) {
          root = nil;
        }
        if (root !== false && root !== nil && root != null) {
          return "" + (root) + ($rb_times(segments, $scope.get('SLASH')))
          } else {
          return $rb_times(segments, $scope.get('SLASH'))
        };
      }, TMP_8.$$arity = -2);

      Opal.defn(self, '$system_path', TMP_10 = function ːsystem_path(target, start, jail, opts) {
        var $a, $b, TMP_9, self = this, target_segments = nil, target_root = nil, _ = nil, resolved_target = nil, jail_segments = nil, jail_root = nil, start_segments = nil, start_root = nil, resolved_segments = nil, warned = nil;

        if (jail == null) {
          jail = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        if (jail !== false && jail !== nil && jail != null) {
          if ((($a = self['$is_root?'](jail)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise(Opal.get('SecurityError'), "Jail is not an absolute path: " + (jail))
          };
          jail = self.$posixfy(jail);};
        if ((($a = target['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          target_segments = []
          } else {
          $b = self.$partition_path(target), $a = Opal.to_ary($b), target_segments = ($a[0] == null ? nil : $a[0]), target_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b
        };
        if ((($a = target_segments['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = start['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (function() {if (jail !== false && jail !== nil && jail != null) {
              return jail
              } else {
              return self.working_dir
            }; return nil; })()
          } else if ((($a = self['$is_root?'](start)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (jail !== false && jail !== nil && jail != null) {
              } else {
              return self.$expand_path(start)
            }
            } else {
            return self.$system_path(start, jail, jail, opts)
          }};
        if ((($a = (($b = target_root !== false && target_root !== nil && target_root != null) ? target_root['$!=']($scope.get('DOT_SLASH')) : target_root)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          resolved_target = self.$join_path(target_segments, target_root);
          if ((($a = ((($b = jail['$!']()) !== false && $b !== nil && $b != null) ? $b : (resolved_target['$start_with?'](jail)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return resolved_target};};
        if ((($a = start['$nil_or_empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          start = (function() {if (jail !== false && jail !== nil && jail != null) {
            return jail
            } else {
            return self.working_dir
          }; return nil; })()
        } else if ((($a = self['$is_root?'](start)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          start = self.$posixfy(start)
          } else {
          start = self.$system_path(start, jail, jail, opts)
        };
        if (jail['$=='](start)) {
          $b = self.$partition_path(jail), $a = Opal.to_ary($b), jail_segments = ($a[0] == null ? nil : $a[0]), jail_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b;
          start_segments = jail_segments.$dup();
        } else if (jail !== false && jail !== nil && jail != null) {
          if ((($a = start['$start_with?'](jail)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise(Opal.get('SecurityError'), "" + (((($a = opts['$[]']("target_name")) !== false && $a !== nil && $a != null) ? $a : "Start path")) + " " + (start) + " is outside of jail: " + (jail) + " (disallowed in safe mode)")
          };
          $b = self.$partition_path(start), $a = Opal.to_ary($b), start_segments = ($a[0] == null ? nil : $a[0]), start_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b;
          $b = self.$partition_path(jail), $a = Opal.to_ary($b), jail_segments = ($a[0] == null ? nil : $a[0]), jail_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b;
          } else {
          $b = self.$partition_path(start), $a = Opal.to_ary($b), start_segments = ($a[0] == null ? nil : $a[0]), start_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b;
          jail_root = start_root;
        };
        resolved_segments = start_segments.$dup();
        warned = false;
        ($a = ($b = target_segments).$each, $a.$$p = (TMP_9 = function(segment){var self = TMP_9.$$s || this, $c, $d, recover = nil;
if (segment == null) segment = nil;
        if (segment['$==']($scope.get('DOT_DOT'))) {
            if (jail !== false && jail !== nil && jail != null) {
              if ((($c = $rb_gt(resolved_segments.$length(), jail_segments.$length())) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return resolved_segments.$pop()
              } else if ((($c = (((($d = recover) !== false && $d !== nil && $d != null) ? $d : recover = (opts.$fetch("recover", true))))['$!']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return self.$raise(Opal.get('SecurityError'), "" + (((($c = opts['$[]']("target_name")) !== false && $c !== nil && $c != null) ? $c : "path")) + " " + (target) + " refers to location outside jail: " + (jail) + " (disallowed in safe mode)")
              } else if ((($c = warned['$!']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.$warn("asciidoctor: WARNING: " + (((($c = opts['$[]']("target_name")) !== false && $c !== nil && $c != null) ? $c : "path")) + " has illegal reference to ancestor of jail, auto-recovering");
                return warned = true;
                } else {
                return nil
              }
              } else {
              return resolved_segments.$pop()
            }
            } else {
            return resolved_segments.$push(segment)
          }}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
        return self.$join_path(resolved_segments, jail_root);
      }, TMP_10.$$arity = -3);

      Opal.defn(self, '$web_path', TMP_12 = function ːweb_path(target, start) {
        var $a, $b, TMP_11, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, _ = nil, resolved_segments = nil;

        if (start == null) {
          start = nil;
        }
        target = self.$posixfy(target);
        start = self.$posixfy(start);
        uri_prefix = nil;
        if ((($a = ((($b = start['$nil_or_empty?']()) !== false && $b !== nil && $b != null) ? $b : (self['$is_web_root?'](target)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          target = "" + (start.$chomp("/")) + ($scope.get('SLASH')) + (target);
          if ((($a = (uri_prefix = $scope.get('Helpers').$uri_prefix(target))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            target = target['$[]']($range(uri_prefix.$length(), -1, false))};
        };
        $b = self.$partition_path(target, true), $a = Opal.to_ary($b), target_segments = ($a[0] == null ? nil : $a[0]), target_root = ($a[1] == null ? nil : $a[1]), _ = ($a[2] == null ? nil : $a[2]), $b;
        resolved_segments = [];
        ($a = ($b = target_segments).$each, $a.$$p = (TMP_11 = function(segment){var self = TMP_11.$$s || this, $c, $d;
if (segment == null) segment = nil;
        if (segment['$==']($scope.get('DOT_DOT'))) {
            if ((($c = resolved_segments['$empty?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              if ((($c = (($d = target_root !== false && target_root !== nil && target_root != null) ? target_root['$!=']($scope.get('DOT_SLASH')) : target_root)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                return nil
                } else {
                return resolved_segments['$<<'](segment)
              }
            } else if (resolved_segments['$[]'](-1)['$==']($scope.get('DOT_DOT'))) {
              return resolved_segments['$<<'](segment)
              } else {
              return resolved_segments.$pop()
            }
            } else {
            return resolved_segments['$<<'](segment)
          }}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b);
        if (uri_prefix !== false && uri_prefix !== nil && uri_prefix != null) {
          return "" + (uri_prefix) + (self.$join_path(resolved_segments, target_root))
          } else {
          return self.$join_path(resolved_segments, target_root)
        };
      }, TMP_12.$$arity = -2);

      return (Opal.defn(self, '$relative_path', TMP_13 = function ːrelative_path(filename, base_directory) {
        var $a, $b, self = this, offset = nil;

        if ((($a = ($b = (self['$is_root?'](filename)), $b !== false && $b !== nil && $b != null ?(self['$is_root?'](base_directory)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          offset = $rb_plus(base_directory.$chomp(self.file_separator).$length(), 1);
          return filename['$[]']($range(offset, -1, false));
          } else {
          return filename
        };
      }, TMP_13.$$arity = 2), nil) && 'relative_path';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/reader"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$path', '$lineno', '$attr_reader', '$!', '$===', '$split', '$file', '$dir', '$dirname', '$==', '$basename', '$prepare_lines', '$dup', '$empty?', '$[]', '$normalize_lines_from_string', '$normalize_lines_array', '$+', '$nil?', '$peek_line', '$nil_or_empty?', '$>', '$process_line', '$times', '$read_line', '$<<', '$reverse_each', '$unshift', '$has_more_lines?', '$shift', '$*', '$read_lines', '$advance', '$eof?', '$start_with?', '$match', '$push', '$read_lines_until', '$=~', '$size', '$clear', '$[]=', '$-', '$new', '$line_info', '$to_i', '$fetch', '$attributes', '$<', '$references', '$has_key?', '$skip_front_matter!', '$pop', '$adjust_indentation!', '$attr', '$end_with?', '$include?', '$preprocess_conditional_inclusion', '$captures', '$preprocess_include', '$strip', '$pop_include', '$downcase', '$warn', '$none?', '$any?', '$resolve_expr_val', '$send', '$to_sym', '$replace_next_line', '$rstrip', '$sub_attributes', '$attribute_missing', '$include_processors?', '$find', '$handles?', '$instance', '$process_method', '$parse', '$>=', '$safe', '$pwd', '$base_dir', '$join', '$uriish?', '$require_library', '$normalize_system_path', '$file?', '$relative_path', '$each', '$map', '$to_proc', '$/', '$concat', '$to_a', '$uniq', '$sort', '$to_set', '$open', '$each_line', '$infinite?', '$push_include', '$force_encoding', '$chomp', '$read', '$extname', '$rootname', '$<=', '$!=', '$to_f', '$extensions?', '$extensions', '$include_processors', '$class', '$object_id', '$inspect', '$to_s']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Reader(){};
      var self = $Reader = $klass($base, $super, 'Reader', $Reader);

      var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34;

      def.file = def.dir = def.lines = def.process_lines = def.look_ahead = def.eof = def.unescape_next_line = def.lineno = def.path = def.source_lines = nil;
      (function($base, $super) {
        function $Cursor(){};
        var self = $Cursor = $klass($base, $super, 'Cursor', $Cursor);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

        self.$attr_accessor("file");

        self.$attr_accessor("dir");

        self.$attr_accessor("path");

        self.$attr_accessor("lineno");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(file, dir, path, lineno) {
          var self = this;

          if (dir == null) {
            dir = nil;
          }
          if (path == null) {
            path = nil;
          }
          if (lineno == null) {
            lineno = nil;
          }
          self.file = file;
          self.dir = dir;
          self.path = path;
          return self.lineno = lineno;
        }, TMP_1.$$arity = -2);

        Opal.defn(self, '$line_info', TMP_2 = function ːline_info() {
          var self = this;

          return "" + (self.$path()) + ": line " + (self.$lineno());
        }, TMP_2.$$arity = 0);

        return Opal.alias(self, 'to_s', 'line_info');
      })($scope.base, null);

      self.$attr_reader("file");

      self.$attr_reader("dir");

      self.$attr_reader("path");

      self.$attr_reader("lineno");

      self.$attr_reader("source_lines");

      self.$attr_accessor("process_lines");

      Opal.defn(self, '$initialize', TMP_3 = function ːinitialize(data, cursor, opts) {
        var $a, $b, self = this;

        if (data == null) {
          data = nil;
        }
        if (cursor == null) {
          cursor = nil;
        }
        if (opts == null) {
          opts = $hash2(["normalize"], {"normalize": false});
        }
        if ((($a = cursor['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.file = self.dir = nil;
          self.path = "<stdin>";
          self.lineno = 1;
        } else if ((($a = Opal.get('String')['$==='](cursor)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.file = cursor;
          $b = Opal.get('File').$split(self.file), $a = Opal.to_ary($b), self.dir = ($a[0] == null ? nil : $a[0]), self.path = ($a[1] == null ? nil : $a[1]), $b;
          self.lineno = 1;
          } else {
          self.file = cursor.$file();
          self.dir = cursor.$dir();
          self.path = ((($a = cursor.$path()) !== false && $a !== nil && $a != null) ? $a : "<stdin>");
          if ((($a = self.file) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.dir) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.dir = Opal.get('File').$dirname(self.file);
              if (self.dir['$=='](".")) {
                self.dir = nil};
            };
            if ((($a = cursor.$path()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.path = Opal.get('File').$basename(self.file)
            };};
          self.lineno = ((($a = cursor.$lineno()) !== false && $a !== nil && $a != null) ? $a : 1);
        };
        self.lines = (function() {if (data !== false && data !== nil && data != null) {
          return (self.$prepare_lines(data, opts))
          } else {
          return []
        }; return nil; })();
        self.source_lines = self.lines.$dup();
        self.eof = self.lines['$empty?']();
        self.look_ahead = 0;
        self.process_lines = true;
        return self.unescape_next_line = false;
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$prepare_lines', TMP_4 = function ːprepare_lines(data, opts) {
        var $a, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = Opal.get('String')['$==='](data)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = opts['$[]']("normalize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Helpers').$normalize_lines_from_string(data)
            } else {
            return data.$split($scope.get('EOL'))
          }
        } else if ((($a = opts['$[]']("normalize")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $scope.get('Helpers').$normalize_lines_array(data)
          } else {
          return data.$dup()
        };
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$process_line', TMP_5 = function ːprocess_line(line) {
        var $a, self = this;

        if ((($a = self.process_lines) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.look_ahead = $rb_plus(self.look_ahead, 1)};
        return line;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$has_more_lines?', TMP_6 = function() {
        var $a, self = this;

        return (((($a = self.eof) !== false && $a !== nil && $a != null) ? $a : (self.eof = self.$peek_line()['$nil?']())))['$!']();
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$next_line_empty?', TMP_7 = function() {
        var self = this;

        return self.$peek_line()['$nil_or_empty?']();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$peek_line', TMP_8 = function ːpeek_line(direct) {
        var $a, $b, self = this, line = nil;

        if (direct == null) {
          direct = false;
        }
        if ((($a = ((($b = direct) !== false && $b !== nil && $b != null) ? $b : $rb_gt(self.look_ahead, 0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = self.unescape_next_line) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.lines['$[]'](0)['$[]']($range(1, -1, false))
            } else {
            return self.lines['$[]'](0)
          }
        } else if ((($a = ((($b = self.eof) !== false && $b !== nil && $b != null) ? $b : self.lines['$empty?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.eof = true;
          self.look_ahead = 0;
          return nil;
        } else if ((($a = ((line = self.$process_line(self.lines['$[]'](0))))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$peek_line()
          } else {
          return line
        };
      }, TMP_8.$$arity = -1);

      Opal.defn(self, '$peek_lines', TMP_11 = function ːpeek_lines(num, direct) {
        var $a, $b, TMP_9, $c, TMP_10, self = this, old_look_ahead = nil, result = nil;

        if (num == null) {
          num = 1;
        }
        if (direct == null) {
          direct = true;
        }
        old_look_ahead = self.look_ahead;
        result = [];
        (function(){var $brk = Opal.new_brk(); try {return ($a = ($b = num).$times, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $c, line = nil;

        if ((($c = (line = self.$read_line(direct))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return result['$<<'](line)
            } else {
            
            Opal.brk(nil, $brk)
          }}, TMP_9.$$s = self, TMP_9.$$brk = $brk, TMP_9.$$arity = 0, TMP_9), $a).call($b)
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        if ((($a = result['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          ($a = ($c = result).$reverse_each, $a.$$p = (TMP_10 = function(line){var self = TMP_10.$$s || this;
if (line == null) line = nil;
          return self.$unshift(line)}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($c);
          if (direct !== false && direct !== nil && direct != null) {
            self.look_ahead = old_look_ahead};
        };
        return result;
      }, TMP_11.$$arity = -1);

      Opal.defn(self, '$read_line', TMP_12 = function ːread_line(direct) {
        var $a, $b, $c, self = this;

        if (direct == null) {
          direct = false;
        }
        if ((($a = ((($b = ((($c = direct) !== false && $c !== nil && $c != null) ? $c : $rb_gt(self.look_ahead, 0))) !== false && $b !== nil && $b != null) ? $b : self['$has_more_lines?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$shift()
          } else {
          return nil
        };
      }, TMP_12.$$arity = -1);

      Opal.defn(self, '$read_lines', TMP_13 = function ːread_lines() {
        var $a, $b, self = this, lines = nil;

        lines = [];
        while ((($b = self['$has_more_lines?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        lines['$<<'](self.$shift())};
        return lines;
      }, TMP_13.$$arity = 0);

      Opal.alias(self, 'readlines', 'read_lines');

      Opal.defn(self, '$read', TMP_14 = function ːread() {
        var self = this;

        return $rb_times(self.$read_lines(), $scope.get('EOL'));
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$advance', TMP_15 = function ːadvance(direct) {
        var self = this;

        if (direct == null) {
          direct = true;
        }
        return self.$read_line(direct)['$!']()['$!']();
      }, TMP_15.$$arity = -1);

      Opal.defn(self, '$unshift_line', TMP_16 = function ːunshift_line(line_to_restore) {
        var self = this;

        self.$unshift(line_to_restore);
        return nil;
      }, TMP_16.$$arity = 1);

      Opal.alias(self, 'restore_line', 'unshift_line');

      Opal.defn(self, '$unshift_lines', TMP_18 = function ːunshift_lines(lines_to_restore) {
        var $a, $b, TMP_17, self = this;

        ($a = ($b = lines_to_restore).$reverse_each, $a.$$p = (TMP_17 = function(line){var self = TMP_17.$$s || this;
if (line == null) line = nil;
        return self.$unshift(line)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
        return nil;
      }, TMP_18.$$arity = 1);

      Opal.alias(self, 'restore_lines', 'unshift_lines');

      Opal.defn(self, '$replace_next_line', TMP_19 = function ːreplace_next_line(replacement) {
        var self = this;

        self.$advance();
        self.$unshift(replacement);
        return nil;
      }, TMP_19.$$arity = 1);

      Opal.alias(self, 'replace_line', 'replace_next_line');

      Opal.defn(self, '$skip_blank_lines', TMP_20 = function ːskip_blank_lines() {
        var $a, $b, self = this, num_skipped = nil, next_line = nil;

        if ((($a = self['$eof?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return 0};
        num_skipped = 0;
        while ((($b = (next_line = self.$peek_line())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = next_line['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$advance();
          num_skipped = $rb_plus(num_skipped, 1);
          } else {
          return num_skipped
        }};
        return num_skipped;
      }, TMP_20.$$arity = 0);

      Opal.defn(self, '$skip_comment_lines', TMP_21 = function ːskip_comment_lines(opts) {
        var $a, $b, $c, $d, self = this, comment_lines = nil, include_blank_lines = nil, next_line = nil, commentish = nil, match = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        if ((($a = self['$eof?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        comment_lines = [];
        include_blank_lines = opts['$[]']("include_blank_lines");
        while ((($b = (next_line = self.$peek_line())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = (($c = include_blank_lines !== false && include_blank_lines !== nil && include_blank_lines != null) ? next_line['$empty?']() : include_blank_lines)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          comment_lines['$<<'](self.$shift())
        } else if ((($b = ($c = (commentish = next_line['$start_with?']("//")), $c !== false && $c !== nil && $c != null ?(match = $scope.get('CommentBlockRx').$match(next_line)) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          comment_lines['$<<'](self.$shift());
          ($b = comment_lines).$push.apply($b, Opal.to_a((self.$read_lines_until($hash2(["terminator", "read_last_line", "skip_processing"], {"terminator": match['$[]'](0), "read_last_line": true, "skip_processing": true})))));
        } else if ((($c = (($d = commentish !== false && commentish !== nil && commentish != null) ? $scope.get('CommentLineRx')['$=~'](next_line) : commentish)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          comment_lines['$<<'](self.$shift())
          } else {
          break;
        }};
        return comment_lines;
      }, TMP_21.$$arity = -1);

      Opal.defn(self, '$skip_line_comments', TMP_22 = function ːskip_line_comments() {
        var $a, $b, self = this, comment_lines = nil, next_line = nil;

        if ((($a = self['$eof?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return []};
        comment_lines = [];
        while ((($b = (next_line = self.$peek_line())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = $scope.get('CommentLineRx')['$=~'](next_line)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          comment_lines['$<<'](self.$shift())
          } else {
          break;
        }};
        return comment_lines;
      }, TMP_22.$$arity = 0);

      Opal.defn(self, '$terminate', TMP_23 = function ːterminate() {
        var self = this;

        self.lineno = $rb_plus(self.lineno, self.lines.$size());
        self.lines.$clear();
        self.eof = true;
        self.look_ahead = 0;
        return nil;
      }, TMP_23.$$arity = 0);

      Opal.defn(self, '$eof?', TMP_24 = function() {
        var self = this;

        return self['$has_more_lines?']()['$!']();
      }, TMP_24.$$arity = 0);

      Opal.alias(self, 'empty?', 'eof?');

      Opal.defn(self, '$read_lines_until', TMP_25 = function ːread_lines_until(options) {
        var $a, $b, $c, $d, $e, self = this, $iter = TMP_25.$$p, $yield = $iter || nil, result = nil, restore_process_lines = nil, terminator = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_comments = nil, line_read = nil, line_restored = nil, complete = nil, line = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        TMP_25.$$p = null;
        result = [];
        if ((($a = options['$[]']("skip_first_line")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$advance()};
        if ((($a = ($b = self.process_lines, $b !== false && $b !== nil && $b != null ?options['$[]']("skip_processing") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.process_lines = false;
          restore_process_lines = true;
          } else {
          restore_process_lines = false
        };
        if ((($a = (terminator = options['$[]']("terminator"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          break_on_blank_lines = false;
          break_on_list_continuation = false;
          } else {
          break_on_blank_lines = options['$[]']("break_on_blank_lines");
          break_on_list_continuation = options['$[]']("break_on_list_continuation");
        };
        skip_comments = options['$[]']("skip_line_comments");
        line_read = false;
        line_restored = false;
        complete = false;
        while ((($b = ($c = complete['$!'](), $c !== false && $c !== nil && $c != null ?(line = self.$read_line()) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        complete = (function() {while ((($c = true) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
        if ((($c = (($d = terminator !== false && terminator !== nil && terminator != null) ? line['$=='](terminator) : terminator)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return true};
        if ((($c = (($d = break_on_blank_lines !== false && break_on_blank_lines !== nil && break_on_blank_lines != null) ? line['$empty?']() : break_on_blank_lines)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return true};
        if ((($c = ($d = (($e = break_on_list_continuation !== false && break_on_list_continuation !== nil && break_on_list_continuation != null) ? line_read : break_on_list_continuation), $d !== false && $d !== nil && $d != null ?line['$==']($scope.get('LIST_CONTINUATION')) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          options['$[]=']("preserve_last_line", true);
          return true;};
        if ((($c = (($d = ($yield !== nil)) ? (Opal.yield1($yield, line)) : ($yield !== nil))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          return true};
        return false;}; return nil; })();
        if (complete !== false && complete !== nil && complete != null) {
          if ((($b = options['$[]']("read_last_line")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            result['$<<'](line);
            line_read = true;};
          if ((($b = options['$[]']("preserve_last_line")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            self.$unshift(line);
            line_restored = true;};
        } else if ((($b = ($c = (($d = skip_comments !== false && skip_comments !== nil && skip_comments != null) ? line['$start_with?']("//") : skip_comments), $c !== false && $c !== nil && $c != null ?$scope.get('CommentLineRx')['$=~'](line) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          } else {
          result['$<<'](line);
          line_read = true;
        };};
        if (restore_process_lines !== false && restore_process_lines !== nil && restore_process_lines != null) {
          self.process_lines = true;
          if ((($a = (($b = line_restored !== false && line_restored !== nil && line_restored != null) ? terminator['$!']() : line_restored)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.look_ahead = $rb_minus(self.look_ahead, 1)};};
        return result;
      }, TMP_25.$$arity = -1);

      Opal.defn(self, '$shift', TMP_26 = function ːshift() {
        var self = this;

        self.lineno = $rb_plus(self.lineno, 1);
        if (self.look_ahead['$=='](0)) {
          } else {
          self.look_ahead = $rb_minus(self.look_ahead, 1)
        };
        return self.lines.$shift();
      }, TMP_26.$$arity = 0);

      Opal.defn(self, '$unshift', TMP_27 = function ːunshift(line) {
        var self = this;

        self.lineno = $rb_minus(self.lineno, 1);
        self.look_ahead = $rb_plus(self.look_ahead, 1);
        self.eof = false;
        return self.lines.$unshift(line);
      }, TMP_27.$$arity = 1);

      Opal.defn(self, '$cursor', TMP_28 = function ːcursor() {
        var self = this;

        return $scope.get('Cursor').$new(self.file, self.dir, self.path, self.lineno);
      }, TMP_28.$$arity = 0);

      Opal.defn(self, '$line_info', TMP_29 = function ːline_info() {
        var self = this;

        return "" + (self.path) + ": line " + (self.lineno);
      }, TMP_29.$$arity = 0);

      Opal.alias(self, 'next_line_info', 'line_info');

      Opal.defn(self, '$prev_line_info', TMP_30 = function ːprev_line_info() {
        var self = this;

        return "" + (self.path) + ": line " + ($rb_minus(self.lineno, 1));
      }, TMP_30.$$arity = 0);

      Opal.defn(self, '$lines', TMP_31 = function ːlines() {
        var self = this;

        return self.lines.$dup();
      }, TMP_31.$$arity = 0);

      Opal.defn(self, '$string', TMP_32 = function ːstring() {
        var self = this;

        return $rb_times(self.lines, $scope.get('EOL'));
      }, TMP_32.$$arity = 0);

      Opal.defn(self, '$source', TMP_33 = function ːsource() {
        var self = this;

        return $rb_times(self.source_lines, $scope.get('EOL'));
      }, TMP_33.$$arity = 0);

      return (Opal.defn(self, '$to_s', TMP_34 = function ːto_s() {
        var self = this;

        return self.$line_info();
      }, TMP_34.$$arity = 0), nil) && 'to_s';
    })($scope.base, null);

    (function($base, $super) {
      function $PreprocessorReader(){};
      var self = $PreprocessorReader = $klass($base, $super, 'PreprocessorReader', $PreprocessorReader);

      var def = self.$$proto, $scope = self.$$scope, TMP_35, TMP_36, TMP_37, TMP_38, TMP_43, TMP_52, TMP_53, TMP_54, TMP_55, TMP_56, TMP_57, TMP_58, TMP_59, TMP_60, TMP_62;

      def.document = def.lineno = def.process_lines = def.look_ahead = def.skipping = def.include_stack = def.conditional_stack = def.path = def.include_processor_extensions = def.maxdepth = def.dir = def.lines = def.file = def.includes = def.unescape_next_line = nil;
      self.$attr_reader("include_stack");

      self.$attr_reader("includes");

      Opal.defn(self, '$initialize', TMP_35 = function ːinitialize(document, data, cursor) {
        var $a, $b, $c, $d, self = this, $iter = TMP_35.$$p, $yield = $iter || nil, include_depth_default = nil;

        if (data == null) {
          data = nil;
        }
        if (cursor == null) {
          cursor = nil;
        }
        TMP_35.$$p = null;
        self.document = document;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_35, false)), $a.$$p = null, $a).call($b, data, cursor, $hash2(["normalize"], {"normalize": true}));
        include_depth_default = document.$attributes().$fetch("max-include-depth", 64).$to_i();
        if ((($a = $rb_lt(include_depth_default, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          include_depth_default = 0};
        self.maxdepth = $hash2(["abs", "rel"], {"abs": include_depth_default, "rel": include_depth_default});
        self.include_stack = [];
        self.includes = (($a = "includes", $c = document.$references(), ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, []))));
        self.skipping = false;
        self.conditional_stack = [];
        return self.include_processor_extensions = nil;
      }, TMP_35.$$arity = -2);

      Opal.defn(self, '$prepare_lines', TMP_36 = function ːprepare_lines(data, opts) {
        var $a, $b, $c, $d, self = this, $iter = TMP_36.$$p, $yield = $iter || nil, result = nil, front_matter = nil, first = nil, last = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_36.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        result = ($a = ($b = self, Opal.find_super_dispatcher(self, 'prepare_lines', TMP_36, false)), $a.$$p = $iter, $a).apply($b, $zuper);
        if ((($a = ($c = self.document, $c !== false && $c !== nil && $c != null ?(self.document.$attributes()['$has_key?']("skip-front-matter")) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (front_matter = self['$skip_front_matter!'](result))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.document.$attributes()['$[]=']("front-matter", $rb_times(front_matter, $scope.get('EOL')))}};
        if ((($a = opts.$fetch("condense", true)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          while ((($c = ($d = (first = result['$[]'](0)), $d !== false && $d !== nil && $d != null ?first['$empty?']() : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          ($c = result.$shift(), $c !== false && $c !== nil && $c != null ?self.lineno = $rb_plus(self.lineno, 1) : $c)};
          while ((($c = ($d = (last = result['$[]'](-1)), $d !== false && $d !== nil && $d != null ?last['$empty?']() : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
          result.$pop()};};
        if ((($a = opts['$[]']("indent")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $scope.get('Parser')['$adjust_indentation!'](result, opts['$[]']("indent"), (self.document.$attr("tabsize")))};
        return result;
      }, TMP_36.$$arity = -2);

      Opal.defn(self, '$process_line', TMP_37 = function ːprocess_line(line) {
        var $a, $b, $c, $d, self = this, match = nil, escaped = nil;

        if ((($a = self.process_lines) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return line
        };
        if ((($a = line['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.look_ahead = $rb_plus(self.look_ahead, 1);
          return "";};
        if ((($a = ($b = ($c = line['$end_with?']("]"), $c !== false && $c !== nil && $c != null ?line['$start_with?']("[")['$!']() : $c), $b !== false && $b !== nil && $b != null ?line['$include?']("::") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = line['$include?']("if"), $b !== false && $b !== nil && $b != null ?(match = $scope.get('ConditionalDirectiveRx').$match(line)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = line['$start_with?']("\\")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.unescape_next_line = true;
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line['$[]']($range(1, -1, false));
            } else if ((($a = ($b = self).$preprocess_conditional_inclusion.apply($b, Opal.to_a(match.$captures()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$advance();
              return nil;
              } else {
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line;
            }
          } else if ((($a = self.skipping) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$advance();
            return nil;
          } else if ((($a = ($c = (((($d = (escaped = line['$start_with?']("\\include::"))) !== false && $d !== nil && $d != null) ? $d : line['$start_with?']("include::"))), $c !== false && $c !== nil && $c != null ?(match = $scope.get('IncludeDirectiveRx').$match(line)) : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if (escaped !== false && escaped !== nil && escaped != null) {
              self.unescape_next_line = true;
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line['$[]']($range(1, -1, false));
            } else if ((($a = self.$preprocess_include(match['$[]'](1), match['$[]'](2).$strip())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return nil
              } else {
              self.look_ahead = $rb_plus(self.look_ahead, 1);
              return line;
            }
            } else {
            self.look_ahead = $rb_plus(self.look_ahead, 1);
            return line;
          }
        } else if ((($a = self.skipping) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$advance();
          return nil;
          } else {
          self.look_ahead = $rb_plus(self.look_ahead, 1);
          return line;
        };
      }, TMP_37.$$arity = 1);

      Opal.defn(self, '$peek_line', TMP_38 = function ːpeek_line(direct) {
        var $a, $b, $c, self = this, $iter = TMP_38.$$p, $yield = $iter || nil, line = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        if (direct == null) {
          direct = false;
        }
        TMP_38.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($a = (line = ($b = ($c = self, Opal.find_super_dispatcher(self, 'peek_line', TMP_38, false)), $b.$$p = $iter, $b).apply($c, $zuper))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return line
        } else if ((($a = self.include_stack['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.$pop_include();
          return self.$peek_line(direct);
        };
      }, TMP_38.$$arity = -1);

      Opal.defn(self, '$preprocess_conditional_inclusion', TMP_43 = function ːpreprocess_conditional_inclusion(directive, target, delimiter, text) {
        var $a, $b, $c, $d, TMP_39, TMP_40, TMP_41, $e, TMP_42, $f, self = this, stack_size = nil, pair = nil, skip = nil, $case = nil, expr_match = nil, lhs = nil, rhs = nil, op = nil, conditional_line = nil;

        if ((($a = ((($b = (($c = (((($d = directive['$==']("ifdef")) !== false && $d !== nil && $d != null) ? $d : directive['$==']("ifndef"))), $c !== false && $c !== nil && $c != null ?target['$empty?']() : $c))) !== false && $b !== nil && $b != null) ? $b : ((($c = directive['$==']("endif")) ? text : directive['$==']("endif"))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return false};
        target = target.$downcase();
        if (directive['$==']("endif")) {
          stack_size = self.conditional_stack.$size();
          if ((($a = $rb_gt(stack_size, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            pair = self.conditional_stack['$[]'](-1);
            if ((($a = ((($b = target['$empty?']()) !== false && $b !== nil && $b != null) ? $b : target['$=='](pair['$[]']("target")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.conditional_stack.$pop();
              self.skipping = (function() {if ((($a = self.conditional_stack['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return false
                } else {
                return self.conditional_stack['$[]'](-1)['$[]']("skipping")
              }; return nil; })();
              } else {
              self.$warn("asciidoctor: ERROR: " + (self.$line_info()) + ": mismatched macro: endif::" + (target) + "[], expected endif::" + (pair['$[]']("target")) + "[]")
            };
            } else {
            self.$warn("asciidoctor: ERROR: " + (self.$line_info()) + ": unmatched macro: endif::" + (target) + "[]")
          };
          return true;};
        skip = false;
        if ((($a = self.skipping) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          $case = directive;if ("ifdef"['$===']($case)) {$case = delimiter;if (nil['$===']($case)) {skip = self.document.$attributes()['$has_key?'](target)['$!']()}else if (","['$===']($case)) {skip = ($a = ($b = target.$split(","))['$none?'], $a.$$p = (TMP_39 = function(name){var self = TMP_39.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39), $a).call($b)}else if ("+"['$===']($case)) {skip = ($a = ($c = target.$split("+"))['$any?'], $a.$$p = (TMP_40 = function(name){var self = TMP_40.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)['$!']()}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($c)}}else if ("ifndef"['$===']($case)) {$case = delimiter;if (nil['$===']($case)) {skip = self.document.$attributes()['$has_key?'](target)}else if (","['$===']($case)) {skip = ($a = ($d = target.$split(","))['$none?'], $a.$$p = (TMP_41 = function(name){var self = TMP_41.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)['$!']()}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41), $a).call($d)}else if ("+"['$===']($case)) {skip = ($a = ($e = target.$split("+"))['$any?'], $a.$$p = (TMP_42 = function(name){var self = TMP_42.$$s || this;
            if (self.document == null) self.document = nil;
if (name == null) name = nil;
          return self.document.$attributes()['$has_key?'](name)}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42), $a).call($e)}}else if ("ifeval"['$===']($case)) {if ((($a = ((($f = target['$empty?']()['$!']()) !== false && $f !== nil && $f != null) ? $f : ((expr_match = $scope.get('EvalExpressionRx').$match(text.$strip())))['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return false};
          lhs = self.$resolve_expr_val(expr_match['$[]'](1));
          rhs = self.$resolve_expr_val(expr_match['$[]'](3));
          if (((op = expr_match['$[]'](2)))['$==']("!=")) {
            skip = lhs.$send("==", rhs)
            } else {
            skip = (lhs.$send(op.$to_sym(), rhs))['$!']()
          };}
        };
        if ((($a = ((($f = directive['$==']("ifeval")) !== false && $f !== nil && $f != null) ? $f : text['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if (skip !== false && skip !== nil && skip != null) {
            self.skipping = true};
          self.conditional_stack['$<<']($hash2(["target", "skip", "skipping"], {"target": target, "skip": skip, "skipping": self.skipping}));
        } else if ((($a = ((($f = self.skipping) !== false && $f !== nil && $f != null) ? $f : skip)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          conditional_line = self.$peek_line(true);
          self.$replace_next_line(text.$rstrip());
          self.$unshift(conditional_line);
          return true;
        };
        return true;
      }, TMP_43.$$arity = 4);

      Opal.defn(self, '$preprocess_include', TMP_52 = function ːpreprocess_include(raw_target, raw_attributes) {
        var $a, $b, $c, $d, TMP_44, TMP_45, TMP_46, $e, TMP_48, $f, TMP_51, self = this, target = nil, extension = nil, abs_maxdepth = nil, target_type = nil, include_file = nil, path = nil, inc_lines = nil, tags = nil, attributes = nil, selected = nil, inc_line_offset = nil, inc_lineno = nil, active_tag = nil, tags_found = nil, missing_tags = nil, include_content = nil;

        if ((($a = ((target = self.document.$sub_attributes(raw_target, $hash2(["attribute_missing"], {"attribute_missing": "drop-line"}))))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$advance();
          if (self.document.$attributes().$fetch("attribute-missing", $scope.get('Compliance').$attribute_missing())['$==']("skip")) {
            self.$unshift("Unresolved directive in " + (self.path) + " - include::" + (raw_target) + "[" + (raw_attributes) + "]")};
          return true;
        } else if ((($a = ($b = self['$include_processors?'](), $b !== false && $b !== nil && $b != null ?(extension = ($c = ($d = self.include_processor_extensions).$find, $c.$$p = (TMP_44 = function(candidate){var self = TMP_44.$$s || this;
if (candidate == null) candidate = nil;
        return candidate.$instance()['$handles?'](target)}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44), $c).call($d)) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$advance();
          extension.$process_method()['$[]'](self.document, self, target, $scope.get('AttributeList').$new(raw_attributes).$parse());
          return true;
        } else if ((($a = $rb_ge(self.document.$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$replace_next_line("link:" + (target) + "[]");
          return true;
        } else if ((($a = $rb_gt((abs_maxdepth = self.maxdepth['$[]']("abs")), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = $rb_ge(self.include_stack.$size(), abs_maxdepth)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$warn("asciidoctor: ERROR: " + (self.$line_info()) + ": maximum include depth of " + (self.maxdepth['$[]']("rel")) + " exceeded");
            return false;};
          if ((($a = Opal.get('RUBY_ENGINE_OPAL')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            target_type = "file";
            include_file = path = (function() {if ((($a = self.include_stack['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if (Opal.get('Dir').$pwd()['$=='](self.document.$base_dir())) {
                return target
                } else {
                return (Opal.get('File').$join(self.dir, target))
              }
              } else {
              return Opal.get('File').$join(self.dir, target)
            }; return nil; })();
          } else if ((($a = $scope.get('Helpers')['$uriish?'](target)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self.document.$attributes()['$has_key?']("allow-uri-read")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$replace_next_line("link:" + (target) + "[]");
              return true;
            };
            target_type = "uri";
            include_file = path = target;
            if ((($a = self.document.$attributes()['$has_key?']("cache-uri")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = (function(){ try { return ((((Opal.get('OpenURI')).$$scope.get('Cache'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                $scope.get('Helpers').$require_library("open-uri/cached", "open-uri-cached")
              }
            } else if ((($a = Opal.get('RUBY_ENGINE_OPAL')['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              Opal.get('OpenURI')};
            } else {
            target_type = "file";
            include_file = self.document.$normalize_system_path(target, self.dir, nil, $hash2(["target_name"], {"target_name": "include file"}));
            if ((($a = Opal.get('File')['$file?'](include_file)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              self.$warn("asciidoctor: WARNING: " + (self.$line_info()) + ": include file not found: " + (include_file));
              self.$replace_next_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
              return true;
            };
            path = $scope.get('PathResolver').$new().$relative_path(include_file, self.document.$base_dir());
          };
          inc_lines = nil;
          tags = nil;
          attributes = $hash2([], {});
          if ((($a = raw_attributes['$empty?']()['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            attributes = $scope.get('AttributeList').$new(raw_attributes).$parse();
            if ((($a = attributes['$has_key?']("lines")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              inc_lines = [];
              ($a = ($b = attributes['$[]']("lines").$split($scope.get('DataDelimiterRx'))).$each, $a.$$p = (TMP_45 = function(linedef){var self = TMP_45.$$s || this, $e, $f, $g, $h, from = nil, to = nil;
if (linedef == null) linedef = nil;
              if ((($e = linedef['$include?']("..")) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  $f = ($g = ($h = linedef.$split("..", 2)).$map, $g.$$p = "to_i".$to_proc(), $g).call($h), $e = Opal.to_ary($f), from = ($e[0] == null ? nil : $e[0]), to = ($e[1] == null ? nil : $e[1]), $f;
                  if (to['$=='](-1)) {
                    inc_lines['$<<'](from);
                    return inc_lines['$<<']($rb_divide(1, 0));
                    } else {
                    return inc_lines.$concat(Opal.get('Range').$new(from, to).$to_a())
                  };
                  } else {
                  return inc_lines['$<<'](linedef.$to_i())
                }}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45), $a).call($b);
              inc_lines = inc_lines.$sort().$uniq();
            } else if ((($a = attributes['$has_key?']("tag")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              tags = [attributes['$[]']("tag")].$to_set()
            } else if ((($a = attributes['$has_key?']("tags")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              tags = attributes['$[]']("tags").$split($scope.get('DataDelimiterRx')).$to_set()};};
          if (inc_lines !== false && inc_lines !== nil && inc_lines != null) {
            if ((($a = inc_lines['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              selected = [];
              inc_line_offset = 0;
              inc_lineno = 0;
              try {
                ($a = ($c = self).$open, $a.$$p = (TMP_46 = function(f){var self = TMP_46.$$s || this, $e, $f, TMP_47;
if (f == null) f = nil;
                return (function(){var $brk = Opal.new_brk(); try {return ($e = ($f = f).$each_line, $e.$$p = (TMP_47 = function(l){var self = TMP_47.$$s || this, $g, $h, take = nil;
if (l == null) l = nil;
                  inc_lineno = $rb_plus(inc_lineno, 1);
                    take = inc_lines['$[]'](0);
                    if ((($g = ($h = Opal.get('Float')['$==='](take), $h !== false && $h !== nil && $h != null ?take['$infinite?']() : $h)) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                      selected.$push(l);
                      if (inc_line_offset['$=='](0)) {
                        return inc_line_offset = inc_lineno
                        } else {
                        return nil
                      };
                      } else {
                      if (f.$lineno()['$=='](take)) {
                        selected.$push(l);
                        if (inc_line_offset['$=='](0)) {
                          inc_line_offset = inc_lineno};
                        inc_lines.$shift();};
                      if ((($g = inc_lines['$empty?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
                        
                        Opal.brk(nil, $brk)
                        } else {
                        return nil
                      };
                    };}, TMP_47.$$s = self, TMP_47.$$brk = $brk, TMP_47.$$arity = 1, TMP_47), $e).call($f)
                  } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()}, TMP_46.$$s = self, TMP_46.$$arity = 1, TMP_46), $a).call($c, include_file, "r")
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                  try {
                    self.$warn("asciidoctor: WARNING: " + (self.$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                    self.$replace_next_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                    return true;
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              self.$advance();
              self.$push_include(selected, include_file, path, inc_line_offset, attributes);
            }
          } else if (tags !== false && tags !== nil && tags != null) {
            if ((($a = tags['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              selected = [];
              inc_line_offset = 0;
              inc_lineno = 0;
              active_tag = nil;
              tags_found = Opal.get('Set').$new();
              try {
                ($a = ($e = self).$open, $a.$$p = (TMP_48 = function(f){var self = TMP_48.$$s || this, $f, $g, TMP_49;
if (f == null) f = nil;
                return ($f = ($g = f).$each_line, $f.$$p = (TMP_49 = function(l){var self = TMP_49.$$s || this, $h, $i, TMP_50, tl = nil;
if (l == null) l = nil;
                  inc_lineno = $rb_plus(inc_lineno, 1);
                    if ((($h = $scope.get('FORCE_ENCODING')) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                      l.$force_encoding(((Opal.get('Encoding')).$$scope.get('UTF_8')))};
                    l = l.$rstrip();
                    tl = l.$chomp("-->").$rstrip();
                    if (active_tag !== false && active_tag !== nil && active_tag != null) {
                      if ((($h = tl['$end_with?']("end::" + (active_tag) + "[]")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                        return active_tag = nil
                        } else {
                        if ((($h = ($i = tl['$end_with?']("[]"), $i !== false && $i !== nil && $i != null ?$scope.get('TagDirectiveRx')['$=~'](tl) : $i)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                          } else {
                          selected.$push(l)
                        };
                        if (inc_line_offset['$=='](0)) {
                          return inc_line_offset = inc_lineno
                          } else {
                          return nil
                        };
                      }
                    } else if ((($h = ($i = tl['$end_with?']("[]"), $i !== false && $i !== nil && $i != null ?$scope.get('TagDirectiveRx')['$=~'](tl) : $i)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                      return (function(){var $brk = Opal.new_brk(); try {return ($h = ($i = tags).$each, $h.$$p = (TMP_50 = function(tag){var self = TMP_50.$$s || this, $j;
if (tag == null) tag = nil;
                      if ((($j = tl['$end_with?']("tag::" + (tag) + "[]")) !== nil && $j != null && (!$j.$$is_boolean || $j == true))) {
                          active_tag = tag;
                          tags_found['$<<'](tag);
                          
                          Opal.brk(nil, $brk);
                          } else {
                          return nil
                        }}, TMP_50.$$s = self, TMP_50.$$brk = $brk, TMP_50.$$arity = 1, TMP_50), $h).call($i)
                      } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()
                      } else {
                      return nil
                    };}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49), $f).call($g)}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48), $a).call($e, include_file, "r")
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                  try {
                    self.$warn("asciidoctor: WARNING: " + (self.$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                    self.$replace_next_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                    return true;
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              if ((($a = ((missing_tags = $rb_minus(tags.$to_a(), tags_found.$to_a())))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                self.$warn("asciidoctor: WARNING: " + (self.$line_info()) + ": tag" + ((function() {if ((($a = $rb_gt(missing_tags.$size(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  return "s"
                  } else {
                  return nil
                }; return nil; })()) + " '" + ($rb_times(missing_tags, ",")) + "' not found in include " + (target_type) + ": " + (include_file))
              };
              self.$advance();
              self.$push_include(selected, include_file, path, inc_line_offset, attributes);
            }
            } else {
            try {
              include_content = ($a = ($f = self).$open, $a.$$p = (TMP_51 = function(f){var self = TMP_51.$$s || this;
if (f == null) f = nil;
              return f.$read()}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51), $a).call($f, include_file, "r");
              self.$advance();
              self.$push_include(include_content, include_file, path, 1, attributes);
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  self.$warn("asciidoctor: WARNING: " + (self.$line_info()) + ": include " + (target_type) + " not readable: " + (include_file));
                  self.$replace_next_line("Unresolved directive in " + (self.path) + " - include::" + (target) + "[" + (raw_attributes) + "]");
                  return true;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          };
          return true;
          } else {
          return false
        };
      }, TMP_52.$$arity = 2);

      Opal.defn(self, '$push_include', TMP_53 = function ːpush_include(data, file, path, lineno, attributes) {
        var $a, self = this, depth = nil, old_leveloffset = nil;

        if (file == null) {
          file = nil;
        }
        if (path == null) {
          path = nil;
        }
        if (lineno == null) {
          lineno = 1;
        }
        if (attributes == null) {
          attributes = $hash2([], {});
        }
        self.include_stack['$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);
        if (file !== false && file !== nil && file != null) {
          self.file = file;
          self.dir = $scope.get('File').$dirname(file);
          self.process_lines = $scope.get('ASCIIDOC_EXTENSIONS')['$[]'](Opal.get('File').$extname(file));
          } else {
          self.file = nil;
          self.dir = ".";
          self.process_lines = true;
        };
        self.path = (function() {if (path !== false && path !== nil && path != null) {
          self.includes['$<<']($scope.get('Helpers').$rootname(path));
          return path;
          } else {
          return "<stdin>"
        }; return nil; })();
        self.lineno = lineno;
        if ((($a = attributes['$has_key?']("depth")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          depth = attributes['$[]']("depth").$to_i();
          if ((($a = $rb_le(depth, 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            depth = 1};
          self.maxdepth = $hash2(["abs", "rel"], {"abs": $rb_plus(($rb_minus(self.include_stack.$size(), 1)), depth), "rel": depth});};
        if ((($a = (self.lines = self.$prepare_lines(data, $hash2(["normalize", "condense", "indent"], {"normalize": true, "condense": false, "indent": attributes['$[]']("indent")})))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$pop_include()
          } else {
          if ((($a = attributes['$has_key?']("leveloffset")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.lines.$unshift("");
            self.lines.$unshift(":leveloffset: " + (attributes['$[]']("leveloffset")));
            self.lines.$push("");
            if ((($a = (old_leveloffset = self.document.$attr("leveloffset"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.lines.$push(":leveloffset: " + (old_leveloffset))
              } else {
              self.lines.$push(":leveloffset!:")
            };
            self.lineno = $rb_minus(self.lineno, 2);};
          self.eof = false;
          self.look_ahead = 0;
        };
        return self;
      }, TMP_53.$$arity = -2);

      Opal.defn(self, '$pop_include', TMP_54 = function ːpop_include() {
        var $a, $b, self = this;

        if ((($a = $rb_gt(self.include_stack.$size(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          $b = self.include_stack.$pop(), $a = Opal.to_ary($b), self.lines = ($a[0] == null ? nil : $a[0]), self.file = ($a[1] == null ? nil : $a[1]), self.dir = ($a[2] == null ? nil : $a[2]), self.path = ($a[3] == null ? nil : $a[3]), self.lineno = ($a[4] == null ? nil : $a[4]), self.maxdepth = ($a[5] == null ? nil : $a[5]), self.process_lines = ($a[6] == null ? nil : $a[6]), $b;
          self.eof = self.lines['$empty?']();
          self.look_ahead = 0;};
        return nil;
      }, TMP_54.$$arity = 0);

      Opal.defn(self, '$include_depth', TMP_55 = function ːinclude_depth() {
        var self = this;

        return self.include_stack.$size();
      }, TMP_55.$$arity = 0);

      Opal.defn(self, '$exceeded_max_depth?', TMP_56 = function() {
        var $a, $b, self = this, abs_maxdepth = nil;

        if ((($a = ($b = $rb_gt((abs_maxdepth = self.maxdepth['$[]']("abs")), 0), $b !== false && $b !== nil && $b != null ?$rb_ge(self.include_stack.$size(), abs_maxdepth) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.maxdepth['$[]']("rel")
          } else {
          return false
        };
      }, TMP_56.$$arity = 0);

      Opal.defn(self, '$shift', TMP_57 = function ːshift() {
        var $a, $b, $c, self = this, $iter = TMP_57.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_57.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($a = self.unescape_next_line) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.unescape_next_line = false;
          return ($a = ($b = self, Opal.find_super_dispatcher(self, 'shift', TMP_57, false)), $a.$$p = $iter, $a).apply($b, $zuper)['$[]']($range(1, -1, false));
          } else {
          return ($a = ($c = self, Opal.find_super_dispatcher(self, 'shift', TMP_57, false)), $a.$$p = $iter, $a).apply($c, $zuper)
        };
      }, TMP_57.$$arity = 0);

      Opal.defn(self, '$skip_front_matter!', TMP_58 = function(data, increment_linenos) {
        var $a, $b, $c, self = this, front_matter = nil, original_data = nil;

        if (increment_linenos == null) {
          increment_linenos = true;
        }
        front_matter = nil;
        if (data['$[]'](0)['$==']("---")) {
          original_data = data.$dup();
          front_matter = [];
          data.$shift();
          if (increment_linenos !== false && increment_linenos !== nil && increment_linenos != null) {
            self.lineno = $rb_plus(self.lineno, 1)};
          while ((($b = ($c = data['$empty?']()['$!'](), $c !== false && $c !== nil && $c != null ?data['$[]'](0)['$!=']("---") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          front_matter.$push(data.$shift());
          if (increment_linenos !== false && increment_linenos !== nil && increment_linenos != null) {
            self.lineno = $rb_plus(self.lineno, 1)};};
          if ((($a = data['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = data).$unshift.apply($a, Opal.to_a(original_data));
            if (increment_linenos !== false && increment_linenos !== nil && increment_linenos != null) {
              self.lineno = 0};
            front_matter = nil;
            } else {
            data.$shift();
            if (increment_linenos !== false && increment_linenos !== nil && increment_linenos != null) {
              self.lineno = $rb_plus(self.lineno, 1)};
          };};
        return front_matter;
      }, TMP_58.$$arity = -2);

      Opal.defn(self, '$resolve_expr_val', TMP_59 = function ːresolve_expr_val(val) {
        var $a, $b, $c, self = this, quoted = nil;

        if ((($a = ((($b = (($c = (val['$start_with?']("\"")), $c !== false && $c !== nil && $c != null ?(val['$end_with?']("\"")) : $c))) !== false && $b !== nil && $b != null) ? $b : (($c = (val['$start_with?']("'")), $c !== false && $c !== nil && $c != null ?(val['$end_with?']("'")) : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          quoted = true;
          val = val['$[]']($range(1, -1, true));
          } else {
          quoted = false
        };
        if ((($a = val['$include?']("{")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          val = self.document.$sub_attributes(val, $hash2(["attribute_missing"], {"attribute_missing": "drop"}))};
        if (quoted !== false && quoted !== nil && quoted != null) {
          return val
        } else if ((($a = val['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
        } else if (val['$==']("true")) {
          return true
        } else if (val['$==']("false")) {
          return false
        } else if ((($a = val.$rstrip()['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return " "
        } else if ((($a = val['$include?'](".")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return val.$to_f()
          } else {
          return val.$to_i()
        };
      }, TMP_59.$$arity = 1);

      Opal.defn(self, '$include_processors?', TMP_60 = function() {
        var $a, $b, self = this;

        if ((($a = self.include_processor_extensions['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ($b = self.document['$extensions?'](), $b !== false && $b !== nil && $b != null ?self.document.$extensions()['$include_processors?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return (self.include_processor_extensions = self.document.$extensions().$include_processors())['$!']()['$!']()
            } else {
            return self.include_processor_extensions = false
          }
          } else {
          return self.include_processor_extensions['$!='](false)
        };
      }, TMP_60.$$arity = 0);

      return (Opal.defn(self, '$to_s', TMP_62 = function ːto_s() {
        var $a, $b, TMP_61, self = this;

        return "#<" + (self.$class()) + "@" + (self.$object_id()) + " {path: " + (self.path.$inspect()) + ", line #: " + (self.lineno) + ", include depth: " + (self.include_stack.$size()) + ", include stack: [" + (($a = ($b = self.include_stack).$map, $a.$$p = (TMP_61 = function(inc){var self = TMP_61.$$s || this;
if (inc == null) inc = nil;
        return inc.$to_s()}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61), $a).call($b).$join(", ")) + "]}>";
      }, TMP_62.$$arity = 0), nil) && 'to_s';
    })($scope.base, $scope.get('Reader'));
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/section"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$+', '$level', '$>', '$==', '$context', '$special', '$has_key?', '$attributes', '$[]', '$chomp', '$tr_s', '$gsub', '$downcase', '$title', '$empty?', '$!', '$start_with?', '$unique_id_start_index', '$references', '$sectnum', '$assign_index', '$!=', '$class', '$object_id', '$inspect', '$size']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Section(){};
      var self = $Section = $klass($base, $super, 'Section', $Section);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      def.level = def.document = def.parent = def.number = def.title = def.numbered = def.blocks = nil;
      self.$attr_accessor("index");

      self.$attr_accessor("number");

      self.$attr_accessor("sectname");

      self.$attr_accessor("special");

      self.$attr_accessor("numbered");

      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(parent, level, numbered, opts) {
        var $a, $b, $c, self = this, $iter = TMP_1.$$p, $yield = $iter || nil;

        if (parent == null) {
          parent = nil;
        }
        if (level == null) {
          level = nil;
        }
        if (numbered == null) {
          numbered = true;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_1, false)), $a.$$p = null, $a).call($b, parent, "section", opts);
        if (level !== false && level !== nil && level != null) {
          self.level = level
          } else {
          self.level = (function() {if (parent !== false && parent !== nil && parent != null) {
            return ($rb_plus(parent.$level(), 1))
            } else {
            return 1
          }; return nil; })()
        };
        self.numbered = (($a = numbered !== false && numbered !== nil && numbered != null) ? $rb_gt(self.level, 0) : numbered);
        self.special = ($a = (($c = parent !== false && parent !== nil && parent != null) ? parent.$context()['$==']("section") : parent), $a !== false && $a !== nil && $a != null ?parent.$special() : $a);
        self.index = 0;
        return self.number = 1;
      }, TMP_1.$$arity = -1);

      Opal.alias(self, 'name', 'title');

      Opal.defn(self, '$generate_id', TMP_2 = function ːgenerate_id() {
        var $a, $b, $c, self = this, sep = nil, pre = nil, base_id = nil, gen_id = nil, cnt = nil;

        if ((($a = self.document.$attributes()['$has_key?']("sectids")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          sep = ((($a = self.document.$attributes()['$[]']("idseparator")) !== false && $a !== nil && $a != null) ? $a : "_");
          pre = ((($a = self.document.$attributes()['$[]']("idprefix")) !== false && $a !== nil && $a != null) ? $a : "_");
          base_id = "" + (pre) + (self.$title().$downcase().$gsub($scope.get('InvalidSectionIdCharsRx'), sep).$tr_s(sep, sep).$chomp(sep));
          if ((($a = ($b = ($c = pre['$empty?'](), $c !== false && $c !== nil && $c != null ?sep['$empty?']()['$!']() : $c), $b !== false && $b !== nil && $b != null ?base_id['$start_with?'](sep) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            base_id = base_id['$[]']($range(1, -1, false));
            while ((($b = base_id['$start_with?'](sep)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            base_id = base_id['$[]']($range(1, -1, false))};};
          gen_id = base_id;
          cnt = $scope.get('Compliance').$unique_id_start_index();
          while ((($b = self.document.$references()['$[]']("ids")['$has_key?'](gen_id)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          gen_id = "" + (base_id) + (sep) + (cnt);
          cnt = $rb_plus(cnt, 1);};
          return gen_id;
          } else {
          return nil
        };
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$sectnum', TMP_3 = function ːsectnum(delimiter, append) {
        var $a, $b, $c, $d, self = this;

        if (delimiter == null) {
          delimiter = ".";
        }
        if (append == null) {
          append = nil;
        }
        ((($a = append) !== false && $a !== nil && $a != null) ? $a : append = ((function() {if (append['$=='](false)) {
          return ""
          } else {
          return delimiter
        }; return nil; })()));
        if ((($a = ($b = ($c = ($d = self.level, $d !== false && $d !== nil && $d != null ?$rb_gt(self.level, 1) : $d), $c !== false && $c !== nil && $c != null ?self.parent : $c), $b !== false && $b !== nil && $b != null ?self.parent.$context()['$==']("section") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "" + (self.parent.$sectnum(delimiter)) + (self.number) + (append)
          } else {
          return "" + (self.number) + (append)
        };
      }, TMP_3.$$arity = -1);

      Opal.defn(self, '$<<', TMP_4 = function(block) {
        var $a, $b, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_4.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if (block.$context()['$==']("section")) {
          self.$assign_index(block)};
        return ($a = ($b = self, Opal.find_super_dispatcher(self, '<<', TMP_4, false)), $a.$$p = $iter, $a).apply($b, $zuper);
      }, TMP_4.$$arity = 1);

      return (Opal.defn(self, '$to_s', TMP_5 = function ːto_s() {
        var $a, $b, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, qualified_title = nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_5.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        if ((($a = self.title['$!='](nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          qualified_title = (function() {if ((($a = self.numbered) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return "" + (self.$sectnum()) + " " + (self.title)
            } else {
            return self.title
          }; return nil; })();
          return "#<" + (self.$class()) + "@" + (self.$object_id()) + " {level: " + (self.level) + ", title: " + (qualified_title.$inspect()) + ", blocks: " + (self.blocks.$size()) + "}>";
          } else {
          return ($a = ($b = self, Opal.find_super_dispatcher(self, 'to_s', TMP_5, false)), $a.$$p = $iter, $a).apply($b, $zuper)
        };
      }, TMP_5.$$arity = 0), nil) && 'to_s';
    })($scope.base, $scope.get('AbstractBlock'))
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/stylesheets"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$join', '$new', '$chomp', '$read', '$primary_stylesheet_data', '$open', '$write', '$primary_stylesheet_name', '$coderay_stylesheet_data', '$coderay_stylesheet_name', '$load_pygments', '$[]', '$[]=', '$sub', '$css', '$pygments_stylesheet_data', '$pygments_stylesheet_name', '$!', '$nil?', '$require_library']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Stylesheets(){};
      var self = $Stylesheets = $klass($base, $super, 'Stylesheets', $Stylesheets);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_8, TMP_9, TMP_11, TMP_12, TMP_13, TMP_14, TMP_16, TMP_17;

      def.primary_stylesheet_data = def.coderay_stylesheet_data = def.pygments_stylesheet_data = nil;
      Opal.cdecl($scope, 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");

      Opal.cdecl($scope, 'DEFAULT_PYGMENTS_STYLE', "default");

      Opal.cdecl($scope, 'STYLESHEETS_DATA_PATH', Opal.get('File').$join($scope.get('DATA_PATH'), "stylesheets"));

      self.__instance__ = self.$new();

      Opal.defs(self, '$instance', TMP_1 = function ːinstance() {
        var self = this;
        if (self.__instance__ == null) self.__instance__ = nil;

        return self.__instance__;
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$primary_stylesheet_name', TMP_2 = function ːprimary_stylesheet_name() {
        var self = this;

        return $scope.get('DEFAULT_STYLESHEET_NAME');
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$primary_stylesheet_data', TMP_3 = function ːprimary_stylesheet_data() {
var stylesheetsPath;
if ($scope.get("JAVASCRIPT_PLATFORM")["$=="]("node")) {
  stylesheetsPath = Opal.get("File").$join(__dirname, "css");
} else {
  stylesheetsPath = "css";
}
return ((($a = self.primary_stylesheet_data) !== false && $a !== nil && $a != null) ? $a : self.primary_stylesheet_data = Opal.get("IO").$read(Opal.get("File").$join(stylesheetsPath, "asciidoctor.css")).$chomp());
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$embed_primary_stylesheet', TMP_4 = function ːembed_primary_stylesheet() {
        var self = this;

        return "<style>\n" + (self.$primary_stylesheet_data()) + "\n</style>";
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$write_primary_stylesheet', TMP_6 = function ːwrite_primary_stylesheet(target_dir) {
        var $a, $b, TMP_5, self = this;

        return ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_5 = function(f){var self = TMP_5.$$s || this;
if (f == null) f = nil;
        return f.$write(self.$primary_stylesheet_data())}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b, Opal.get('File').$join(target_dir, self.$primary_stylesheet_name()), "w");
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$coderay_stylesheet_name', TMP_7 = function ːcoderay_stylesheet_name() {
        var self = this;

        return "coderay-asciidoctor.css";
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$coderay_stylesheet_data', TMP_8 = function ːcoderay_stylesheet_data() {
        var $a, self = this;

        return ((($a = self.coderay_stylesheet_data) !== false && $a !== nil && $a != null) ? $a : self.coderay_stylesheet_data = Opal.get('IO').$read(Opal.get('File').$join($scope.get('STYLESHEETS_DATA_PATH'), "coderay-asciidoctor.css")).$chomp());
      }, TMP_8.$$arity = 0);

      Opal.defn(self, '$embed_coderay_stylesheet', TMP_9 = function ːembed_coderay_stylesheet() {
        var self = this;

        return "<style>\n" + (self.$coderay_stylesheet_data()) + "\n</style>";
      }, TMP_9.$$arity = 0);

      Opal.defn(self, '$write_coderay_stylesheet', TMP_11 = function ːwrite_coderay_stylesheet(target_dir) {
        var $a, $b, TMP_10, self = this;

        return ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_10 = function(f){var self = TMP_10.$$s || this;
if (f == null) f = nil;
        return f.$write(self.$coderay_stylesheet_data())}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b, Opal.get('File').$join(target_dir, self.$coderay_stylesheet_name()), "w");
      }, TMP_11.$$arity = 1);

      Opal.defn(self, '$pygments_stylesheet_name', TMP_12 = function ːpygments_stylesheet_name(style) {
        var $a, self = this;

        if (style == null) {
          style = nil;
        }
        return "pygments-" + (((($a = style) !== false && $a !== nil && $a != null) ? $a : $scope.get('DEFAULT_PYGMENTS_STYLE'))) + ".css";
      }, TMP_12.$$arity = -1);

      Opal.defn(self, '$pygments_stylesheet_data', TMP_13 = function ːpygments_stylesheet_data(style) {
        var $a, $b, $c, $d, self = this;

        if (style == null) {
          style = nil;
        }
        if ((($a = self.$load_pygments()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ((($c = style) !== false && $c !== nil && $c != null) ? $c : $scope.get('DEFAULT_PYGMENTS_STYLE')), $b = (((($c = self.pygments_stylesheet_data) !== false && $c !== nil && $c != null) ? $c : self.pygments_stylesheet_data = $hash2([], {}))), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, (Opal.get('Pygments').$css(".listingblock .pygments", $hash2(["classprefix", "style"], {"classprefix": "tok-", "style": (((($d = style) !== false && $d !== nil && $d != null) ? $d : $scope.get('DEFAULT_PYGMENTS_STYLE')))}))).$sub(".listingblock .pygments  {", ".listingblock .pygments, .listingblock .pygments code {"))))
          } else {
          return "/* Pygments styles disabled. Pygments is not available. */"
        };
      }, TMP_13.$$arity = -1);

      Opal.defn(self, '$embed_pygments_stylesheet', TMP_14 = function ːembed_pygments_stylesheet(style) {
        var self = this;

        if (style == null) {
          style = nil;
        }
        return "<style>\n" + (self.$pygments_stylesheet_data(style)) + "\n</style>";
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$write_pygments_stylesheet', TMP_16 = function ːwrite_pygments_stylesheet(target_dir, style) {
        var $a, $b, TMP_15, self = this;

        if (style == null) {
          style = nil;
        }
        return ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_15 = function(f){var self = TMP_15.$$s || this;
if (f == null) f = nil;
        return f.$write(self.$pygments_stylesheet_data(style))}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b, Opal.get('File').$join(target_dir, self.$pygments_stylesheet_name(style)), "w");
      }, TMP_16.$$arity = -2);

      return (Opal.defn(self, '$load_pygments', TMP_17 = function ːload_pygments() {
        var $a, self = this;

        if ((($a = ((Opal.Object.$$scope.Pygments == null ? nil : 'constant'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return true
          } else {
          return ($scope.get('Helpers').$require_library("pygments", "pygments.rb", "ignore"))['$nil?']()['$!']()
        };
      }, TMP_17.$$arity = 0), nil) && 'load_pygments';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
Opal.modules["asciidoctor/table"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$new', '$key?', '$[]', '$>', '$to_i', '$<', '$==', '$[]=', '$attributes', '$round', '$*', '$/', '$to_f', '$empty?', '$body', '$each', '$+', '$<<', '$size', '$assign_column_widths', '$**', '$assign_width', '$-', '$shift', '$style=', '$head=', '$foot=', '$pop', '$update_attributes', '$parent', '$attr_reader', '$delete', '$!', '$header_row?', '$table', '$split', '$include?', '$readlines', '$!=', '$unshift', '$nil?', '$strip', '$apply_normal_subs', '$convert', '$map', '$text', '$to_s', '$cursor', '$raise', '$nested?', '$document', '$escape', '$columns', '$start_with?', '$match', '$chop', '$pre_match', '$post_match', '$end_with?', '$lstrip', '$push_cellspec', '$cell_open?', '$close_cell', '$advance', '$take_cellspec', '$warn', '$line_info', '$tr_s', '$upto', '$times', '$rowspan', '$activate_rowspan', '$colspan', '$end_of_row?', '$close_row', '$rows', '$effective_column_visits']);
  return (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Table(){};
      var self = $Table = $klass($base, $super, 'Table', $Table);

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_5, TMP_8, TMP_10;

      def.attributes = def.document = def.has_header_option = def.rows = def.columns = nil;
      (function($base, $super) {
        function $Rows(){};
        var self = $Rows = $klass($base, $super, 'Rows', $Rows);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        self.$attr_accessor("head", "foot", "body");

        Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(head, foot, body) {
          var self = this;

          if (head == null) {
            head = [];
          }
          if (foot == null) {
            foot = [];
          }
          if (body == null) {
            body = [];
          }
          self.head = head;
          self.foot = foot;
          return self.body = body;
        }, TMP_1.$$arity = -1);

        return Opal.alias(self, '[]', 'send');
      })($scope.base, null);

      Opal.cdecl($scope, 'DEFAULT_DATA_FORMAT', "psv");

      Opal.cdecl($scope, 'DATA_FORMATS', ["psv", "dsv", "csv"]);

      Opal.cdecl($scope, 'DEFAULT_DELIMITERS', $hash2(["psv", "dsv", "csv"], {"psv": "|", "dsv": ":", "csv": ","}));

      Opal.cdecl($scope, 'TEXT_STYLES', $hash2(["d", "s", "e", "m", "h", "l", "v", "a"], {"d": "none", "s": "strong", "e": "emphasis", "m": "monospaced", "h": "header", "l": "literal", "v": "verse", "a": "asciidoc"}));

      Opal.cdecl($scope, 'ALIGNMENTS', $hash2(["h", "v"], {"h": $hash2(["<", ">", "^"], {"<": "left", ">": "right", "^": "center"}), "v": $hash2(["<", ">", "^"], {"<": "top", ">": "bottom", "^": "middle"})}));

      self.$attr_accessor("columns");

      self.$attr_accessor("rows");

      self.$attr_accessor("has_header_option");

      Opal.defn(self, '$initialize', TMP_2 = function ːinitialize(parent, attributes) {
        var $a, $b, $c, $d, self = this, $iter = TMP_2.$$p, $yield = $iter || nil, pcwidth = nil, pcwidth_intval = nil;

        TMP_2.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_2, false)), $a.$$p = null, $a).call($b, parent, "table");
        self.rows = $scope.get('Rows').$new();
        self.columns = [];
        self.has_header_option = attributes['$key?']("header-option");
        if ((($a = (pcwidth = attributes['$[]']("width"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = ((($c = $rb_gt((pcwidth_intval = pcwidth.$to_i()), 100)) !== false && $c !== nil && $c != null) ? $c : $rb_lt(pcwidth_intval, 1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = (($c = pcwidth_intval['$=='](0)) ? (((($d = pcwidth['$==']("0")) !== false && $d !== nil && $d != null) ? $d : pcwidth['$==']("0%"))) : pcwidth_intval['$=='](0))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              } else {
              pcwidth_intval = 100
            }}
          } else {
          pcwidth_intval = 100
        };
        self.attributes['$[]=']("tablepcwidth", pcwidth_intval);
        if ((($a = self.document.$attributes()['$key?']("pagewidth")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = "tableabswidth", $c = self.attributes, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, ($rb_times(($rb_divide(self.attributes['$[]']("tablepcwidth").$to_f(), 100)), self.document.$attributes()['$[]']("pagewidth"))).$round())))};
        if ((($a = attributes['$key?']("rotate-option")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return attributes['$[]=']("orientation", "landscape")
          } else {
          return nil
        };
      }, TMP_2.$$arity = 2);

      Opal.defn(self, '$header_row?', TMP_3 = function() {
        var $a, self = this;

        return ($a = self.has_header_option, $a !== false && $a !== nil && $a != null ?self.rows.$body()['$empty?']() : $a);
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$create_columns', TMP_5 = function ːcreate_columns(colspecs) {
        var $a, $b, TMP_4, self = this, cols = nil, width_base = nil;

        cols = [];
        width_base = 0;
        ($a = ($b = colspecs).$each, $a.$$p = (TMP_4 = function(colspec){var self = TMP_4.$$s || this;
if (colspec == null) colspec = nil;
        width_base = $rb_plus(width_base, colspec['$[]']("width"));
          return cols['$<<'](($scope.get('Column').$new(self, cols.$size(), colspec)));}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($b);
        if ((($a = (self.columns = cols)['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.attributes['$[]=']("colcount", cols.$size());
          self.$assign_column_widths((function() {if (width_base['$=='](0)) {
            return nil
            } else {
            return width_base
          }; return nil; })());
        };
        return nil;
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$assign_column_widths', TMP_8 = function ːassign_column_widths(width_base) {
        var $a, $b, TMP_6, $c, TMP_7, self = this, pf = nil, total_width = nil, col_pcwidth = nil;

        if (width_base == null) {
          width_base = nil;
        }
        pf = (10)['$**'](4);
        total_width = col_pcwidth = 0;
        if (width_base !== false && width_base !== nil && width_base != null) {
          ($a = ($b = self.columns).$each, $a.$$p = (TMP_6 = function(col){var self = TMP_6.$$s || this;
if (col == null) col = nil;
          return total_width = $rb_plus(total_width, (col_pcwidth = col.$assign_width(nil, width_base, pf)))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b)
          } else {
          col_pcwidth = $rb_divide((($rb_divide($rb_times(100, pf), self.columns.$size())).$to_i()), pf);
          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {
            col_pcwidth = col_pcwidth.$to_i()};
          ($a = ($c = self.columns).$each, $a.$$p = (TMP_7 = function(col){var self = TMP_7.$$s || this;
if (col == null) col = nil;
          return total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth))}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($c);
        };
        if (total_width['$=='](100)) {
          } else {
          self.columns['$[]'](-1).$assign_width($rb_divide(($rb_times(($rb_plus($rb_minus(100, total_width), col_pcwidth)), pf)).$round(), pf))
        };
        return nil;
      }, TMP_8.$$arity = -1);

      return (Opal.defn(self, '$partition_header_footer', TMP_10 = function ːpartition_header_footer(attributes) {
        var $a, $b, TMP_9, $c, self = this, num_body_rows = nil, head = nil;

        self.attributes['$[]=']("rowcount", self.rows.$body().$size());
        num_body_rows = self.rows.$body().$size();
        if ((($a = ($b = $rb_gt(num_body_rows, 0), $b !== false && $b !== nil && $b != null ?self.has_header_option : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          head = self.rows.$body().$shift();
          num_body_rows = $rb_minus(num_body_rows, 1);
          ($a = ($b = head).$each, $a.$$p = (TMP_9 = function(c){var self = TMP_9.$$s || this, $c, $d;
if (c == null) c = nil;
          return (($c = [nil]), $d = c, $d['$style='].apply($d, $c), $c[$c.length-1])}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b);
          (($a = [[head]]), $c = self.rows, $c['$head='].apply($c, $a), $a[$a.length-1]);};
        if ((($a = ($c = $rb_gt(num_body_rows, 0), $c !== false && $c !== nil && $c != null ?attributes['$key?']("footer-option") : $c)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          (($a = [[self.rows.$body().$pop()]]), $c = self.rows, $c['$foot='].apply($c, $a), $a[$a.length-1])};
        return nil;
      }, TMP_10.$$arity = 1), nil) && 'partition_header_footer';
    })($scope.base, $scope.get('AbstractBlock'));

    (function($base, $super) {
      function $Column(){};
      var self = $Column = $klass($base, $super, 'Column', $Column);

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12;

      def.attributes = nil;
      self.$attr_accessor("style");

      Opal.defn(self, '$initialize', TMP_11 = function ːinitialize(table, index, attributes) {
        var $a, $b, $c, $d, self = this, $iter = TMP_11.$$p, $yield = $iter || nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        TMP_11.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_11, false)), $a.$$p = null, $a).call($b, table, "column");
        self.style = attributes['$[]']("style");
        attributes['$[]=']("colnumber", $rb_plus(index, 1));
        ($a = "width", $c = attributes, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, 1)));
        ($a = "halign", $c = attributes, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "left")));
        ($a = "valign", $c = attributes, ((($d = $c['$[]']($a)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($a, "top")));
        return self.$update_attributes(attributes);
      }, TMP_11.$$arity = -3);

      Opal.alias(self, 'table', 'parent');

      return (Opal.defn(self, '$assign_width', TMP_12 = function ːassign_width(col_pcwidth, width_base, pf) {
        var $a, self = this;

        if (width_base == null) {
          width_base = nil;
        }
        if (pf == null) {
          pf = 10000;
        }
        if (width_base !== false && width_base !== nil && width_base != null) {
          col_pcwidth = $rb_divide(($rb_times($rb_times(($rb_divide(self.attributes['$[]']("width").$to_f(), width_base)), 100), pf)).$to_i(), pf);
          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {
            col_pcwidth = col_pcwidth.$to_i()};};
        self.attributes['$[]=']("colpcwidth", col_pcwidth);
        if ((($a = self.$parent().$attributes()['$key?']("tableabswidth")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.attributes['$[]=']("colabswidth", ($rb_times(($rb_divide(col_pcwidth, 100)), self.$parent().$attributes()['$[]']("tableabswidth"))).$round())};
        return col_pcwidth;
      }, TMP_12.$$arity = -2), nil) && 'assign_width';
    })($scope.get('Table'), $scope.get('AbstractNode'));

    (function($base, $super) {
      function $Cell(){};
      var self = $Cell = $klass($base, $super, 'Cell', $Cell);

      var def = self.$$proto, $scope = self.$$scope, TMP_13, TMP_14, TMP_16, TMP_17;

      def.style = def.document = def.text = def.inner_document = def.colspan = def.rowspan = def.attributes = nil;
      self.$attr_accessor("style");

      self.$attr_accessor("colspan");

      self.$attr_accessor("rowspan");

      Opal.alias(self, 'column', 'parent');

      self.$attr_reader("inner_document");

      Opal.defn(self, '$initialize', TMP_13 = function ːinitialize(column, text, attributes, cursor) {
        var $a, $b, $c, self = this, $iter = TMP_13.$$p, $yield = $iter || nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_lines = nil, processed_lines = nil;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        if (cursor == null) {
          cursor = nil;
        }
        TMP_13.$$p = null;
        ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_13, false)), $a.$$p = null, $a).call($b, column, "cell");
        self.text = text;
        self.style = nil;
        self.colspan = nil;
        self.rowspan = nil;
        if (column !== false && column !== nil && column != null) {
          self.style = column.$attributes()['$[]']("style");
          self.$update_attributes(column.$attributes());};
        if (attributes !== false && attributes !== nil && attributes != null) {
          self.colspan = attributes.$delete("colspan");
          self.rowspan = attributes.$delete("rowspan");
          if ((($a = attributes['$key?']("style")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.style = attributes['$[]']("style")};
          self.$update_attributes(attributes);};
        if ((($a = (($c = self.style['$==']("asciidoc")) ? column.$table()['$header_row?']()['$!']() : self.style['$==']("asciidoc"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          parent_doctitle = self.document.$attributes().$delete("doctitle");
          inner_document_lines = self.text.$split($scope.get('EOL'));
          if ((($a = ((($c = inner_document_lines['$empty?']()) !== false && $c !== nil && $c != null) ? $c : inner_document_lines['$[]'](0)['$include?']("::")['$!']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            unprocessed_lines = inner_document_lines['$[]'](0);
            processed_lines = $scope.get('PreprocessorReader').$new(self.document, unprocessed_lines).$readlines();
            if ((($a = processed_lines['$!='](unprocessed_lines)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              inner_document_lines.$shift();
              ($a = inner_document_lines).$unshift.apply($a, Opal.to_a(processed_lines));};
          };
          self.inner_document = $scope.get('Document').$new(inner_document_lines, $hash2(["header_footer", "parent", "cursor"], {"header_footer": false, "parent": self.document, "cursor": cursor}));
          if ((($c = parent_doctitle['$nil?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return nil
            } else {
            return self.document.$attributes()['$[]=']("doctitle", parent_doctitle)
          };
          } else {
          return nil
        };
      }, TMP_13.$$arity = -3);

      Opal.defn(self, '$text', TMP_14 = function ːtext() {
        var self = this;

        return self.$apply_normal_subs(self.text).$strip();
      }, TMP_14.$$arity = 0);

      Opal.defn(self, '$content', TMP_16 = function ːcontent() {
        var $a, $b, TMP_15, self = this;

        if (self.style['$==']("asciidoc")) {
          return self.inner_document.$convert()
          } else {
          return ($a = ($b = self.$text().$split($scope.get('BlankLineRx'))).$map, $a.$$p = (TMP_15 = function(p){var self = TMP_15.$$s || this, $c, $d;
            if (self.style == null) self.style = nil;
if (p == null) p = nil;
          if ((($c = ((($d = self.style['$!']()) !== false && $d !== nil && $d != null) ? $d : self.style['$==']("header"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return p
              } else {
              return $scope.get('Inline').$new(self.$parent(), "quoted", p, $hash2(["type"], {"type": self.style})).$convert()
            }}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $a).call($b)
        };
      }, TMP_16.$$arity = 0);

      return (Opal.defn(self, '$to_s', TMP_17 = function ːto_s() {
        var $a, $b, self = this, $iter = TMP_17.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

        TMP_17.$$p = null;
        $zuper = [];
        
        for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
          $zuper[$zuper_index] = arguments[$zuper_index];
        }
        return "" + (($a = ($b = self, Opal.find_super_dispatcher(self, 'to_s', TMP_17, false)), $a.$$p = $iter, $a).apply($b, $zuper).$to_s()) + " - [text: " + (self.text) + ", colspan: " + (((($a = self.colspan) !== false && $a !== nil && $a != null) ? $a : 1)) + ", rowspan: " + (((($a = self.rowspan) !== false && $a !== nil && $a != null) ? $a : 1)) + ", attributes: " + (self.attributes) + "]";
      }, TMP_17.$$arity = 0), nil) && 'to_s';
    })($scope.get('Table'), $scope.get('AbstractNode'));

    (function($base, $super) {
      function $ParserContext(){};
      var self = $ParserContext = $klass($base, $super, 'ParserContext', $ParserContext);

      var def = self.$$proto, $scope = self.$$scope, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_33, TMP_34, TMP_36, TMP_37, TMP_38, TMP_39;

      def.format = def.delimiter = def.delimiter_re = def.buffer = def.cellspecs = def.cell_open = def.last_cursor = def.table = def.current_row = def.colcount = def.column_visits = def.active_rowspans = def.linenum = nil;
      self.$attr_accessor("table");

      self.$attr_accessor("format");

      self.$attr_reader("colcount");

      self.$attr_accessor("buffer");

      self.$attr_reader("delimiter");

      self.$attr_reader("delimiter_re");

      Opal.defn(self, '$initialize', TMP_18 = function ːinitialize(reader, table, attributes) {
        var $a, $b, $c, self = this;

        if (attributes == null) {
          attributes = $hash2([], {});
        }
        self.reader = reader;
        self.table = table;
        self.last_cursor = reader.$cursor();
        if ((($a = (self.format = attributes['$[]']("format"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          if ((($a = (($scope.get('Table')).$$scope.get('DATA_FORMATS'))['$include?'](self.format)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("Illegal table format: " + (self.format))
          }
          } else {
          self.format = (($scope.get('Table')).$$scope.get('DEFAULT_DATA_FORMAT'))
        };
        self.delimiter = (function() {if ((($a = ($b = (($c = self.format['$==']("psv")) ? (attributes['$key?']("separator"))['$!']() : self.format['$==']("psv")), $b !== false && $b !== nil && $b != null ?table.$document()['$nested?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "!"
          } else {
          return ((($a = attributes['$[]']("separator")) !== false && $a !== nil && $a != null) ? $a : (($scope.get('Table')).$$scope.get('DEFAULT_DELIMITERS'))['$[]'](self.format))
        }; return nil; })();
        self.delimiter_re = (new RegExp("" + $scope.get('Regexp').$escape(self.delimiter)));
        self.colcount = (function() {if ((($a = table.$columns()['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return -1
          } else {
          return table.$columns().$size()
        }; return nil; })();
        self.buffer = "";
        self.cellspecs = [];
        self.cell_open = false;
        self.active_rowspans = [0];
        self.column_visits = 0;
        self.current_row = [];
        return self.linenum = -1;
      }, TMP_18.$$arity = -3);

      Opal.defn(self, '$starts_with_delimiter?', TMP_19 = function(line) {
        var self = this;

        return line['$start_with?'](self.delimiter);
      }, TMP_19.$$arity = 1);

      Opal.defn(self, '$match_delimiter', TMP_20 = function ːmatch_delimiter(line) {
        var self = this;

        return self.delimiter_re.$match(line);
      }, TMP_20.$$arity = 1);

      Opal.defn(self, '$skip_matched_delimiter', TMP_21 = function ːskip_matched_delimiter(match, escaped) {
        var self = this;

        if (escaped == null) {
          escaped = false;
        }
        self.buffer = "" + (self.buffer) + ((function() {if (escaped !== false && escaped !== nil && escaped != null) {
          return match.$pre_match().$chop()
          } else {
          return match.$pre_match()
        }; return nil; })()) + (self.delimiter);
        return match.$post_match();
      }, TMP_21.$$arity = -2);

      Opal.defn(self, '$buffer_has_unclosed_quotes?', TMP_22 = function(append) {
        var $a, $b, self = this, record = nil;

        if (append == null) {
          append = nil;
        }
        record = ((("") + (self.buffer)) + (append)).$strip();
        return ($a = ($b = record['$start_with?']("\""), $b !== false && $b !== nil && $b != null ?record['$start_with?']("\"\"")['$!']() : $b), $a !== false && $a !== nil && $a != null ?record['$end_with?']("\"")['$!']() : $a);
      }, TMP_22.$$arity = -1);

      Opal.defn(self, '$buffer_quoted?', TMP_23 = function() {
        var $a, self = this;

        self.buffer = self.buffer.$lstrip();
        return ($a = self.buffer['$start_with?']("\""), $a !== false && $a !== nil && $a != null ?self.buffer['$start_with?']("\"\"")['$!']() : $a);
      }, TMP_23.$$arity = 0);

      Opal.defn(self, '$take_cellspec', TMP_24 = function ːtake_cellspec() {
        var self = this;

        return self.cellspecs.$shift();
      }, TMP_24.$$arity = 0);

      Opal.defn(self, '$push_cellspec', TMP_25 = function ːpush_cellspec(cellspec) {
        var $a, self = this;

        if (cellspec == null) {
          cellspec = $hash2([], {});
        }
        self.cellspecs['$<<']((((($a = cellspec) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}))));
        return nil;
      }, TMP_25.$$arity = -1);

      Opal.defn(self, '$keep_cell_open', TMP_26 = function ːkeep_cell_open() {
        var self = this;

        self.cell_open = true;
        return nil;
      }, TMP_26.$$arity = 0);

      Opal.defn(self, '$mark_cell_closed', TMP_27 = function ːmark_cell_closed() {
        var self = this;

        self.cell_open = false;
        return nil;
      }, TMP_27.$$arity = 0);

      Opal.defn(self, '$cell_open?', TMP_28 = function() {
        var self = this;

        return self.cell_open;
      }, TMP_28.$$arity = 0);

      Opal.defn(self, '$cell_closed?', TMP_29 = function() {
        var self = this;

        return self.cell_open['$!']();
      }, TMP_29.$$arity = 0);

      Opal.defn(self, '$close_open_cell', TMP_30 = function ːclose_open_cell(next_cellspec) {
        var $a, self = this;

        if (next_cellspec == null) {
          next_cellspec = $hash2([], {});
        }
        self.$push_cellspec(next_cellspec);
        if ((($a = self['$cell_open?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$close_cell(true)};
        self.$advance();
        return nil;
      }, TMP_30.$$arity = -1);

      Opal.defn(self, '$close_cell', TMP_33 = function ːclose_cell(eol) {try {

        var $a, $b, TMP_31, self = this, cell_text = nil, cellspec = nil, repeat = nil;

        if (eol == null) {
          eol = false;
        }
        cell_text = self.buffer.$strip();
        self.buffer = "";
        if (self.format['$==']("psv")) {
          cellspec = self.$take_cellspec();
          if (cellspec !== false && cellspec !== nil && cellspec != null) {
            repeat = ((($a = cellspec.$delete("repeatcol")) !== false && $a !== nil && $a != null) ? $a : 1)
            } else {
            self.$warn("asciidoctor: ERROR: " + (self.last_cursor.$line_info()) + ": table missing leading separator, recovering automatically");
            cellspec = $hash2([], {});
            repeat = 1;
          };
          } else {
          cellspec = nil;
          repeat = 1;
          if (self.format['$==']("csv")) {
            if ((($a = ($b = cell_text['$empty?']()['$!'](), $b !== false && $b !== nil && $b != null ?cell_text['$include?']("\"") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = ($b = cell_text['$start_with?']("\""), $b !== false && $b !== nil && $b != null ?cell_text['$end_with?']("\"") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                cell_text = cell_text['$[]']($range(1, -1, true)).$strip()};
              cell_text = cell_text.$tr_s("\"", "\"");}};
        };
        ($a = ($b = (1)).$upto, $a.$$p = (TMP_31 = function(i){var self = TMP_31.$$s || this, $c, $d, $e, TMP_32, $f, $g, column = nil, extra_cols = nil, offset = nil, cell = nil;
          if (self.colcount == null) self.colcount = nil;
          if (self.table == null) self.table = nil;
          if (self.current_row == null) self.current_row = nil;
          if (self.last_cursor == null) self.last_cursor = nil;
          if (self.reader == null) self.reader = nil;
          if (self.column_visits == null) self.column_visits = nil;
          if (self.linenum == null) self.linenum = nil;
if (i == null) i = nil;
        if (self.colcount['$=='](-1)) {
            self.table.$columns()['$<<']((column = (($scope.get('Table')).$$scope.get('Column')).$new(self.table, $rb_minus($rb_plus(self.table.$columns().$size(), i), 1))));
            if ((($c = ($d = (($e = cellspec !== false && cellspec !== nil && cellspec != null) ? (cellspec['$key?']("colspan")) : cellspec), $d !== false && $d !== nil && $d != null ?$rb_gt((extra_cols = $rb_minus(cellspec['$[]']("colspan").$to_i(), 1)), 0) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              offset = self.table.$columns().$size();
              ($c = ($d = extra_cols).$times, $c.$$p = (TMP_32 = function(j){var self = TMP_32.$$s || this;
                if (self.table == null) self.table = nil;
if (j == null) j = nil;
              return self.table.$columns()['$<<']((($scope.get('Table')).$$scope.get('Column')).$new(self.table, $rb_plus(offset, j)))}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32), $c).call($d);};
          } else if ((($c = (column = self.table.$columns()['$[]'](self.current_row.$size()))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$warn("asciidoctor: ERROR: " + (self.last_cursor.$line_info()) + ": dropping cell because it exceeds specified number of columns");
            Opal.ret(nil);
          };
          cell = (($scope.get('Table')).$$scope.get('Cell')).$new(column, cell_text, cellspec, self.last_cursor);
          self.last_cursor = self.reader.$cursor();
          if ((($c = ((($e = cell.$rowspan()['$!']()) !== false && $e !== nil && $e != null) ? $e : cell.$rowspan()['$=='](1))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$activate_rowspan(cell.$rowspan(), (((($c = cell.$colspan()) !== false && $c !== nil && $c != null) ? $c : 1)))
          };
          self.column_visits = $rb_plus(self.column_visits, (((($c = cell.$colspan()) !== false && $c !== nil && $c != null) ? $c : 1)));
          self.current_row['$<<'](cell);
          if ((($c = ($e = self['$end_of_row?'](), $e !== false && $e !== nil && $e != null ?(((($f = ((($g = self.colcount['$!='](-1)) !== false && $g !== nil && $g != null) ? $g : $rb_gt(self.linenum, 0))) !== false && $f !== nil && $f != null) ? $f : ((($g = eol !== false && eol !== nil && eol != null) ? i['$=='](repeat) : eol)))) : $e)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return self.$close_row()
            } else {
            return nil
          };}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b, repeat);
        self.cell_open = false;
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_33.$$arity = -1);

      Opal.defn(self, '$close_row', TMP_34 = function ːclose_row() {
        var $a, $b, $c, self = this;

        self.table.$rows().$body()['$<<'](self.current_row);
        if (self.colcount['$=='](-1)) {
          self.colcount = self.column_visits};
        self.column_visits = 0;
        self.current_row = [];
        self.active_rowspans.$shift();
        ($a = 0, $b = self.active_rowspans, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, 0)));
        return nil;
      }, TMP_34.$$arity = 0);

      Opal.defn(self, '$activate_rowspan', TMP_36 = function ːactivate_rowspan(rowspan, colspan) {
        var $a, $b, TMP_35, self = this;

        ($a = ($b = (1).$upto($rb_minus(rowspan, 1))).$each, $a.$$p = (TMP_35 = function(i){var self = TMP_35.$$s || this, $c;
          if (self.active_rowspans == null) self.active_rowspans = nil;
if (i == null) i = nil;
        return self.active_rowspans['$[]='](i, $rb_plus((((($c = self.active_rowspans['$[]'](i)) !== false && $c !== nil && $c != null) ? $c : 0)), colspan))}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $a).call($b);
        return nil;
      }, TMP_36.$$arity = 2);

      Opal.defn(self, '$end_of_row?', TMP_37 = function() {
        var $a, self = this;

        return ((($a = self.colcount['$=='](-1)) !== false && $a !== nil && $a != null) ? $a : self.$effective_column_visits()['$=='](self.colcount));
      }, TMP_37.$$arity = 0);

      Opal.defn(self, '$effective_column_visits', TMP_38 = function ːeffective_column_visits() {
        var self = this;

        return $rb_plus(self.column_visits, self.active_rowspans['$[]'](0));
      }, TMP_38.$$arity = 0);

      return (Opal.defn(self, '$advance', TMP_39 = function ːadvance() {
        var self = this;

        return self.linenum = $rb_plus(self.linenum, 1);
      }, TMP_39.$$arity = 0), nil) && 'advance';
    })($scope.get('Table'), null);
  })($scope.base)
};

/* Generated by Opal 0.10.1 */
(function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $module = Opal.module, $hash2 = Opal.hash2, $range = Opal.range, $hash = Opal.hash;
  if ($gvars[":"] == null) $gvars[":"] = nil;

  Opal.add_stubs(['$==', '$>=', '$require', '$unshift', '$dirname', '$new', '$attr', '$instance_variable_set', '$send', '$<<', '$define', '$expand_path', '$join', '$home', '$[]', '$pwd', '$!', '$!=', '$default_external', '$to_a', '$bytes', '$to_set', '$map', '$keys', '$*', '$dup', '$[]=', '$insert', '$start', '$===', '$inject', '$split', '$gsub', '$respond_to?', '$each', '$raise', '$ancestors', '$class', '$path', '$utc', '$at', '$to_i', '$mtime', '$readlines', '$basename', '$strftime', '$rewind', '$entries', '$lines', '$record', '$parse', '$exception', '$message', '$set_backtrace', '$backtrace', '$stack_trace=', '$stack_trace', '$load', '$delete', '$key?', '$attributes', '$outfilesuffix', '$has_key?', '$safe', '$normalize_system_path', '$directory?', '$mkdir_p', '$convert', '$write', '$<', '$attr?', '$uriish?', '$include?', '$write_primary_stylesheet', '$instance', '$empty?', '$nil?', '$read_asset', '$open', '$write_coderay_stylesheet', '$write_pygments_stylesheet']);
  if ((($a = ($scope.RUBY_ENGINE != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    } else {
    Opal.cdecl($scope, 'RUBY_ENGINE', "unknown")
  };
  Opal.cdecl($scope, 'RUBY_ENGINE_OPAL', ($scope.get('RUBY_ENGINE')['$==']("opal")));
  Opal.cdecl($scope, 'RUBY_ENGINE_JRUBY', ($scope.get('RUBY_ENGINE')['$==']("jruby")));
  Opal.cdecl($scope, 'RUBY_MIN_VERSION_1_9', ($rb_ge($scope.get('RUBY_VERSION'), "1.9")));
  Opal.cdecl($scope, 'RUBY_MIN_VERSION_2', ($rb_ge($scope.get('RUBY_VERSION'), "2")));
  self.$require("set");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("asciidoctor/opal_ext")};
  $gvars[":"].$unshift($scope.get('File').$dirname("asciidoctor"));
  (function($base) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_2, quote_subs = nil, compat_quote_subs = nil;

    Opal.cdecl($scope, 'RUBY_ENGINE', Opal.get('RUBY_ENGINE'));

    (function($base) {
      var $SafeMode, self = $SafeMode = $module($base, 'SafeMode');

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'UNSAFE', 0);

      Opal.cdecl($scope, 'SAFE', 1);

      Opal.cdecl($scope, 'SERVER', 10);

      Opal.cdecl($scope, 'SECURE', 20);
    })($scope.base);

    (function($base) {
      var $Compliance, self = $Compliance = $module($base, 'Compliance');

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.keys = Opal.get('Set').$new();

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto;

        return self.$attr("keys")
      })(Opal.get_singleton_class(self));

      Opal.defs(self, '$define', TMP_1 = function ːdefine(key, value) {
        var self = this;
        if (self.keys == null) self.keys = nil;

        self.$instance_variable_set("@" + (key), value);
        (function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return self
        })(Opal.get_singleton_class(self)).$send("attr_accessor", key);
        self.keys['$<<'](key);
        return nil;
      }, TMP_1.$$arity = 2);

      self.$define("block_terminates_paragraph", true);

      self.$define("strict_verbatim_paragraphs", true);

      self.$define("underline_style_section_titles", true);

      self.$define("unwrap_standalone_preamble", true);

      self.$define("attribute_missing", "skip");

      self.$define("attribute_undefined", "drop-line");

      self.$define("shorthand_property_syntax", true);

      self.$define("unique_id_start_index", 2);

      self.$define("markdown_syntax", true);
    })($scope.base);

    Opal.cdecl($scope, 'ROOT_PATH', Opal.get('File').$dirname(Opal.get('File').$dirname(Opal.get('File').$expand_path("asciidoctor"))));

    Opal.cdecl($scope, 'LIB_PATH', Opal.get('File').$join($scope.get('ROOT_PATH'), "lib"));

    Opal.cdecl($scope, 'DATA_PATH', Opal.get('File').$join($scope.get('ROOT_PATH'), "data"));

    try {
      Opal.cdecl($scope, 'USER_HOME', Opal.get('Dir').$home())
    } catch ($err) {
      if (Opal.rescue($err, [$scope.get('StandardError')])) {
        try {
          Opal.cdecl($scope, 'USER_HOME', ((($a = Opal.get('ENV')['$[]']("HOME")) !== false && $a !== nil && $a != null) ? $a : Opal.get('Dir').$pwd()))
        } finally { Opal.pop_exception() }
      } else { throw $err; }
    };

    Opal.cdecl($scope, 'COERCE_ENCODING', ($a = Opal.get('RUBY_ENGINE_OPAL')['$!'](), $a !== false && $a !== nil && $a != null ?Opal.get('RUBY_MIN_VERSION_1_9') : $a));

    Opal.cdecl($scope, 'FORCE_ENCODING', ($a = $scope.get('COERCE_ENCODING'), $a !== false && $a !== nil && $a != null ?Opal.get('Encoding').$default_external()['$!='](((Opal.get('Encoding')).$$scope.get('UTF_8'))) : $a));

    Opal.cdecl($scope, 'BOM_BYTES_UTF_8', "ï»¿".$bytes().$to_a());

    Opal.cdecl($scope, 'BOM_BYTES_UTF_16LE', "ÿþ".$bytes().$to_a());

    Opal.cdecl($scope, 'BOM_BYTES_UTF_16BE', "þÿ".$bytes().$to_a());

    Opal.cdecl($scope, 'FORCE_UNICODE_LINE_LENGTH', Opal.get('RUBY_MIN_VERSION_1_9')['$!']());

    Opal.cdecl($scope, 'SUPPORTS_GSUB_RESULT_HASH', ($a = Opal.get('RUBY_MIN_VERSION_1_9'), $a !== false && $a !== nil && $a != null ?Opal.get('RUBY_ENGINE_OPAL')['$!']() : $a));

    Opal.cdecl($scope, 'EOL', "\n");

    Opal.cdecl($scope, 'NULL', "\u0000");

    Opal.cdecl($scope, 'TAB', "\t");

    Opal.cdecl($scope, 'DEFAULT_DOCTYPE', "article");

    Opal.cdecl($scope, 'DEFAULT_BACKEND', "html5");

    Opal.cdecl($scope, 'DEFAULT_STYLESHEET_KEYS', ["", "DEFAULT"].$to_set());

    Opal.cdecl($scope, 'DEFAULT_STYLESHEET_NAME', "asciidoctor.css");

    Opal.cdecl($scope, 'BACKEND_ALIASES', $hash2(["html", "docbook"], {"html": "html5", "docbook": "docbook5"}));

    Opal.cdecl($scope, 'DEFAULT_PAGE_WIDTHS', $hash2(["docbook"], {"docbook": 425}));

    Opal.cdecl($scope, 'DEFAULT_EXTENSIONS', $hash2(["html", "docbook", "pdf", "epub", "asciidoc"], {"html": ".html", "docbook": ".xml", "pdf": ".pdf", "epub": ".epub", "asciidoc": ".adoc"}));

    Opal.cdecl($scope, 'ASCIIDOC_EXTENSIONS', $hash2([".asciidoc", ".adoc", ".ad", ".asc", ".txt"], {".asciidoc": true, ".adoc": true, ".ad": true, ".asc": true, ".txt": true}));

    Opal.cdecl($scope, 'SECTION_LEVELS', $hash2(["=", "-", "~", "^", "+"], {"=": 0, "-": 1, "~": 2, "^": 3, "+": 4}));

    Opal.cdecl($scope, 'ADMONITION_STYLES', ["NOTE", "TIP", "IMPORTANT", "WARNING", "CAUTION"].$to_set());

    Opal.cdecl($scope, 'PARAGRAPH_STYLES', ["comment", "example", "literal", "listing", "normal", "pass", "quote", "sidebar", "source", "verse", "abstract", "partintro"].$to_set());

    Opal.cdecl($scope, 'VERBATIM_STYLES', ["literal", "listing", "source", "verse"].$to_set());

    Opal.cdecl($scope, 'DELIMITED_BLOCKS', $hash2(["--", "----", "....", "====", "****", "____", "\"\"", "++++", "|===", ",===", ":===", "!===", "////", "```"], {"--": ["open", ["comment", "example", "literal", "listing", "pass", "quote", "sidebar", "source", "verse", "admonition", "abstract", "partintro"].$to_set()], "----": ["listing", ["literal", "source"].$to_set()], "....": ["literal", ["listing", "source"].$to_set()], "====": ["example", ["admonition"].$to_set()], "****": ["sidebar", Opal.get('Set').$new()], "____": ["quote", ["verse"].$to_set()], "\"\"": ["quote", ["verse"].$to_set()], "++++": ["pass", ["stem", "latexmath", "asciimath"].$to_set()], "|===": ["table", Opal.get('Set').$new()], ",===": ["table", Opal.get('Set').$new()], ":===": ["table", Opal.get('Set').$new()], "!===": ["table", Opal.get('Set').$new()], "////": ["comment", Opal.get('Set').$new()], "```": ["fenced_code", Opal.get('Set').$new()]}));

    Opal.cdecl($scope, 'DELIMITED_BLOCK_LEADERS', ($a = ($b = $scope.get('DELIMITED_BLOCKS').$keys()).$map, $a.$$p = (TMP_2 = function(key){var self = TMP_2.$$s || this;
if (key == null) key = nil;
    return key['$[]']($range(0, 1, false))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b).$to_set());

    Opal.cdecl($scope, 'LAYOUT_BREAK_LINES', $hash2(["'", "-", "*", "_", "<"], {"'": "thematic_break", "-": "thematic_break", "*": "thematic_break", "_": "thematic_break", "<": "page_break"}));

    Opal.cdecl($scope, 'NESTABLE_LIST_CONTEXTS', ["ulist", "olist", "dlist"]);

    Opal.cdecl($scope, 'ORDERED_LIST_STYLES', ["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"]);

    Opal.cdecl($scope, 'ORDERED_LIST_KEYWORDS', $hash2(["loweralpha", "lowerroman", "upperalpha", "upperroman"], {"loweralpha": "a", "lowerroman": "i", "upperalpha": "A", "upperroman": "I"}));

    Opal.cdecl($scope, 'LIST_CONTINUATION', "+");

    Opal.cdecl($scope, 'LINE_BREAK', " +");

    Opal.cdecl($scope, 'LINE_CONTINUATION', " \\");

    Opal.cdecl($scope, 'LINE_CONTINUATION_LEGACY', " +");

    Opal.cdecl($scope, 'BLOCK_MATH_DELIMITERS', $hash2(["asciimath", "latexmath"], {"asciimath": ["\\$", "\\$"], "latexmath": ["\\[", "\\]"]}));

    Opal.cdecl($scope, 'INLINE_MATH_DELIMITERS', $hash2(["asciimath", "latexmath"], {"asciimath": ["\\$", "\\$"], "latexmath": ["\\(", "\\)"]}));

    Opal.cdecl($scope, 'FLEXIBLE_ATTRIBUTES', ["sectnums"]);

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      Opal.cdecl($scope, 'CC_ALPHA', "a-zA-Z");

      Opal.cdecl($scope, 'CG_ALPHA', "[a-zA-Z]");

      Opal.cdecl($scope, 'CC_ALNUM', "a-zA-Z0-9");

      Opal.cdecl($scope, 'CG_ALNUM', "[a-zA-Z0-9]");

      Opal.cdecl($scope, 'CG_BLANK', "[ \\t]");

      Opal.cdecl($scope, 'CC_EOL', "(?=\\n|$)");

      Opal.cdecl($scope, 'CG_GRAPH', "[\\x21-\\x7E]");

      Opal.cdecl($scope, 'CC_ALL', "[\\s\\S]");

      Opal.cdecl($scope, 'CC_WORD', "a-zA-Z0-9_");

      Opal.cdecl($scope, 'CG_WORD', "[a-zA-Z0-9_]");};

    Opal.cdecl($scope, 'AuthorInfoLineRx', (new RegExp("^(" + $scope.get('CG_WORD') + "[" + $scope.get('CC_WORD') + "\\-'.]*)(?: +(" + $scope.get('CG_WORD') + "[" + $scope.get('CC_WORD') + "\\-'.]*))?(?: +(" + $scope.get('CG_WORD') + "[" + $scope.get('CC_WORD') + "\\-'.]*))?(?: +<([^>]+)>)?$")));

    Opal.cdecl($scope, 'RevisionInfoLineRx', /^(?:\D*(.*?),)?(?:\s*(?!:)(.*?))(?:\s*(?!^):\s*(.*))?$/);

    Opal.cdecl($scope, 'ManpageTitleVolnumRx', /^(.*)\((.*)\)$/);

    Opal.cdecl($scope, 'ManpageNamePurposeRx', (new RegExp("^(.*?)" + $scope.get('CG_BLANK') + "+-" + $scope.get('CG_BLANK') + "+(.*)$")));

    Opal.cdecl($scope, 'ConditionalDirectiveRx', /^\\?(ifdef|ifndef|ifeval|endif)::(\S*?(?:([,\+])\S+?)?)\[(.+)?\]$/);

    Opal.cdecl($scope, 'EvalExpressionRx', (new RegExp("^(\\S.*?)" + $scope.get('CG_BLANK') + "*(==|!=|<=|>=|<|>)" + $scope.get('CG_BLANK') + "*(\\S.*)$")));

    Opal.cdecl($scope, 'IncludeDirectiveRx', /^\\?include::([^\[]+)\[(.*?)\]$/);

    Opal.cdecl($scope, 'TagDirectiveRx', /\b(?:tag|end)::\S+\[\]$/);

    Opal.cdecl($scope, 'AttributeEntryRx', (new RegExp("^:(!?\\w.*?):(?:" + $scope.get('CG_BLANK') + "+(.*))?$")));

    Opal.cdecl($scope, 'InvalidAttributeNameCharsRx', /[^\w\-]/);

    Opal.cdecl($scope, 'AttributeEntryPassMacroRx', /^pass:([a-z,]*)\[(.*)\]$/);

    Opal.cdecl($scope, 'AttributeReferenceRx', /(\\)?\{((set|counter2?):.+?|\w+(?:[\-]\w+)*)(\\)?\}/);

    Opal.cdecl($scope, 'BlockAnchorRx', (new RegExp("^\\[\\[(?:|([" + $scope.get('CC_ALPHA') + ":_][" + $scope.get('CC_WORD') + ":.-]*)(?:," + $scope.get('CG_BLANK') + "*(\\S.*))?)\\]\\]$")));

    Opal.cdecl($scope, 'BlockAttributeListRx', (new RegExp("^\\[(|" + $scope.get('CG_BLANK') + "*[" + $scope.get('CC_WORD') + "\\{,.#\"'%].*)\\]$")));

    Opal.cdecl($scope, 'BlockAttributeLineRx', (new RegExp("^\\[(|" + $scope.get('CG_BLANK') + "*[" + $scope.get('CC_WORD') + "\\{,.#\"'%].*|\\[(?:|[" + $scope.get('CC_ALPHA') + ":_][" + $scope.get('CC_WORD') + ":.-]*(?:," + $scope.get('CG_BLANK') + "*\\S.*)?)\\])\\]$")));

    Opal.cdecl($scope, 'BlockTitleRx', /^\.([^\s.].*)$/);

    Opal.cdecl($scope, 'AdmonitionParagraphRx', (new RegExp("^(" + $rb_times($scope.get('ADMONITION_STYLES').$to_a(), "|") + "):" + $scope.get('CG_BLANK'))));

    Opal.cdecl($scope, 'LiteralParagraphRx', (new RegExp("^(" + $scope.get('CG_BLANK') + "+.*)$")));

    Opal.cdecl($scope, 'CommentBlockRx', /^\/{4,}$/);

    Opal.cdecl($scope, 'CommentLineRx', /^\/\/(?:[^\/]|$)/);

    Opal.cdecl($scope, 'AtxSectionRx', (new RegExp("^((?:=|#){1,6})" + $scope.get('CG_BLANK') + "+(\\S.*?)(?:" + $scope.get('CG_BLANK') + "+\\1)?$")));

    Opal.cdecl($scope, 'SetextSectionTitleRx', (new RegExp("^((?=.*" + $scope.get('CG_WORD') + "+.*)[^.].*?)$")));

    Opal.cdecl($scope, 'SetextSectionLineRx', /^(?:=|-|~|\^|\+)+$/);

    Opal.cdecl($scope, 'InlineSectionAnchorRx', (new RegExp("^(.*?)" + $scope.get('CG_BLANK') + "+(\\\\)?\\[\\[([" + $scope.get('CC_ALPHA') + ":_][" + $scope.get('CC_WORD') + ":.-]*)(?:," + $scope.get('CG_BLANK') + "*(\\S.*?))?\\]\\]$")));

    Opal.cdecl($scope, 'InvalidSectionIdCharsRx', (new RegExp("&(?:[a-zA-Z]{2,}|#\\d{2,6}|#x[a-fA-F0-9]{2,5});|[^" + $scope.get('CC_WORD') + "]+?")));

    Opal.cdecl($scope, 'FloatingTitleStyleRx', /^(?:float|discrete)\b/);

    Opal.cdecl($scope, 'AnyListRx', (new RegExp("^(?:" + $scope.get('CG_BLANK') + "*(?:-|([*.\\u2022])\\1{0,4}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))" + $scope.get('CG_BLANK') + "|" + $scope.get('CG_BLANK') + "*.*?(?::{2,4}|;;)(?:$|" + $scope.get('CG_BLANK') + ")|<?\\d+>" + $scope.get('CG_BLANK') + ")")));

    Opal.cdecl($scope, 'UnorderedListRx', (new RegExp("^" + $scope.get('CG_BLANK') + "*(-|\\*{1,5}|\\u2022{1,5})" + $scope.get('CG_BLANK') + "+(.*)$")));

    Opal.cdecl($scope, 'OrderedListRx', (new RegExp("^" + $scope.get('CG_BLANK') + "*(\\.{1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))" + $scope.get('CG_BLANK') + "+(.*)$")));

    Opal.cdecl($scope, 'OrderedListMarkerRxMap', $hash2(["arabic", "loweralpha", "lowerroman", "upperalpha", "upperroman"], {"arabic": /\d+[.>]/, "loweralpha": /[a-z]\./, "lowerroman": /[ivx]+\)/, "upperalpha": /[A-Z]\./, "upperroman": /[IVX]+\)/}));

    Opal.cdecl($scope, 'DescriptionListRx', (new RegExp("^(?!\\/\\/)" + $scope.get('CG_BLANK') + "*(.*?)(:{2,4}|;;)(?:" + $scope.get('CG_BLANK') + "+(.*))?$")));

    Opal.cdecl($scope, 'DescriptionListSiblingRx', $hash2(["::", ":::", "::::", ";;"], {"::": (new RegExp("^(?!\\/\\/)" + $scope.get('CG_BLANK') + "*((?:.*[^:])?)(::)(?:" + $scope.get('CG_BLANK') + "+(.*))?$")), ":::": (new RegExp("^(?!\\/\\/)" + $scope.get('CG_BLANK') + "*((?:.*[^:])?)(:::)(?:" + $scope.get('CG_BLANK') + "+(.*))?$")), "::::": (new RegExp("^(?!\\/\\/)" + $scope.get('CG_BLANK') + "*((?:.*[^:])?)(::::)(?:" + $scope.get('CG_BLANK') + "+(.*))?$")), ";;": (new RegExp("^(?!\\/\\/)" + $scope.get('CG_BLANK') + "*(.*)(;;)(?:" + $scope.get('CG_BLANK') + "+(.*))?$"))}));

    Opal.cdecl($scope, 'CalloutListRx', (new RegExp("^<?(\\d+)>" + $scope.get('CG_BLANK') + "+(.*)$")));

    Opal.cdecl($scope, 'CalloutExtractRx', /(?:(?:\/\/|#|--|;;) ?)?(\\)?<!?(--|)(\d+)\2>(?=(?: ?\\?<!?\2\d+\2>)*$)/);

    Opal.cdecl($scope, 'CalloutExtractRxt', "(\\\\)?<()(\\d+)>(?=(?: ?\\\\?<\\d+>)*$)");

    Opal.cdecl($scope, 'CalloutQuickScanRx', (new RegExp("\\\\?<!?(--|)(\\d+)\\1>(?=(?: ?\\\\?<!?\\1\\d+\\1>)*" + $scope.get('CC_EOL') + ")")));

    Opal.cdecl($scope, 'CalloutSourceRx', (new RegExp("(?:(?:\\/\\/|#|--|;;) ?)?(\\\\)?&lt;!?(--|)(\\d+)\\2&gt;(?=(?: ?\\\\?&lt;!?\\2\\d+\\2&gt;)*" + $scope.get('CC_EOL') + ")")));

    Opal.cdecl($scope, 'CalloutSourceRxt', "(\\\\)?&lt;()(\\d+)&gt;(?=(?: ?\\\\?&lt;\\d+&gt;)*" + ($scope.get('CC_EOL')) + ")");

    Opal.cdecl($scope, 'ListRxMap', $hash2(["ulist", "olist", "dlist", "colist"], {"ulist": $scope.get('UnorderedListRx'), "olist": $scope.get('OrderedListRx'), "dlist": $scope.get('DescriptionListRx'), "colist": $scope.get('CalloutListRx')}));

    Opal.cdecl($scope, 'ColumnSpecRx', /^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?)?([a-z])?$/);

    Opal.cdecl($scope, 'CellSpecStartRx', (new RegExp("^" + $scope.get('CG_BLANK') + "*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$")));

    Opal.cdecl($scope, 'CellSpecEndRx', (new RegExp("" + $scope.get('CG_BLANK') + "+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$")));

    Opal.cdecl($scope, 'GenericBlockMacroRx', (new RegExp("^(" + $scope.get('CG_WORD') + "+)::(\\S*?)\\[((?:\\\\\\]|[^\\]])*?)\\]$")));

    Opal.cdecl($scope, 'MediaBlockMacroRx', /^(image|video|audio)::(\S+?)\[((?:\\\]|[^\]])*?)\]$/);

    Opal.cdecl($scope, 'TocBlockMacroRx', /^toc::\[(.*?)\]$/);

    Opal.cdecl($scope, 'InlineAnchorRx', (new RegExp("\\\\?(?:\\[\\[([" + $scope.get('CC_ALPHA') + ":_][" + $scope.get('CC_WORD') + ":.-]*)(?:," + $scope.get('CG_BLANK') + "*(\\S.*?))?\\]\\]|anchor:(\\S+)\\[(.*?[^\\\\])?\\])")));

    Opal.cdecl($scope, 'InlineBiblioAnchorRx', (new RegExp("\\\\?\\[\\[\\[([" + $scope.get('CC_WORD') + ":][" + $scope.get('CC_WORD') + ":.-]*?)\\]\\]\\]")));

    Opal.cdecl($scope, 'EmailInlineMacroRx', (new RegExp("([\\\\>:\\/])?" + $scope.get('CG_WORD') + "[" + $scope.get('CC_WORD') + ".%+-]*@" + $scope.get('CG_ALNUM') + "[" + $scope.get('CC_ALNUM') + ".-]*\\." + $scope.get('CG_ALPHA') + "{2,4}\\b")));

    Opal.cdecl($scope, 'FootnoteInlineMacroRx', (new RegExp("\\\\?(footnote(?:ref)?):\\[(" + $scope.get('CC_ALL') + "*?[^\\\\])\\]")));

    Opal.cdecl($scope, 'ImageInlineMacroRx', /\\?(?:image|icon):([^:\[][^\[]*)\[((?:\\\]|[^\]])*?)\]/);

    Opal.cdecl($scope, 'IndextermInlineMacroRx', (new RegExp("\\\\?(?:(indexterm2?):\\[(" + $scope.get('CC_ALL') + "*?[^\\\\])\\]|\\(\\((" + $scope.get('CC_ALL') + "+?)\\)\\)(?!\\)))")));

    Opal.cdecl($scope, 'KbdBtnInlineMacroRx', /\\?(?:kbd|btn):\[((?:\\\]|[^\]])+?)\]/);

    Opal.cdecl($scope, 'KbdDelimiterRx', (new RegExp("(?:\\+|,)(?=" + $scope.get('CG_BLANK') + "*[^\\1])")));

    Opal.cdecl($scope, 'LinkInlineRx', /(^|link:|&lt;|[\s>\(\)\[\];])(\\?(?:https?|file|ftp|irc):\/\/[^\s\[\]<]*[^\s.,\[\]<])(?:\[((?:\\\]|[^\]])*?)\])?/);

    Opal.cdecl($scope, 'LinkInlineMacroRx', /\\?(?:link|mailto):([^\s\[]+)(?:\[((?:\\\]|[^\]])*?)\])/);

    Opal.cdecl($scope, 'StemInlineMacroRx', (new RegExp("\\\\?(stem|(?:latex|ascii)math):([a-z,]*)\\[(" + $scope.get('CC_ALL') + "*?[^\\\\])\\]")));

    Opal.cdecl($scope, 'MenuInlineMacroRx', (new RegExp("\\\\?menu:(" + $scope.get('CG_WORD') + "|" + $scope.get('CG_WORD') + ".*?\\S)\\[" + $scope.get('CG_BLANK') + "*(.+?)?\\]")));

    Opal.cdecl($scope, 'MenuInlineRx', (new RegExp("\\\\?\"(" + $scope.get('CG_WORD') + "[^\"]*?" + $scope.get('CG_BLANK') + "*&gt;" + $scope.get('CG_BLANK') + "*[^\" \\t][^\"]*)\"")));

    Opal.cdecl($scope, 'PassInlineRx', $hash(false, ["+", "`", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:])(?:\\[([^\\]]+?)\\])?(\\\\?(\\+|`)(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)\\4)(?!" + $scope.get('CG_WORD') + ")"))], true, ["`", nil, (new RegExp("(^|[^`" + $scope.get('CC_WORD') + "])(?:\\[([^\\]]+?)\\])?(\\\\?(`)([^`\\s]|[^`\\s]" + $scope.get('CC_ALL') + "*?\\S)\\4)(?![`" + $scope.get('CC_WORD') + "])"))]));

    Opal.cdecl($scope, 'PassInlineMacroRx', (new RegExp("(?:(?:(\\\\?)\\[([^\\]]+?)\\])?(\\\\{0,2})(\\+{2,3}|\\${2})(" + $scope.get('CC_ALL') + "*?)\\4|(\\\\?)pass:([a-z,]*)\\[(" + $scope.get('CC_ALL') + "*?[^\\\\])\\])")));

    Opal.cdecl($scope, 'XrefInlineMacroRx', (new RegExp("\\\\?(?:&lt;&lt;([" + $scope.get('CC_WORD') + "\":.\\/]" + $scope.get('CC_ALL') + "*?)&gt;&gt;|xref:([" + $scope.get('CC_WORD') + "\":.\\/]" + $scope.get('CC_ALL') + "*?)\\[(" + $scope.get('CC_ALL') + "*?)\\])")));

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      Opal.cdecl($scope, 'LineBreakRx', /^(.*)[ \t]\+$/m)};

    Opal.cdecl($scope, 'LayoutBreakLineRx', /^('|<){3,}$/);

    Opal.cdecl($scope, 'LayoutBreakLinePlusRx', /^(?:'|<){3,}$|^ {0,3}([-\*_])( *)\1\2\1$/);

    Opal.cdecl($scope, 'BlankLineRx', (new RegExp("^" + $scope.get('CG_BLANK') + "*\\n")));

    Opal.cdecl($scope, 'DataDelimiterRx', /,|;/);

    Opal.cdecl($scope, 'DoubleQuotedRx', /^("|)(.*)\1$/);

    Opal.cdecl($scope, 'DoubleQuotedMultiRx', (new RegExp("^(\"|)(" + $scope.get('CC_ALL') + "*)\\1$")));

    Opal.cdecl($scope, 'TrailingDigitsRx', /\d+$/);

    Opal.cdecl($scope, 'EscapedSpaceRx', (new RegExp("\\\\(" + $scope.get('CG_BLANK') + ")")));

    Opal.cdecl($scope, 'SpaceDelimiterRx', (new RegExp("([^\\\\])" + $scope.get('CG_BLANK') + "+")));

    Opal.cdecl($scope, 'SubModifierSniffRx', /[+-]/);

    Opal.cdecl($scope, 'UnicodeCharScanRx', (function() {if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      return nil}; return nil; })());

    Opal.cdecl($scope, 'UriSniffRx', (new RegExp("^" + $scope.get('CG_ALPHA') + "[" + $scope.get('CC_ALNUM') + ".+-]+:/{0,2}")));

    Opal.cdecl($scope, 'UriTerminator', /[);:]$/);

    Opal.cdecl($scope, 'XmlSanitizeRx', /<[^>]+>/);

    Opal.cdecl($scope, 'INTRINSIC_ATTRIBUTES', $hash2(["startsb", "endsb", "vbar", "caret", "asterisk", "tilde", "plus", "backslash", "backtick", "blank", "empty", "sp", "two-colons", "two-semicolons", "nbsp", "deg", "zwsp", "quot", "apos", "lsquo", "rsquo", "ldquo", "rdquo", "wj", "brvbar", "cpp", "amp", "lt", "gt"], {"startsb": "[", "endsb": "]", "vbar": "|", "caret": "^", "asterisk": "*", "tilde": "~", "plus": "&#43;", "backslash": "\\", "backtick": "`", "blank": "", "empty": "", "sp": " ", "two-colons": "::", "two-semicolons": ";;", "nbsp": "&#160;", "deg": "&#176;", "zwsp": "&#8203;", "quot": "&#34;", "apos": "&#39;", "lsquo": "&#8216;", "rsquo": "&#8217;", "ldquo": "&#8220;", "rdquo": "&#8221;", "wj": "&#8288;", "brvbar": "&#166;", "cpp": "C++", "amp": "&", "lt": "<", "gt": ">"}));

    quote_subs = [["strong", "unconstrained", (new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?\\*\\*(" + $scope.get('CC_ALL') + "+?)\\*\\*"))], ["strong", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?\\*(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)\\*(?!" + $scope.get('CG_WORD') + ")"))], ["double", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?\"`(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)`\"(?!" + $scope.get('CG_WORD') + ")"))], ["single", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:`}])(?:\\[([^\\]]+?)\\])?'`(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)`'(?!" + $scope.get('CG_WORD') + ")"))], ["monospaced", "unconstrained", (new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?``(" + $scope.get('CC_ALL') + "+?)``"))], ["monospaced", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:\"'`}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)`(?![" + $scope.get('CC_WORD') + "\"'`])"))], ["emphasis", "unconstrained", (new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?__(" + $scope.get('CC_ALL') + "+?)__"))], ["emphasis", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?_(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)_(?!" + $scope.get('CG_WORD') + ")"))], ["mark", "unconstrained", (new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?##(" + $scope.get('CC_ALL') + "+?)##"))], ["mark", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + "&;:}])(?:\\[([^\\]]+?)\\])?#(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)#(?!" + $scope.get('CG_WORD') + ")"))], ["superscript", "unconstrained", /\\?(?:\[([^\]]+?)\])?\^(\S+?)\^/], ["subscript", "unconstrained", /\\?(?:\[([^\]]+?)\])?~(\S+?)~/]];

    compat_quote_subs = quote_subs.$dup();

    compat_quote_subs['$[]='](2, ["double", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?``(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)''(?!" + $scope.get('CG_WORD') + ")"))]);

    compat_quote_subs['$[]='](3, ["single", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)'(?!" + $scope.get('CG_WORD') + ")"))]);

    compat_quote_subs['$[]='](4, ["monospaced", "unconstrained", (new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?\\+\\+(" + $scope.get('CC_ALL') + "+?)\\+\\+"))]);

    compat_quote_subs['$[]='](5, ["monospaced", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?\\+(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)\\+(?!" + $scope.get('CG_WORD') + ")"))]);

    compat_quote_subs.$insert(3, ["emphasis", "constrained", (new RegExp("(^|[^" + $scope.get('CC_WORD') + ";:}])(?:\\[([^\\]]+?)\\])?'(\\S|\\S" + $scope.get('CC_ALL') + "*?\\S)'(?!" + $scope.get('CG_WORD') + ")"))]);

    Opal.cdecl($scope, 'QUOTE_SUBS', $hash(false, quote_subs, true, compat_quote_subs));

    quote_subs = nil;

    compat_quote_subs = nil;

    Opal.cdecl($scope, 'REPLACEMENTS', [[/\\?\(C\)/, "&#169;", "none"], [/\\?\(R\)/, "&#174;", "none"], [/\\?\(TM\)/, "&#8482;", "none"], [/(^|\n| |\\)--( |\n|$)/, "&#8201;&#8212;&#8201;", "none"], [(new RegExp("(" + $scope.get('CG_WORD') + ")\\\\?--(?=" + $scope.get('CG_WORD') + ")")), "&#8212;&#8203;", "leading"], [/\\?\.\.\./, "&#8230;&#8203;", "leading"], [/\\?`'/, "&#8217;", "none"], [(new RegExp("(" + $scope.get('CG_ALNUM') + ")\\\\?'(?=" + $scope.get('CG_ALPHA') + ")")), "&#8217;", "leading"], [/\\?-&gt;/, "&#8594;", "none"], [/\\?=&gt;/, "&#8658;", "none"], [/\\?&lt;-/, "&#8592;", "none"], [/\\?&lt;=/, "&#8656;", "none"], [/\\?(&)amp;((?:[a-zA-Z]{2,}|#\d{2,6}|#x[a-fA-F0-9]{2,5});)/, "", "bounding"]]);

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_6, TMP_7, TMP_9, TMP_10;

      Opal.defn(self, '$load', TMP_6 = function ːload(input, options) {
        var $a, $b, $c, TMP_3, TMP_4, $d, TMP_5, $e, $f, self = this, timings = nil, attributes = nil, attrs = nil, capture_1 = nil, original_attrs = nil, lines = nil, input_path = nil, input_mtime = nil, docdate = nil, doctime = nil, doc = nil, ex = nil, context = nil, wrapped_ex = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        try {
          options = options.$dup();
          if ((($a = (timings = options['$[]']("timings"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            timings.$start("read")};
          attributes = options['$[]=']("attributes", (function() {if ((($a = ((attrs = options['$[]']("attributes")))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $hash2([], {})
          } else if ((($a = ((($b = Opal.get('Hash')['$==='](attrs)) !== false && $b !== nil && $b != null) ? $b : (($c = Opal.get('RUBY_ENGINE_JRUBY'), $c !== false && $c !== nil && $c != null ?((((Opal.get('Java')).$$scope.get('JavaUtil'))).$$scope.get('Map'))['$==='](attrs) : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return attrs.$dup()
          } else if ((($a = Opal.get('Array')['$==='](attrs)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = attrs).$inject, $a.$$p = (TMP_3 = function(accum, entry){var self = TMP_3.$$s || this, $d, $e, k = nil, v = nil;
if (accum == null) accum = nil;if (entry == null) entry = nil;
            $e = entry.$split("=", 2), $d = Opal.to_ary($e), k = ($d[0] == null ? nil : $d[0]), v = ($d[1] == null ? nil : $d[1]), $e;
              accum['$[]='](k, ((($d = v) !== false && $d !== nil && $d != null) ? $d : ""));
              return accum;}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $a).call($b, $hash2([], {}))
          } else if ((($a = Opal.get('String')['$==='](attrs)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            capture_1 = "\\1";
            attrs = attrs.$gsub($scope.get('SpaceDelimiterRx'), "" + (capture_1) + ($scope.get('NULL'))).$gsub($scope.get('EscapedSpaceRx'), capture_1);
            return ($a = ($c = attrs.$split($scope.get('NULL'))).$inject, $a.$$p = (TMP_4 = function(accum, entry){var self = TMP_4.$$s || this, $d, $e, k = nil, v = nil;
if (accum == null) accum = nil;if (entry == null) entry = nil;
            $e = entry.$split("=", 2), $d = Opal.to_ary($e), k = ($d[0] == null ? nil : $d[0]), v = ($d[1] == null ? nil : $d[1]), $e;
              accum['$[]='](k, ((($d = v) !== false && $d !== nil && $d != null) ? $d : ""));
              return accum;}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($c, $hash2([], {}));
          } else if ((($a = ($d = (attrs['$respond_to?']("keys")), $d !== false && $d !== nil && $d != null ?(attrs['$respond_to?']("[]")) : $d)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            original_attrs = attrs;
            attrs = $hash2([], {});
            ($a = ($d = original_attrs.$keys()).$each, $a.$$p = (TMP_5 = function(key){var self = TMP_5.$$s || this;
if (key == null) key = nil;
            return attrs['$[]='](key, original_attrs['$[]'](key))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d);
            return attrs;
            } else {
            return self.$raise(Opal.get('ArgumentError'), "illegal type for attributes option: " + (attrs.$class().$ancestors()))
          }; return nil; })());
          lines = nil;
          if ((($a = Opal.get('File')['$==='](input)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            input_path = Opal.get('File').$expand_path(input.$path());
            input_mtime = (function() {if ((($a = Opal.get('ENV')['$[]']("SOURCE_DATE_EPOCH")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return (Opal.get('Time').$at(Opal.get('ENV')['$[]']("SOURCE_DATE_EPOCH").$to_i())).$utc()
              } else {
              return input.$mtime()
            }; return nil; })();
            lines = input.$readlines();
            attributes['$[]=']("docfile", input_path);
            attributes['$[]=']("docdir", Opal.get('File').$dirname(input_path));
            attributes['$[]=']("docname", $scope.get('Helpers').$basename(input_path, true));
            docdate = (($a = "docdate", $e = attributes, ((($f = $e['$[]']($a)) !== false && $f !== nil && $f != null) ? $f : $e['$[]=']($a, input_mtime.$strftime("%Y-%m-%d")))));
            doctime = (($a = "doctime", $e = attributes, ((($f = $e['$[]']($a)) !== false && $f !== nil && $f != null) ? $f : $e['$[]=']($a, input_mtime.$strftime("%H:%M:%S %Z")))));
            attributes['$[]=']("docdatetime", "" + (docdate) + " " + (doctime));
          } else if ((($a = input['$respond_to?']("readlines")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            try {
              input.$rewind()
            } catch ($err) {
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
                try {
                  nil
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };
            lines = input.$readlines();
          } else if ((($a = Opal.get('String')['$==='](input)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            lines = input.$lines().$entries()
          } else if ((($a = Opal.get('Array')['$==='](input)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            lines = input.$dup()
            } else {
            self.$raise(Opal.get('ArgumentError'), "unsupported input type: " + (input.$class()))
          };
          if (timings !== false && timings !== nil && timings != null) {
            timings.$record("read");
            timings.$start("parse");};
          if (options['$[]']("parse")['$=='](false)) {
            doc = $scope.get('Document').$new(lines, options)
            } else {
            doc = ($scope.get('Document').$new(lines, options)).$parse()
          };
          if (timings !== false && timings !== nil && timings != null) {
            timings.$record("parse")};
          return doc;
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {ex = $err;
            try {
              try {
                context = "asciidoctor: FAILED: " + (((($a = attributes['$[]']("docfile")) !== false && $a !== nil && $a != null) ? $a : "<stdin>")) + ": Failed to load AsciiDoc document";
                if ((($a = ex['$respond_to?']("exception")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  wrapped_ex = ex.$exception("" + (context) + " - " + (ex.$message()));
                  wrapped_ex.$set_backtrace(ex.$backtrace());
                  } else {
                  wrapped_ex = ex.$class().$new(context, ex);
                  (($a = [ex.$stack_trace()]), $e = wrapped_ex, $e['$stack_trace='].apply($e, $a), $a[$a.length-1]);
                };
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                  try {
                    wrapped_ex = ex
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              return self.$raise(wrapped_ex);
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_6.$$arity = -2);
      Opal.defn(self, '$load_file', TMP_7 = function ːload_file(filename, options) {
        var $a, self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return self.$load(Opal.get('File').$new(((($a = filename) !== false && $a !== nil && $a != null) ? $a : "")), options);
      }, TMP_7.$$arity = -2);
      Opal.defn(self, '$convert', TMP_9 = function ːconvert(input, options) {
        var $a, $b, $c, $d, $e, $f, TMP_8, self = this, to_file = nil, to_dir = nil, mkdirs = nil, timings = nil, $case = nil, write_to_same_dir = nil, stream_output = nil, write_to_target = nil, input_path = nil, outdir = nil, doc = nil, outfile = nil, working_dir = nil, jail = nil, opts = nil, output = nil, stylesdir = nil, copy_asciidoctor_stylesheet = nil, copy_user_stylesheet = nil, stylesheet = nil, copy_coderay_stylesheet = nil, copy_pygments_stylesheet = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dst = nil, stylesheet_content = nil;

        if (options == null) {
          options = $hash2([], {});
        }
        options = options.$dup();
        options.$delete("parse");
        to_file = options.$delete("to_file");
        to_dir = options.$delete("to_dir");
        mkdirs = ((($a = options.$delete("mkdirs")) !== false && $a !== nil && $a != null) ? $a : false);
        timings = options['$[]']("timings");
        $case = to_file;if (true['$===']($case) || nil['$===']($case)) {write_to_same_dir = ($a = to_dir['$!'](), $a !== false && $a !== nil && $a != null ?Opal.get('File')['$==='](input) : $a);
        stream_output = false;
        write_to_target = to_dir;
        to_file = nil;}else if (false['$===']($case)) {write_to_same_dir = false;
        stream_output = false;
        write_to_target = false;
        to_file = nil;}else if ("/dev/null"['$===']($case)) {return self.$load(input, options)}else {write_to_same_dir = false;
        stream_output = to_file['$respond_to?']("write");
        write_to_target = (function() {if (stream_output !== false && stream_output !== nil && stream_output != null) {
          return false
          } else {
          return to_file
        }; return nil; })();};
        if ((($a = options['$key?']("header_footer")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else if ((($a = ((($b = write_to_same_dir) !== false && $b !== nil && $b != null) ? $b : write_to_target)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          options['$[]=']("header_footer", true)};
        if (write_to_same_dir !== false && write_to_same_dir !== nil && write_to_same_dir != null) {
          input_path = Opal.get('File').$expand_path(input.$path());
          options['$[]=']("to_dir", (outdir = Opal.get('File').$dirname(input_path)));
        } else if (write_to_target !== false && write_to_target !== nil && write_to_target != null) {
          if (to_dir !== false && to_dir !== nil && to_dir != null) {
            if (to_file !== false && to_file !== nil && to_file != null) {
              options['$[]=']("to_dir", Opal.get('File').$dirname(Opal.get('File').$expand_path(Opal.get('File').$join(to_dir, to_file))))
              } else {
              options['$[]=']("to_dir", Opal.get('File').$expand_path(to_dir))
            }
          } else if (to_file !== false && to_file !== nil && to_file != null) {
            options['$[]=']("to_dir", Opal.get('File').$dirname(Opal.get('File').$expand_path(to_file)))}
          } else {
          options['$[]=']("to_dir", nil)
        };
        doc = self.$load(input, options);
        if (write_to_same_dir !== false && write_to_same_dir !== nil && write_to_same_dir != null) {
          outfile = Opal.get('File').$join(outdir, "" + (doc.$attributes()['$[]']("docname")) + (doc.$outfilesuffix()));
          if (outfile['$=='](input_path)) {
            self.$raise(Opal.get('IOError'), "input file and output file cannot be the same: " + (outfile))};
        } else if (write_to_target !== false && write_to_target !== nil && write_to_target != null) {
          working_dir = (function() {if ((($a = options['$has_key?']("base_dir")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return Opal.get('File').$expand_path(options['$[]']("base_dir"))
            } else {
            return Opal.get('File').$expand_path(Opal.get('Dir').$pwd())
          }; return nil; })();
          jail = (function() {if ((($a = $rb_ge(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SAFE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return working_dir
            } else {
            return nil
          }; return nil; })();
          if (to_dir !== false && to_dir !== nil && to_dir != null) {
            outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            if (to_file !== false && to_file !== nil && to_file != null) {
              outfile = doc.$normalize_system_path(to_file, outdir, nil, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
              outdir = Opal.get('File').$dirname(outfile);
              } else {
              outfile = Opal.get('File').$join(outdir, "" + (doc.$attributes()['$[]']("docname")) + (doc.$outfilesuffix()))
            };
          } else if (to_file !== false && to_file !== nil && to_file != null) {
            outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash2(["target_name", "recover"], {"target_name": "to_dir", "recover": false}));
            outdir = Opal.get('File').$dirname(outfile);};
          if ((($a = Opal.get('File')['$directory?'](outdir)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else if (mkdirs !== false && mkdirs !== nil && mkdirs != null) {
            $scope.get('Helpers').$mkdir_p(outdir)
            } else {
            self.$raise(Opal.get('IOError'), "target directory does not exist: " + (to_dir))
          };
          } else {
          outfile = to_file;
          outdir = nil;
        };
        if (timings !== false && timings !== nil && timings != null) {
          timings.$start("convert")};
        opts = (function() {if ((($a = (($b = outfile !== false && outfile !== nil && outfile != null) ? stream_output['$!']() : outfile)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $hash2(["outfile", "outdir"], {"outfile": outfile, "outdir": outdir})
          } else {
          return $hash2([], {})
        }; return nil; })();
        output = doc.$convert(opts);
        if (timings !== false && timings !== nil && timings != null) {
          timings.$record("convert")};
        if (outfile !== false && outfile !== nil && outfile != null) {
          if (timings !== false && timings !== nil && timings != null) {
            timings.$start("write")};
          doc.$write(output, outfile);
          if (timings !== false && timings !== nil && timings != null) {
            timings.$record("write")};
          if ((($a = ($b = ($c = ($d = ($e = ($f = stream_output['$!'](), $f !== false && $f !== nil && $f != null ?$rb_lt(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SECURE'))) : $f), $e !== false && $e !== nil && $e != null ?(doc['$attr?']("linkcss")) : $e), $d !== false && $d !== nil && $d != null ?(doc['$attr?']("copycss")) : $d), $c !== false && $c !== nil && $c != null ?(doc['$attr?']("basebackend-html")) : $c), $b !== false && $b !== nil && $b != null ?(($c = (stylesdir = (doc.$attr("stylesdir"))), $c !== false && $c !== nil && $c != null ?($scope.get('Helpers')['$uriish?'](stylesdir)) : $c))['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            copy_asciidoctor_stylesheet = false;
            copy_user_stylesheet = false;
            if ((($a = (stylesheet = (doc.$attr("stylesheet")))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = $scope.get('DEFAULT_STYLESHEET_KEYS')['$include?'](stylesheet)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                copy_asciidoctor_stylesheet = true
              } else if ((($a = ($scope.get('Helpers')['$uriish?'](stylesheet))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                copy_user_stylesheet = true}};
            copy_coderay_stylesheet = ($a = (doc['$attr?']("source-highlighter", "coderay")), $a !== false && $a !== nil && $a != null ?(doc.$attr("coderay-css", "class"))['$==']("class") : $a);
            copy_pygments_stylesheet = ($a = (doc['$attr?']("source-highlighter", "pygments")), $a !== false && $a !== nil && $a != null ?(doc.$attr("pygments-css", "class"))['$==']("class") : $a);
            if ((($a = ((($b = ((($c = ((($d = copy_asciidoctor_stylesheet) !== false && $d !== nil && $d != null) ? $d : copy_user_stylesheet)) !== false && $c !== nil && $c != null) ? $c : copy_coderay_stylesheet)) !== false && $b !== nil && $b != null) ? $b : copy_pygments_stylesheet)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, (function() {if ((($a = $rb_ge(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SAFE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return outdir
                } else {
                return nil
              }; return nil; })());
              if (mkdirs !== false && mkdirs !== nil && mkdirs != null) {
                $scope.get('Helpers').$mkdir_p(stylesoutdir)};
              if (copy_asciidoctor_stylesheet !== false && copy_asciidoctor_stylesheet !== nil && copy_asciidoctor_stylesheet != null) {
                $scope.get('Stylesheets').$instance().$write_primary_stylesheet(stylesoutdir)
              } else if (copy_user_stylesheet !== false && copy_user_stylesheet !== nil && copy_user_stylesheet != null) {
                if ((($a = ((stylesheet_src = (doc.$attr("copycss"))))['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  stylesheet_src = doc.$normalize_system_path(stylesheet)
                  } else {
                  stylesheet_src = doc.$normalize_system_path(stylesheet_src)
                };
                stylesheet_dst = doc.$normalize_system_path(stylesheet, stylesoutdir, ((function() {if ((($a = $rb_ge(doc.$safe(), (($scope.get('SafeMode')).$$scope.get('SAFE')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  return outdir
                  } else {
                  return nil
                }; return nil; })()));
                if ((($a = ((($b = stylesheet_src['$=='](stylesheet_dst)) !== false && $b !== nil && $b != null) ? $b : ((stylesheet_content = doc.$read_asset(stylesheet_src)))['$nil?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                  } else {
                  ($a = ($b = Opal.get('File')).$open, $a.$$p = (TMP_8 = function(f){var self = TMP_8.$$s || this;
if (f == null) f = nil;
                  return f.$write(stylesheet_content)}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b, stylesheet_dst, "w")
                };};
              if (copy_coderay_stylesheet !== false && copy_coderay_stylesheet !== nil && copy_coderay_stylesheet != null) {
                $scope.get('Stylesheets').$instance().$write_coderay_stylesheet(stylesoutdir)
              } else if (copy_pygments_stylesheet !== false && copy_pygments_stylesheet !== nil && copy_pygments_stylesheet != null) {
                $scope.get('Stylesheets').$instance().$write_pygments_stylesheet(stylesoutdir, (doc.$attr("pygments-style")))};};};
          return doc;
          } else {
          return output
        };
      }, TMP_9.$$arity = -2);
      Opal.alias(self, 'render', 'convert');
      Opal.defn(self, '$convert_file', TMP_10 = function ːconvert_file(filename, options) {
        var $a, self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        return self.$convert(Opal.get('File').$new(((($a = filename) !== false && $a !== nil && $a != null) ? $a : "")), options);
      }, TMP_10.$$arity = -2);
      return Opal.alias(self, 'render_file', 'convert_file');
    })(Opal.get_singleton_class(self));

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
      self.$require("asciidoctor/version");

      self.$require("asciidoctor/timings");};
  })($scope.base);
  self.$require("asciidoctor/core_ext");
  self.$require("asciidoctor/helpers");
  self.$require("asciidoctor/substitutors");
  self.$require("asciidoctor/abstract_node");
  self.$require("asciidoctor/abstract_block");
  self.$require("asciidoctor/attribute_list");
  self.$require("asciidoctor/block");
  self.$require("asciidoctor/callouts");
  self.$require("asciidoctor/converter");
  if ((($a = $scope.get('RUBY_ENGINE_OPAL')) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    self.$require("asciidoctor/converter/html5")};
  self.$require("asciidoctor/document");
  self.$require("asciidoctor/inline");
  self.$require("asciidoctor/list");
  self.$require("asciidoctor/parser");
  self.$require("asciidoctor/path_resolver");
  self.$require("asciidoctor/reader");
  self.$require("asciidoctor/section");
  self.$require("asciidoctor/stylesheets");
  return self.$require("asciidoctor/table");
})(Opal);


var toHash = function (object) {
  if (object && !object.smap) {
    return Opal.hash(object);
  }
  return object;
};

// Asciidoctor API

Opal.Asciidoctor['$$class'].$$proto.convert = function (input, options) {
  var result = this.$convert(input, toHash(options));
  if (result === Opal.nil) {
    return '';
  }
  return result;
};

Opal.Asciidoctor['$$class'].$$proto.convertFile = function (filename, options) {
  return this.$convert_file(filename, toHash(options));
};

Opal.Asciidoctor['$$class'].$$proto.load = function (input, options) {
  return this.$load(input, toHash(options));
};

Opal.Asciidoctor['$$class'].$$proto.loadFile = function (filename, options) {
  return this.$load_file(filename, toHash(options));
};

// AbstractBlock API

Opal.Asciidoctor.AbstractBlock.$$proto.getTitle = function () {
  return this.title;
};

Opal.Asciidoctor.AbstractBlock.$$proto.getStyle = function () {
  return this.style;
};

Opal.Asciidoctor.AbstractBlock.$$proto.getCaption = function () {
  return this.caption;
};

Opal.Asciidoctor.AbstractBlock.$$proto.getLevel = function () {
  return this.level;
};

Opal.Asciidoctor.AbstractBlock.$$proto.getBlocks = function () {
  return this.blocks;
};

Opal.Asciidoctor.AbstractBlock.$$proto.getContent = function () {
  return this.$content();
};

Opal.Asciidoctor.AbstractBlock.$$proto.convert = function () {
  return this.$convert();
};

Opal.Asciidoctor.AbstractBlock.$$proto.delegate = function () {
  return this.$delegate();
};

Opal.Asciidoctor.AbstractBlock.$$proto.findBy = function (selector) {
  return this.$find_by(selector);
};

Opal.Asciidoctor.AbstractBlock.$$proto.convert = function () {
  return this.$convert();
};

// AbstractNode API

Opal.Asciidoctor.AbstractNode.$$proto.getAttributes = function () {
  return this.attributes;
};

Opal.Asciidoctor.AbstractNode.$$proto.getAttribute = function (name, defaultValue, inherit) {
  var value = this.$attr(name, defaultValue, inherit);
  if (value === Opal.nil) {
    return undefined;
  }
  return value;
};

Opal.Asciidoctor.AbstractNode.$$proto.isAttribute = function (name, expectedValue, inherit) {
  var value = this['$attr?'](name, expectedValue, inherit);
  if (value === Opal.nil) {
    return undefined;
  }
  return value;
};

Opal.Asciidoctor.AbstractNode.$$proto.setAttribute = function (name, value, overwrite) {
  if (typeof overwrite === 'undefined') {
    overwrite = true;
  }
  return this.$set_attribute(name, value, overwrite);
};

Opal.Asciidoctor.AbstractNode.$$proto.isInline = function () {
  return this['$inline?']();
};

Opal.Asciidoctor.AbstractNode.$$proto.isBlock = function () {
  return this['$block?']();
};

Opal.Asciidoctor.AbstractNode.$$proto.isRole = function (expected) {
  return this['$role?'](expected);
};

Opal.Asciidoctor.AbstractNode.$$proto.getRole = function () {
  return this.$role();
};

Opal.Asciidoctor.AbstractNode.$$proto.hasRole = function (name) {
  return this['$has_role?'](name);
};

Opal.Asciidoctor.AbstractNode.$$proto.getRoles = function () {
  return this.$roles();
};

Opal.Asciidoctor.AbstractNode.$$proto.addRole = function (name) {
  return this.$add_role(name);
};

Opal.Asciidoctor.AbstractNode.$$proto.removeRole = function (name) {
  return this.$remove_role(name);
};

Opal.Asciidoctor.AbstractNode.$$proto.isReftext = function () {
  return this['$reftext?']();
};

Opal.Asciidoctor.AbstractNode.$$proto.getReftext = function () {
  return this.$reftext();
};

Opal.Asciidoctor.AbstractNode.$$proto.getContext = function () {
  var context =  this.context;
  if (context && typeof context.$to_s === 'function') {
    // Convert Ruby Symbol to String
    return context.$to_s();
  }
  return context;
};

Opal.Asciidoctor.AbstractNode.$$proto.getId = function () {
  return this.id;
};

Opal.Asciidoctor.AbstractNode.$$proto.isOption = function (name) {
  return this['$option?'](name);
};

Opal.Asciidoctor.AbstractNode.$$proto.setOption = function (name) {
  return this.$set_option(name);
};

Opal.Asciidoctor.AbstractNode.$$proto.getIconURI = function (name) {
  return this.$icon_uri(name);
};

Opal.Asciidoctor.AbstractNode.$$proto.getMediaURI = function (target, assetDirKey) {
  return this.$media_uri(target, assetDirKey);
};

Opal.Asciidoctor.AbstractNode.$$proto.getImageURI = function (targetImage, assetDirKey) {
  return this.$image_uri(targetImage, assetDirKey);
};

Opal.Asciidoctor.AbstractNode.$$proto.getConverter = function () {
  return this.$converter();
};

Opal.Asciidoctor.AbstractNode.$$proto.readContents = function (target, options) {
  return this.$read_contents(target, toHash(options));
};

Opal.Asciidoctor.AbstractNode.$$proto.readAsset = function (path, options) {
  return this.$read_asset(path, toHash(options));
};

Opal.Asciidoctor.AbstractNode.$$proto.normalizeWebPath = function (target, start, preserveTargetURI) {
  return this.$normalize_web_path(target, start, preserveTargetURI);
};

Opal.Asciidoctor.AbstractNode.$$proto.normalizeSystemPath = function (target, start, jail, options) {
  return this.$normalize_system_path(target, start, jail, toHash(options));
};

Opal.Asciidoctor.AbstractNode.$$proto.normalizeAssetPath = function (assetRef, assetName, autoCorrect) {
  return this.$normalize_asset_path(assetRef, assetName, autoCorrect);
};

// Document API

Opal.Asciidoctor.Document.$$proto.getHeader = function () {
  return this.header;
};

Opal.Asciidoctor.Document.$$proto.setAttribute = function (name, value) {
  return this.$set_attribute(name, value);
};

Opal.Asciidoctor.Document.$$proto.removeAttribute = function (name) {
  this.attributes.$delete(name);
  this.attribute_overrides.$delete(name);
};

Opal.Asciidoctor.Document.$$proto.convert = function (options) {
  var result = this.$convert(toHash(options));
  if (result === Opal.nil) {
    return '';
  }
  return result;
};

Opal.Asciidoctor.Document.$$proto.write = function (output, target) {
  return this.$write(output, target);
};

Opal.Asciidoctor.Document.$$proto.getAuthor = function () {
  return this.$author();
};

Opal.Asciidoctor.Document.$$proto.getSource = function () {
  return this.$source();
};

Opal.Asciidoctor.Document.$$proto.getSourceLines = function () {
  return this.$source_lines();
};

Opal.Asciidoctor.Document.$$proto.isNested = function () {
  return this['$nested?']();
};

Opal.Asciidoctor.Document.$$proto.hasFootnotes = function () {
  return this['$footnotes?']();
};

Opal.Asciidoctor.Document.$$proto.getFootnotes = function () {
  return this.$footnotes();
};

Opal.Asciidoctor.Document.$$proto.isEmbedded = function () {
  return this['$embedded?']();
};

Opal.Asciidoctor.Document.$$proto.hasExtensions = function () {
  return this['$extensions?']();
};

Opal.Asciidoctor.Document.$$proto.getDoctype = function () {
  return this.$doctype();
};

Opal.Asciidoctor.Document.$$proto.getBackend = function () {
  return this.$backend();
};

Opal.Asciidoctor.Document.$$proto.isBasebackend = function (base) {
  return this['$basebackend?'](base);
};

Opal.Asciidoctor.Document.$$proto.getTitle = function () {
  return this.$title();
};

Opal.Asciidoctor.Document.$$proto.setTitle = function (title) {
  return this['$title='](title);
};

Opal.Asciidoctor.Document.$$proto.getDoctitle = function (options) {
  return this.$doctitle(toHash(options));
};

Opal.Asciidoctor.Document.$$proto.getRevdate = function () {
  return this.$revdate();
};

Opal.Asciidoctor.Document.$$proto.getNotitle = function () {
  return this.$notitle();
};

Opal.Asciidoctor.Document.$$proto.getNoheader = function () {
  return this.$noheader();
};

Opal.Asciidoctor.Document.$$proto.getNofooter = function () {
  return this.$nofooter();
};

Opal.Asciidoctor.Document.$$proto.hasHeader = function () {
  return this['$header?']();
};

Opal.Asciidoctor.Document.$$proto.deleteAttribute = function (name) {
  return this.$delete_attribute(name);
};

Opal.Asciidoctor.Document.$$proto.isAttributeLocked = function (name) {
  return this['$attribute_locked?'](name);
};

Opal.Asciidoctor.Document.$$proto.parse = function (data) {
  return this.$parse(data);
};

Opal.Asciidoctor.Document.$$proto.getDocinfo = function (docinfoLocation, suffix) {
  return this.$docinfo(docinfoLocation, suffix);
};

Opal.Asciidoctor.Document.$$proto.hasDocinfoProcessors = function (docinfoLocation) {
  return this['$docinfo_processors?'](docinfoLocation);
};

Opal.Asciidoctor.Document.$$proto.counterIncrement = function (counterName, block) {
  return this.$counter_increment(counterName, block);
};

Opal.Asciidoctor.Document.$$proto.counter = function (name, seed) {
  return this.$counter(name, seed);
};

Opal.Asciidoctor.Document.$$proto.getSafe = function () {
  return this.$safe;
};

Opal.Asciidoctor.Document.$$proto.getCompatMode = function () {
  return this.$compat_mode;
};

Opal.Asciidoctor.Document.$$proto.getSourcemap = function () {
  return this.$sourcemap;
};

Opal.Asciidoctor.Document.$$proto.getReferences = function () {
  return this.$references;
};

Opal.Asciidoctor.Document.$$proto.getCounters = function () {
  return this.$counters;
};

Opal.Asciidoctor.Document.$$proto.getCallouts = function () {
  return this.$callouts;
};

Opal.Asciidoctor.Document.$$proto.getBaseDir = function () {
  return this.$base_dir;
};

Opal.Asciidoctor.Document.$$proto.getOptions = function () {
  return this.$options;
};

Opal.Asciidoctor.Document.$$proto.getOutfilesuffix = function () {
  return this.$outfilesuffix;
};

Opal.Asciidoctor.Document.$$proto.getParentDocument = function () {
  return this.$parent_document;
};

Opal.Asciidoctor.Document.$$proto.getReader = function () {
  return this.$reader;
};

Opal.Asciidoctor.Document.$$proto.getConverter = function () {
  return this.$converter;
};

Opal.Asciidoctor.Document.$$proto.getExtensions = function () {
  return this.$extensions;
};

// Document.Title API

Opal.Asciidoctor.Document.Title.$$proto.getMain = function () {
  return this.main;
};

Opal.Asciidoctor.Document.Title.$$proto.getCombined = function () {
  return this.combined;
};

Opal.Asciidoctor.Document.Title.$$proto.getSubtitle = function () {
  return this.subtitle;
};

Opal.Asciidoctor.Document.Title.$$proto.isSanitized = function () {
  var sanitized = this['$sanitized?']();
  if (sanitized === Opal.nil) {
    return false;
  }
  return sanitized;
};

Opal.Asciidoctor.Document.Title.$$proto.hasSubtitle = function () {
  return this['$subtitle?']();
};

// Extensions API

var Extensions = Opal.Asciidoctor.$$scope.Extensions;

Extensions.register = function (block, name) {
  Opal.block_send(Opal.Asciidoctor.Extensions, 'register', block, name);
};

Extensions.Registry.$$proto.inlineMacro = function (block, name) {
  return Opal.block_send(this, 'inline_macro', block, name);
};

Extensions.InlineMacroProcessor.$$proto.process = function (block) {
  return Opal.block_send(this, 'process', block);
};


  return Opal.Asciidoctor;
}));
